
@set(PRELAYOUT_DEBUG=0)

{
	global.patch_messagelayer_prelayout_handle_conductor_event_tagname = "__patch_prelayout_handle_conductor_event";
}

{
	global.add_kag_window_tag_handler(global.patch_messagelayer_prelayout_handle_conductor_event_tagname, function(elm)
	{
		if (elm.event_name === "ScenarioLoad")
		{
			this.onConductorScenarioLoad(elm.name);
		}
		else if (elm.event_name === "ScenarioLoaded")
		{
			this.onConductorScenarioLoaded(elm.name);
		}
		else if (elm.event_name === "Label")
		{
			this.onConductorLabel(elm.label, elm.page);
		}
		else if (elm.event_name === "Jump")
		{
			this.onConductorJump(elm.elm);
		}
		else if (elm.event_name === "Call")
		{
			this.onConductorCall(elm.elm);
		}
		else if (elm.event_name === "Return")
		{
			this.onConductorReturn(elm.elm);
		}
		else if (elm.event_name === "AfterReturn")
		{
			this.onConductorAfterReturn();
		}
		else if (elm.event_name === "Script")
		{
			this.onConductorScript(elm.script, elm.scriptname, elm.lineofs);
		}
		else if (elm.event_name === "UnknownTag")
		{
			this.onConductorUnknownTag(elm.arg_tagname, elm.elm);
		}
		else
		{
			throw new global.Exception("Unknown event_name");
		}
		return 0;
	});
}

global.KAGWindow_patch_messagelayer_prelayout_original = global.KAGWindow;
class KAGWindow_patch_messagelayer_prelayout_override extends global.KAGWindow_patch_messagelayer_prelayout_original
{
	function KAGWindow_patch_messagelayer_prelayout_override()
	{
		super.KAGWindow(...);

		this.conductor.getPreprocessChCompletionCallbacks().add(this.patch_messagelayer_prelayout_preprocess_ch_completion);
	}

	function KAGWindow()
	{
		this.KAGWindow_patch_messagelayer_prelayout_override(...);
	}

	var patch_messagelayer_prelayout_tags_execnow = [
		"ch",
		"graph",
		"ruby",
		"r",
		"hr",
		"history",
		"font",
		"resetfont",
		"deffont",
		"align",
		"locatealign",
		"line",
		"block",
		"indent",
		"setdefaultmessageaction",
		"resetdefaultmessageaction",
		"setmessageappearaction",
		"resetmessageappearaction",
	];

	function patch_messagelayer_prelayout_preprocess_ch_completion(conductor, elm)
	{
		// Don't need to call recursively, already performing loop
		if (!isvalid(this.current))
		{
			return;
		}
		if (this.current.in_prelayout_mode)
		{
			return;
		}
		var patch_messagelayer_prelayout_tags_execnow = this.patch_messagelayer_prelayout_tags_execnow;
		this.current.in_prelayout_mode = true;
		var last_visible = this.current.visible;
		var last_opacity = this.current.opacity;
		this.current.visible = true;
		this.current.opacity = 255;
		this.updateBeforeCh = false;
		var has_break_tag = false;
@if(PRELAYOUT_DEBUG)
		global.Debug.message("Prelayout start:");
@endif
		while (conductor.pendings_prelayout.count > 0)
		{
			var strelm = [];
			strelm.assign(conductor.pendings_prelayout);
			conductor.pendings_prelayout.clear();
			var ret2 = %[];
@if(PRELAYOUT_DEBUG)
			global.Debug.message("Prelayout chunk start:");
@endif
			for (var ii = 0; ii < strelm.count; ii += 1)
			{
				if (typeof(strelm[ii]) === "String")
				{
					var text = strelm[ii];
					var text_sz = text.length;
@if(PRELAYOUT_DEBUG)
					global.Debug.message("String queued: " + text);
@endif
					for (var i = 0; i < text_sz; i += 1)
					{
						ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
						ret2.__patch_conductor_line = elm.__patch_conductor_line;
						if (text[i] == "\n")
						{
							ret2.tagname = "r";
							if (typeof(ret2.text) === "String")
							{
								delete ret2.text;
							}
						}
						else
						{
							ret2.tagname = "ch";
							ret2.text = text[i];
						}
						conductor.lastTagName = ret2.tagname;
						var rettime = conductor.handlers[ret2.tagname](ret2);
						rettime |= 0;
						if (rettime !== 0 && (ret2.tagname === "ch" || ret2.tagname === "ruby") && this.current.prelayout_charlayers.count > 0)
						{
							var charlayer = this.current.prelayout_charlayers[this.current.prelayout_charlayers.count-1];
							charlayer.queued_wait_time = rettime;
						}
					}
				}
				else
				{
					var tag = strelm[ii];
@if(PRELAYOUT_DEBUG)
					global.Debug.message("Tag queued: " + tag.tagname);
@endif
					if (patch_messagelayer_prelayout_tags_execnow.find(tag.tagname) !== -1)
					{
						// execute tag handler now
						conductor.lastTagName = tag.tagname;
						var rettime = conductor.handlers[tag.tagname](tag);
						rettime |= 0;
						var new_pendings_prelayout_new_count = conductor.pendings_prelayout.count;
						if (rettime !== 0 && (tag.tagname === "ch" || tag.tagname === "ruby") && this.current.prelayout_charlayers.count > 0)
						{
							var charlayer = this.current.prelayout_charlayers[this.current.prelayout_charlayers.count-1];
							charlayer.queued_wait_time = rettime;
						}
						else if (new_pendings_prelayout_new_count > 0)
						{
							for (var i = ii + 1; i < strelm.count; i += 1)
							{
								conductor.pendings_prelayout.add(strelm[i]);
							}
							break;
						}
					}
					else if (tag.tagname === "ch_patch_conductor_split")
					{
						conductor.handleConductorSplit(tag);
						var new_pendings_prelayout_new_count = conductor.pendings_prelayout.count;
						if (new_pendings_prelayout_new_count > 0)
						{
							for (var i = ii + 1; i < strelm.count; i += 1)
							{
								conductor.pendings_prelayout.add(strelm[i]);
							}
							break;
						}
					}
					else if (tag.tagname === "ch_patch_conductor_messagelayer_tag")
					{
						conductor.handleConductorMessageLayerTag(tag);
						var new_pendings_prelayout_new_count = conductor.pendings_prelayout.count;
						if (new_pendings_prelayout_new_count > 0)
						{
							for (var i = ii + 1; i < strelm.count; i += 1)
							{
								conductor.pendings_prelayout.add(strelm[i]);
							}
							break;
						}
					}
					else
					{
						if (tag.tagname === "cm")
						{
							has_break_tag = true;
						}
						if (tag.tagname === "p" || tag.tagname === "l")
						{
							var current = this.current;
							if (current.glyphFixedPosition)
							{
								tag.glyph_left = current.glyphFixedLeft;
								tag.glyph_top = current.glyphFixedTop;
							}
							else
							{
								if (!current.vertical)
								{
									tag.glyph_left = current.x + current.getCharLayerLeftOffset();
									tag.glyph_top = current.y + current.getCharLayerTopOffset();
								}
								else
								{
									tag.glyph_left = current.x + current.getCharLayerLeftOffset();
									tag.glyph_top = current.y + current.getCharLayerTopOffset();
								}
							}
						}
						this.current.prelayout_charlayers.add(tag);
					}
				}
			}
@if(PRELAYOUT_DEBUG)
			global.Debug.message("Prelayout chunk end:");
@endif
		}
@if(PRELAYOUT_DEBUG)
		global.Debug.message("Prelayout end:");
@endif
		this.current.visible = last_visible;
		this.current.opacity = last_opacity;
		this.current.in_prelayout_mode = false;
		if ((conductor.pendings.length == 0) || (conductor.pendings.length > 0 && conductor.pendings[0].tagname !== "ch_patch_conductor_split" && conductor.pendings[0].tagname !== "ch_patch_conductor_messagelayer_tag") || has_break_tag)
		{
@if(PRELAYOUT_DEBUG)
			global.Debug.message("Prelayout execute:");
@endif
			var ret2 = %[];
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			ret2.tagname = "patch_messagelayer_prelayout_exec";
			conductor.pendings.insert(0, ret2);
		}
	}

	function onConductorScenarioLoad(name)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "ScenarioLoad";
			tag_struct.name = name;
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorScenarioLoad(...);
		}
		return ret;
	}

	function onConductorScenarioLoaded(name)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "ScenarioLoaded";
			tag_struct.name = name;
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorScenarioLoaded(...);
		}
		return ret;
	}

	function onConductorLabel(label, page)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "Label";
			tag_struct.label = label;
			tag_struct.page = page;
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorLabel(...);
		}
		return ret;
	}

	function onConductorJump(elm)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "Jump";
			{
				var elm_clone = %[];
				(global.Dictionary.assign incontextof elm_clone)(elm);
				tag_struct.elm = elm_clone;
			}
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorJump(...);
		}
		return ret;
	}

	function onConductorCall(elm)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "Call";
			{
				var elm_clone = %[];
				(global.Dictionary.assign incontextof elm_clone)(elm);
				tag_struct.elm = elm_clone;
			}
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorCall(...);
		}
		return ret;
	}

	function onConductorReturn(elm)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "Return";
			{
				var elm_clone = %[];
				(global.Dictionary.assign incontextof elm_clone)(elm);
				tag_struct.elm = elm_clone;
			}
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorReturn(...);
		}
		return ret;
	}

	function onConductorAfterReturn()
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "AfterReturn";
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorAfterReturn(...);
		}
		return ret;
	}

	function onConductorScript(script, scriptname, lineofs)
	{
		var ret = true;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "Script";
			tag_struct.script = script;
			tag_struct.scriptname = scriptname;
			tag_struct.lineofs = lineofs;
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorScript(...);
		}
		return ret;
	}

	function onConductorUnknownTag(tagname, elm)
	{
		var ret = 0;
		if (isvalid(this.current) && this.current.in_prelayout_mode)
		{
			var tag_struct = %[];
			tag_struct.tagname = global.patch_messagelayer_prelayout_handle_conductor_event_tagname;
			tag_struct.event_name = "UnknownTag";
			tag_struct.arg_tagname = tagname;
			{
				var elm_clone = %[];
				(global.Dictionary.assign incontextof elm_clone)(elm);
				tag_struct.elm = elm_clone;
			}
			this.conductor.queueTag(0, tag_struct);
		}
		else
		{
			ret = super.onConductorUnknownTag(...);
		}
		return ret;
	}
}
global.KAGWindow = global.KAGWindow_patch_messagelayer_prelayout_override;

global.Conductor_patch_messagelayer_prelayout_original = global.Conductor;
class Conductor_patch_messagelayer_prelayout_override extends global.Conductor_patch_messagelayer_prelayout_original
{
	function Conductor_patch_messagelayer_prelayout_override()
	{
		super.Conductor(...);
	}

	function Conductor()
	{
		this.Conductor_patch_messagelayer_prelayout_override(...);
	}

	var pendings_prelayout = [];

	function queueTag(i, elm)
	{
		var ret2 = %[];
		(global.Dictionary.assignStruct incontextof ret2)(elm);
		ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
		ret2.__patch_conductor_line = elm.__patch_conductor_line;
		this.pendings_prelayout.insert(i, ret2);
	}

	function requeueText(text, elm)
	{
		var ret2 = %[];
		ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
		ret2.__patch_conductor_line = elm.__patch_conductor_line;
		ret2.tagname = "ch_patch_conductor_split";
		ret2.text = text;
		ret2.extra_param = elm.extra_param;
		ret2.append = elm.append;
		ret2.prepend = elm.prepend;
		this.pendings_prelayout.insert(0, ret2);
	}

	function queueText(text, elm)
	{
		if (typeof(text) === "Object")
		{
			this.pendings_prelayout.insert(0, text.join(""));
		}
		else if (typeof(text) === "String")
		{
			this.pendings_prelayout.insert(0, text);
		}
	}

	function queueReline(elm, reline_ml=true, reline_hl=true)
	{
		if (reline_ml && reline_hl)
		{
			var ret2 = %[];
			ret2.__patch_messagelayer_prelayout_storage = elm.__patch_messagelayer_prelayout_storage;
			ret2.__patch_messagelayer_prelayout_line = elm.__patch_messagelayer_prelayout_line;
			ret2.tagname = "r";
			this.pendings_prelayout.insert(0, ret2);
		}
		else if (reline_hl && !reline_ml)
		{
			var ret2 = %[];
			ret2.__patch_messagelayer_prelayout_storage = elm.__patch_messagelayer_prelayout_storage;
			ret2.__patch_messagelayer_prelayout_line = elm.__patch_messagelayer_prelayout_line;
			ret2.tagname = "hr";
			this.pendings_prelayout.insert(0, ret2);
		}
		else if (reline_ml && !reline_hl)
		{
			var old_historyWriteEnabled = this.owner.historyWriteEnabled;
			{
				if (old_historyWriteEnabled)
				{
					// re-enable history output
					var ret2 = %[];
					ret2.__patch_messagelayer_prelayout_storage = elm.__patch_messagelayer_prelayout_storage;
					ret2.__patch_messagelayer_prelayout_line = elm.__patch_messagelayer_prelayout_line;
					ret2.tagname = "history";
					ret2.output = "1";
					this.pendings_prelayout.insert(0, ret2);
				}
				{
					// reline (on message layer only)
					var ret2 = %[];
					ret2.__patch_messagelayer_prelayout_storage = elm.__patch_messagelayer_prelayout_storage;
					ret2.__patch_messagelayer_prelayout_line = elm.__patch_messagelayer_prelayout_line;
					ret2.tagname = "r";
					this.pendings_prelayout.insert(0, ret2);
				}
				if (old_historyWriteEnabled)
				{
					// disable history output
					var ret2 = %[];
					ret2.__patch_messagelayer_prelayout_storage = elm.__patch_messagelayer_prelayout_storage;
					ret2.__patch_messagelayer_prelayout_line = elm.__patch_messagelayer_prelayout_line;
					ret2.tagname = "history";
					ret2.output = "0";
					this.pendings_prelayout.insert(0, ret2);
				}
			}
		}
	}

	function queuePrependMessageLayerRelatedTags(elm)
	{
		var prepend = [];
		prepend.assignStruct(elm.prepend);
		for (var i = prepend.count - 1; i >= 0; i -= 1)
		{
			var ret2 = %[];
			(global.Dictionary.assignStruct incontextof ret2)(prepend[i]);
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			this.pendings_prelayout.insert(0, ret2);
		}
	}

	function queueAppendMessageLayerRelatedTags(elm)
	{
		var append = [];
		append.assignStruct(elm.append);
		for (var i = append.count - 1; i >= 0; i -= 1)
		{
			var ret2 = %[];
			(global.Dictionary.assignStruct incontextof ret2)(append[i]);
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			this.pendings_prelayout.insert(0, ret2);
		}
	}

	function onTag(elm)
	{
		if (elm.tagname === "patch_messagelayer_prelayout_exec")
		{
			return this.owner.current.prelayoutExecOperation(elm);
		}
		return super.onTag(...);
	}

	function conductor_prelayout_clear()
	{
		this.pendings_prelayout.clear();
		if (typeof(this.owner) === "Object" && typeof(this.owner.current) === "Object" && isvalid(this.owner.current))
		{
			this.owner.current.prelayoutClear();
		}
	}

	function clear()
	{
		this.conductor_prelayout_clear();
		return super.clear(...);
	}

	function assign()
	{
		this.conductor_prelayout_clear();
		return super.assign(...);
	}

	function restore()
	{
		var ret = super.restore(...);
		this.conductor_prelayout_clear();
		return ret;
	}

	function loadScenario()
	{
		this.conductor_prelayout_clear();
		return super.loadScenario(...);
	}

	function goToLabel()
	{
		this.conductor_prelayout_clear();
		return super.goToLabel(...);
	}
}
global.Conductor = global.Conductor_patch_messagelayer_prelayout_override;

global.MessageLayer_patch_messagelayer_prelayout_original = global.MessageLayer;
class MessageLayer_patch_messagelayer_prelayout_override extends global.MessageLayer_patch_messagelayer_prelayout_original
{
	function MessageLayer_patch_messagelayer_prelayout_override()
	{
		super.MessageLayer(...);
	}

	function MessageLayer()
	{
		this.MessageLayer_patch_messagelayer_prelayout_override(...);
	}

	var in_prelayout_mode = false;
	var in_prelayout_exec_mode = false;
	var prelayout_currentLine = 0;
	var prelayout_currentColumn = 0;
	var prelayout_x = 0;
	var prelayout_y = 0;

	var _x;
	var _y;

	property x
	{
		getter
		{
			if (!this.in_prelayout_exec_mode)
			{
				return this._x;
			}
			return this.prelayout_x;
		}
		setter(v)
		{
			this._x = v;
			this.prelayout_x = v;
		}
	}

	property y
	{
		getter
		{
			if (!this.in_prelayout_exec_mode)
			{
				return this._y;
			}
			return this.prelayout_y;
		}
		setter(v)
		{
			this._y = v;
			this.prelayout_y = v;
		}
	}

	var prelayout_charlayers = [];
	var prelayout_last_queued_time = void;

	function prelayoutClear()
	{
		if (this.in_prelayout_mode || this.in_prelayout_exec_mode)
		{
			for (var i = 0; i < this.prelayout_charlayers.count; i += 1)
			{
				var charlayer = this.prelayout_charlayers[i];
				if (!(isvalid(charlayer)))
				{
					// pass
				}
				else if (charlayer instanceof "MessageCharLayer")
				{
					if ((typeof(charlayer.currentLine) === "Integer") && (typeof(charlayer.currentColumn) === "Integer"))
					{
						this.removeCharLayer(charlayer.currentLine, charlayer.currentColumn);
					}
				}
			}
			this.prelayout_charlayers.clear();
			this.prelayout_last_queued_time = void;
			this.in_prelayout_mode = false;
			this.in_prelayout_exec_mode = false;
			this.prelayout_currentLine = 0;
			this.prelayout_currentColumn = 0;
			this.prelayout_x = 0;
			this.prelayout_y = 0;
		}
	}

	function prelayoutPrepareCharLayer(charlayer)
	{
		if (this.in_prelayout_mode)
		{
			charlayer.group = void;
			charlayer.visible = false;
			this.prelayout_charlayers.add(charlayer);
			if (typeof(charlayer.queued_appear_action) === "Object")
			{
				delete charlayer.queued_appear_action;
			}
			if (typeof(charlayer.queued_continuous_action) === "Object")
			{
				delete charlayer.queued_continuous_action;
			}
		}
	}

	function backspace(cnt = 1)
	{
		if (this.in_prelayout_mode)
		{
			if (this.prelayout_charlayers.count < cnt)
			{
				cnt = this.prelayout_charlayers.count;
			}
			for (var i = 0; i < cnt; i += 1)
			{
				this.prelayout_charlayers.erase(this.prelayout_charlayers.count - 1);
			}
		}
		super.backspace(...);
	}

	function prelayoutExecCharLayer(charlayer)
	{
		charlayer.group = this.currentCharGroup;
		charlayer.visible = true;
@if(MESSAGELAYER_ACTIONMANAGER)
		this.lastCharLayer = charlayer;

		if (this.window.skipMode == 1 || this.window.skipMode == 2)
		{
			this.window.stopAllActionsByType("char");
		}

		if (typeof(charlayer.queued_appear_action) === "Object")
		{
			var queued_appear_action = charlayer.queued_appear_action;
			delete charlayer.queued_appear_action;
			if (queued_appear_action[0] !== void)
			{
				(queued_appear_action[0] incontextof this)();
			}
			actionChar(charlayer, (queued_appear_action[1] incontextof this)(), queued_appear_action[2]);
		}
		if (typeof(charlayer.queued_continuous_action) === "String")
		{
			var queued_continuous_action = charlayer.queued_continuous_action;
			delete charlayer.queued_continuous_action;
			beginContinuousAction(charlayer, queued_continuous_action);
		}
@endif
		if (typeof(charlayer.currentLine) === "Integer")
		{
			this.prelayout_currentLine = charlayer.currentLine;
		}
		if (typeof(charlayer.currentColumn) === "Integer")
		{
			this.prelayout_currentColumn = charlayer.currentColumn;
		}
		if (typeof(charlayer.x_after) === "Integer")
		{
			this.prelayout_x = charlayer.x_after;
		}
		if (typeof(charlayer.y_after) === "Integer")
		{
			this.prelayout_y = charlayer.y_after;
		}
		if (typeof(charlayer.queued_wait_time) === "Integer")
		{
			var queued_wait_time = charlayer.queued_wait_time;
			delete charlayer.queued_wait_time;
			return queued_wait_time;
		}
		return 0;
	}

@if(MESSAGELAYER_ACTIONMANAGER)
	function prelayoutHandleAppearAction(charlayer, charcnt=1, continuous=true)
	{
		if (in_prelayout_mode)
		{
			var	aa;
			if(enabledCharAppearAction && appearType != void && (aa = appearActions[appearType]) != void)
			{
				var	init	= appearActions[appearType+"_init"];
				charlayer.queued_appear_action = [init, aa, appearTimeRate != void ? appearTimeRate * charcnt : charcnt];
			}
			if (continuous)
			{
				//	継続的に行うアクション(プロパティが競合しないなら、出現時のアクションと同時に実行可能)
				if(continuousType != void && continuousActions[continuousType] != void)
				{
					charlayer.queued_continuous_action = continuousType;
				}
			}
		}
		else
		{
			//	出現時のみのアクション
			var	aa;
			if(enabledCharAppearAction && appearType != void && (aa = appearActions[appearType]) != void)
			{
				//	初期化
				var	init	= appearActions[appearType+"_init"];
				(init incontextof this)() if init != void;

				//	実行
				actionLastChar((aa incontextof this)(), appearTimeRate != void ? appearTimeRate * charcnt : charcnt);
			}

			if (continuous)
			{
				//	継続的に行うアクション(プロパティが競合しないなら、出現時のアクションと同時に実行可能)
				if(continuousType != void && continuousActions[continuousType] != void)
				{
					beginContinuousAction(charlayer, continuousType);
				}
			}
		}
	}
@endif

	function prelayoutExecOperation(elm)
	{
		if (this.prelayout_last_queued_time === -2)
		{
			this.procedureGroup();
@if(MESSAGELAYER_ACTIONMANAGER)
			if (typeof(global.fadeoutLastMessage) === "Object")
			{
				global.fadeoutLastMessage();
			}
@endif
		}
		this.prelayout_last_queued_time = void;
		if (this.prelayout_charlayers.count > 0)
		{
@if(PRELAYOUT_DEBUG)
			if (!this.in_prelayout_exec_mode)
			{
				global.Debug.message("?:");
				for (var i = 0; i < this.prelayout_charlayers.count; i += 1)
				{
					var charlayer = this.prelayout_charlayers[i];
					if (!(isvalid(charlayer)))
					{
						global.Debug.message("Invalid object");
					}
					else if (charlayer instanceof "MessageCharLayer")
					{
						global.Debug.message("MessageCharLayer: " + charlayer.name);
					}
					else if (charlayer instanceof "Dictionary")
					{
						global.Debug.message("Tag: " + charlayer.tagname);
					}
				}
				global.Debug.message("?!");
			}
@endif
			this.in_prelayout_exec_mode = true;
			var queued_wait_time = 0;
			var charlayer = this.prelayout_charlayers[0];
			if ((isvalid(charlayer)) && (charlayer instanceof "MessageCharLayer") && (!this.visible || this.opacity < 255))
			{
@if(GAME_FHAT||GAME_WOHN)
				queued_wait_time = this.window.tagHandlers.texton(%[]);
@endif
@if(GAME_FATE)
				queued_wait_time = this.window.tagHandlers._texton(%[]);
@endif
			}
			else
			{
				this.prelayout_charlayers.erase(0);
				if (!(isvalid(charlayer)))
				{
					// pass
				}
				else if (charlayer instanceof "MessageCharLayer")
				{
					queued_wait_time = this.prelayoutExecCharLayer(charlayer);
					if (this.window.skipMode !== 0)
					{
						queued_wait_time = 0;
					}
				}
				else if (charlayer instanceof "Dictionary")
				{
					this.window.conductor.lastTagName = charlayer.tagname;
					queued_wait_time = this.window.conductor.handlers[charlayer.tagname](charlayer);
					queued_wait_time |= 0;
					if (charlayer.tagname === "p" || charlayer.tagname === "l")
					{
						if (!this.glyphFixedPosition)
						{
							if (!this.vertical)
							{
								charlayer.glyph_top -= this.glyphLayer.height;
							}
							else
							{
@if(SCALE_USING_FLOATING_POINT)
								charlayer.glyph_left += (this.glyphLayer.width/2);
@endif
@if(!SCALE_USING_FLOATING_POINT)
								charlayer.glyph_left += (this.glyphLayer.width>>1);
@endif
							}
						}
						this.glyphLayer.setPos(charlayer.glyph_left, charlayer.glyph_top);
					}
				}
			}
			var ret2 = %[];
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			ret2.tagname = "patch_messagelayer_prelayout_exec";
			this.window.conductor.pendings.insert(0, ret2);
			this.prelayout_last_queued_time = queued_wait_time;
			return queued_wait_time;
		}
		this.in_prelayout_exec_mode = false;
		return 0;
	}

	property currentLineLengthSize
	{
		getter
		{
			if (!this.in_prelayout_exec_mode)
			{
				return super.currentLineLengthSize;
			}
			if(this.prelayout_currentColumn > 0)
			{
				var	chars	= this.charLayers[this.prelayout_currentLine];
				var	len		= 0;
				if(!this.vertical)
				{
					len	= chars[0].textWidth;
					for(var i=1; i<this.prelayout_currentColumn; i++)
						len	+= chars[i].textWidth + chars[i-1].pitch;
				}
				else
				{
					len	= chars[0].textHeight;
					for(var i=1; i<this.prelayout_currentColumn; i++)
						len	+= chars[i].textHeight + chars[i-1].pitch;
				}
				return len;
			}
			else
				return 0;
		}
	}

	function clearLayer()
	{
		this.prelayoutClear();
		var ret = super.clearLayer(...);
		return ret;
	}



}
global.MessageLayer = global.MessageLayer_patch_messagelayer_prelayout_override;
