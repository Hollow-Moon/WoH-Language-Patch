
global.Conductor_patch_skip_original = global.Conductor;
class Conductor_patch_skip_override extends global.Conductor_patch_skip_original
{
	function Conductor_patch_skip_override()
	{
		super.Conductor(...);
	}

	function Conductor()
	{
		this.Conductor_patch_skip_override(...);
	}

	function onTag(elm)
	{
		var owner = this.owner;
		if (
			(
				typeof(owner.skipToScenario) === "String"
				|| typeof(owner.skipToLabel) === "String"
				|| typeof(owner.skipToLine) === "Integer"
				|| typeof(owner.isSkippingToTarget) === "Integer"
				)
			&& elm.exp !== "timeline_object.loadByData(global.__tmp_tla,global.__tla_name)"
			)
		{
			if (typeof(owner.skipToScenario) === "String")
			{
				if (owner.skipToScenario === this.curStorage)
				{
					owner.skipToScenario = void;
				}
			}
			else if (typeof(owner.skipToLabel) === "String")
			{
				if (owner.skipToLabel === this.curLabel)
				{
					owner.skipToLabel = void;
				}
			}
			else if (typeof(owner.skipToLine) === "Integer")
			{
				if (owner.skipToLine < this.curLine)
				{
					owner.skipToLine = void;
				}
			}
			else
			{
				if (typeof(owner.isSkippingToTarget) === "Integer")
				{
					owner.isSkippingToTarget = false;
				}
			}
		}
		if (typeof(owner.isSkippingToTarget) === "Integer")
		{
			if (owner.isSkippingToTarget)
			{
				if (owner.skipMode !== 3)
				{
					owner.skipToStop();
				}
			}
			else
			{
				owner.isSkippingToTarget = void;
				owner.cancelSkip();
			}
		}
		return super.onTag(...);
	}
}
global.Conductor = global.Conductor_patch_skip_override;

global.KAGWindow_patch_skip_original = global.KAGWindow;
class KAGWindow_patch_skip_override extends global.KAGWindow_patch_skip_original
{
	var jumpToLabel;
	var jumpToScenario;
	var skipToLabel;
	var skipToScenario;
	var skipToLine;
	var isSkippingToTarget;
	var shouldSkipImmediate;
	var __patch_skip_shutting_down;

	property visible
	{
		getter
		{
			return super.visible;
		}
		setter (v)
		{
			if (typeof(this.__patch_skip_shutting_down) === "Integer")
			{
				return;
			}
			super.visible = v;
		}
	}

	function KAGWindow_patch_skip_override(ismain, width, height)
	{
		super.KAGWindow(...);
		if (this.isMain)
		{
			this.jumpToLabel = global.System.getArgument('-jumplabel');
			this.jumpToScenario = global.System.getArgument('-jumpscenario');
			this.shouldSkipImmediate = global.System.getArgument('-skipimmediate');
		}
	}

	function KAGWindow()
	{
		this.KAGWindow_patch_skip_override(...);
	}

	function set_skip(skipscenario, skiplabel, skipline)
	{
		if (typeof(skipscenario) === "String")
		{
			this.isSkippingToTarget = true;
			this.skipToScenario = skipscenario;
		}
		else
		{
			this.skipToScenario = void;
		}
		if (typeof(skiplabel) === "String")
		{
			this.isSkippingToTarget = true;
			this.skipToLabel = skiplabel;
		}
		else
		{
			this.skipToLabel = void;
		}
		if (typeof(skipline) === "Integer" || typeof(skipline) === "String")
		{
			this.isSkippingToTarget = true;
			this.skipToLine = (skipline | 0) - 2;
		}
		else
		{
			this.skipToLine = void;
		}
		if (typeof(this.skipToScenario) !== "String" && typeof(this.skipToLabel) !== "String" && typeof(this.skipToLine) !== "Integer")
		{
			this.isSkippingToTarget = void;
		}
	}

	function showPageBreak()
	{
		if (this.isSkippingToTarget !== void)
		{
			return 0;
		}
		return super.showPageBreak(...);
	}

	function showLineBreak()
	{
		if (this.isSkippingToTarget !== void)
		{
			return 0;
		}
		return super.showLineBreak(...);
	}

	function getHandlers()
	{
		var handlers = super.getHandlers();
		handlers.ch_patch_skip_original = handlers.ch;
		handlers.ch = function(elm)
		{
			if (this.isSkippingToTarget !== void)
			{
				return 0;
			}
			return this.tagHandlers.ch_patch_skip_original(elm);
		} incontextof this;
		handlers.r_patch_skip_original = handlers.r;
		handlers.r = function(elm)
		{
			if (this.isSkippingToTarget !== void)
			{
				return 0;
			}
			return this.tagHandlers.r_patch_skip_original(elm);
		} incontextof this;
		handlers.patch_skip_break = function(elm)
		{
			this.set_skip();
			return 1;
		} incontextof this;
		return handlers;
	}

	function do_immediate_skip()
	{
		while (this.isSkippingToTarget)
		{
			this.setConductorToMain();
			this.conductor.inProcessing = false;
			this.conductor.run(true);
			if (typeof(this.actmgr) === "Object")
			{
				this.actmgr.stopAll(false);
			}
		}
	}

	function shutdown()
	{
		this.isSkippingToTarget = false;
		this.__patch_skip_shutting_down = true;
		return super.shutdown(...);
	}

	function process(storage)
	{
		if ((typeof(this.jumpToScenario) === "String" || global.System.getArgument('-archiveopenscenario') !== void || global.System.getArgument('-flowchartopenbyscenario') !== void) && storage === "first.ks" && this.isMain)
		{
			this.set_skip(global.System.getArgument('-skipscenario'), global.System.getArgument('-skiplabel'), global.System.getArgument('-skipline'));
			var ret = super.process((typeof(this.jumpToScenario) === "String") ? this.jumpToScenario : storage, (typeof(this.jumpToLabel) === "String") ? this.jumpToLabel : void, true, typeof(this.shouldSkipImmediate) === "String");
			if (typeof(this.shouldSkipImmediate) === "String")
			{
				this.do_immediate_skip();
			}
			this.jumpToScenario = void;
			this.jumpToLabel = void;
			this.shouldSkipImmediate = void;
			return ret;
		}
		return super.process(...);
	}
}
global.KAGWindow = global.KAGWindow_patch_skip_override;
