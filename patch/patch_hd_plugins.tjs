@if(HD_MODE)
// filter.dll

function Noise_patch_hd_plugins_override(param)
{
	var ie;
	try
	{
		param.layer.absoluteMode += 1;
		global.Noise_patch_hd_plugins_original(param);
	}
	catch (e)
	{
		ie = e;
	}
	param.layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.Noise) === "Object")
{
	global.Noise_patch_hd_plugins_original = Noise;
	global.Noise = Noise_patch_hd_plugins_override;
}

function Contrast_patch_hd_plugins_override(elm)
{
	var ie;
	try
	{
		elm.layer.absoluteMode += 1;
		global.Contrast_patch_hd_plugins_original(elm);
	}
	catch (e)
	{
		ie = e;
	}
	elm.layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.Contrast) === "Object")
{
	global.Contrast_patch_hd_plugins_original = Contrast;
	global.Contrast = Contrast_patch_hd_plugins_override;
}

function doHaze_patch_hd_plugins_override(elm)
{
	var ie;
	try
	{
		elm.src.absoluteMode += 1;
		elm.dest.absoluteMode += 1;
		global.doHaze_patch_hd_plugins_original(elm);
	}
	catch (e)
	{
		ie = e;
	}
	elm.src.absoluteMode -= 1;
	elm.dest.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.doHaze) === "Object")
{
	global.doHaze_patch_hd_plugins_original = doHaze;
	global.doHaze = doHaze_patch_hd_plugins_override;
}

// slideopen.dll

function initSlideOpen_patch_hd_plugins_override(plugin)
{
	if (global.kag.wideScreen) return; // Plugin doesn't work in wide screen for some reason.

	var ie;
	try
	{
		plugin.src.absoluteMode += 1;
		plugin.dest.absoluteMode += 1;
		global.initSlideOpen_patch_hd_plugins_original(plugin);
	}
	catch (e)
	{
		ie = e;
	}
	plugin.src.absoluteMode -= 1;
	plugin.dest.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.initSlideOpen) === "Object")
{
	global.initSlideOpen_patch_hd_plugins_original = initSlideOpen;
	global.initSlideOpen = initSlideOpen_patch_hd_plugins_override;
}

function drawSlideOpen_patch_hd_plugins_override()
{
	if (global.kag.wideScreen) return;
	return global.drawSlideOpen_patch_hd_plugins_original(...);
}
if (typeof(global.drawSlideOpen) === "Object")
{
	global.drawSlideOpen_patch_hd_plugins_original = drawSlideOpen;
	global.drawSlideOpen = drawSlideOpen_patch_hd_plugins_override;
}

function finishSlideOpen_patch_hd_plugins_override()
{
	if (global.kag.wideScreen) return;
	return global.finishSlideOpen_patch_hd_plugins_original(...);
}
if (typeof(global.finishSlideOpen) === "Object")
{
	global.finishSlideOpen_patch_hd_plugins_original = finishSlideOpen;
	global.finishSlideOpen = finishSlideOpen_patch_hd_plugins_override;
}

// drawer.dll

function drawLine_patch_hd_plugins_override(layer, x0, y0, cx, cy, lc)
{
	var widthScale = layer.widthScale;
	var heightScale = layer.heightScale;

	x0 *= widthScale;
	y0 *= heightScale;
	cx *= widthScale;
	cy *= heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
	x0 = global.Math.round(x0) | 0;
	y0 = global.Math.round(y0) | 0;
	cx = global.Math.round(cx) | 0;
	cy = global.Math.round(cy) | 0;
@endif

	var ie;
	try
	{
		layer.absoluteMode += 1;
		global.drawLine_patch_hd_plugins_original(layer, x0, y0, cx, cy, lc);
	}
	catch (e)
	{
		ie = e;
	}
	layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.drawLine) === "Object")
{
	global.drawLine_patch_hd_plugins_original = drawLine;
	global.drawLine = drawLine_patch_hd_plugins_override;
}


function drawAALine_patch_hd_plugins_override(layer, x0, y0, cx, cy, lc)
{
	var widthScale = layer.widthScale;
	var heightScale = layer.heightScale;

	x0 *= widthScale;
	y0 *= heightScale;
	cx *= widthScale;
	cy *= heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
	x0 = global.Math.round(x0) | 0;
	y0 = global.Math.round(y0) | 0;
	cx = global.Math.round(cx) | 0;
	cy = global.Math.round(cy) | 0;
@endif

	var ie;
	try
	{
		layer.absoluteMode += 1;
		global.drawAALine_patch_hd_plugins_original(layer, x0, y0, cx, cy, lc);
	}
	catch (e)
	{
		ie = e;
	}
	layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
}
if (typeof(global.drawAALine) === "Object")
{
	global.drawAALine_patch_hd_plugins_original = drawAALine;
	global.drawAALine = drawAALine_patch_hd_plugins_override;
}

// LayerExFilter.dll
if (typeof(global.Layer.drawNoise) === "Object")
{
	global.Layer.drawNoise_patch_hd_plugins_original = global.Layer.drawNoise;
	global.Layer.drawNoise = function(monocro, under, upper, seed, l, t, w, h, holdalpha)
	{
		l = this.transformLeft(l);
		t = this.transformTop(t);
		w *= this.widthScale;
		h *= this.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		l = global.Math.round(l) | 0;
		t = global.Math.round(t) | 0;
		w = global.Math.round(w) | 0;
		h = global.Math.round(h) | 0;
@endif

		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.drawNoise_patch_hd_plugins_original incontextof this)(monocro, under, upper, seed, l, t, w, h, holdalpha);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.doContrast) === "Object")
{
	global.Layer.doContrast_patch_hd_plugins_original = global.Layer.doContrast;
	global.Layer.doContrast = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.doContrast_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initHazeCopy) === "Object")
{
	global.Layer.initHazeCopy_patch_hd_plugins_original = global.Layer.initHazeCopy;
	global.Layer.initHazeCopy = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initHazeCopy_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.uninitHazeCopy) === "Object")
{
	global.Layer.uninitHazeCopy_patch_hd_plugins_original = global.Layer.uninitHazeCopy;
	global.Layer.uninitHazeCopy = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.uninitHazeCopy_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.hazeCopy) === "Object")
{
	global.Layer.hazeCopy_patch_hd_plugins_original = global.Layer.hazeCopy;
	global.Layer.hazeCopy = function(waveinfono, srcLayer, sl, st, rad, delta, per, alphablend, dl, dt, dw, dh, sw, sh)
	{
		sl = srcLayer.transformLeft(sl);
		st = srcLayer.transformTop(st);
		sw *= srcLayer.widthScale;
		sh *= srcLayer.heightScale;
		dl = this.transformLeft(dl);
		dt = this.transformTop(dt);
		dw *= this.widthScale;
		dh *= this.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		sl = global.Math.round(sl) | 0;
		st = global.Math.round(st) | 0;
		sw = global.Math.round(sw) | 0;
		sh = global.Math.round(sh) | 0;
		dl = global.Math.round(dl) | 0;
		dt = global.Math.round(dt) | 0;
		dw = global.Math.round(dw) | 0;
		dh = global.Math.round(dh) | 0;
@endif

		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.hazeCopy_patch_hd_plugins_original incontextof this)(waveinfono, srcLayer, sl, st, rad, delta, per, alphablend, dl, dt, dw, dh, sw, sh);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExParticle.dll
if (typeof(global.Layer.initVectorParticle) === "Object")
{
	global.Layer.initVectorParticle_patch_hd_plugins_original = global.Layer.initVectorParticle;
	global.Layer.initVectorParticle = function(unk, mc, gr, l, t, w, h)
	{
		l = this.transformLeft(l);
		t = this.transformTop(t);
		w *= this.widthScale;
		h *= this.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		l = global.Math.round(l) | 0;
		t = global.Math.round(t) | 0;
		w = global.Math.round(w) | 0;
		h = global.Math.round(h) | 0;
@endif

		var ret;
		var ie;
		try
		{
			if (this.initializedParticle && typeof(this.particleImage) === "Object")
			{
				this.particleImage.absoluteMode += 1;
			}
			this.absoluteMode += 1;
			ret = (global.Layer.initVectorParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, l, t, w, h);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initRotateParticle) === "Object")
{
	global.Layer.initRotateParticle_patch_hd_plugins_original = global.Layer.initRotateParticle;
	global.Layer.initRotateParticle = function(unk, mc, gr, cx, cy)
	{
		cx = this.transformLeft(cx);
		cy = this.transformTop(cy);

@if(SCALE_ROUND_TOWARDS_NEAREST)
		cx = global.Math.round(cx) | 0;
		cy = global.Math.round(cy) | 0;
@endif

		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initRotateParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, cx, cy);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initAccelRotateParticle) === "Object")
{
	global.Layer.initAccelRotateParticle_patch_hd_plugins_original = global.Layer.initAccelRotateParticle;
	global.Layer.initAccelRotateParticle = function(unk, mc, gr, cx, cy)
	{
		cx = this.transformLeft(cx);
		cy = this.transformTop(cy);
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initAccelRotateParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, cx, cy);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initBlinkParticle) === "Object")
{
	global.Layer.initBlinkParticle_patch_hd_plugins_original = global.Layer.initBlinkParticle;
	global.Layer.initBlinkParticle = function(unk, mc, gr, l, t, w, h)
	{
		l = this.transformLeft(l);
		t = this.transformTop(t);
		w *= this.widthScale;
		h *= this.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		l = global.Math.round(l) | 0;
		t = global.Math.round(t) | 0;
		w = global.Math.round(w) | 0;
		h = global.Math.round(h) | 0;
@endif

		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initBlinkParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, l, t, w, h);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.uninitParticle) === "Object")
{
	global.Layer.uninitParticle_patch_hd_plugins_original = global.Layer.uninitParticle;
	global.Layer.uninitParticle = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.uninitParticle_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.updateParticle) === "Object")
{
	global.Layer.updateParticle_patch_hd_plugins_original = global.Layer.updateParticle;
	global.Layer.updateParticle = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.updateParticle_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.setParticleBlinkTime) === "Object")
{
	global.Layer.setParticleBlinkTime_patch_hd_plugins_original = global.Layer.setParticleBlinkTime;
	global.Layer.setParticleBlinkTime = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.setParticleBlinkTime_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExYaDraw.dll

if (typeof(global.Layer.drawFocusLines) === "Object")
{
	// XXX: probably need to do split-component multiply of cmin and cmax…
	global.Layer.drawFocusLines_patch_hd_plugins_original = global.Layer.drawFocusLines;
	global.Layer.drawFocusLines = function(cx, cy, cmin, cmax, lmin, lmax, emin, emax, color)
	{
		cx = this.transformLeft(cx);
		cy = this.transformTop(cy);

@if(SCALE_ROUND_TOWARDS_NEAREST)
		cx = global.Math.round(cx) | 0;
		cy = global.Math.round(cy) | 0;
@endif

		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.drawFocusLines_patch_hd_plugins_original incontextof this)(cx, cy, cmin, cmax, lmin, lmax, emin, emax, color);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExImage.dll

if (typeof(global.Layer.light) === "Object")
{
	global.Layer.light_patch_hd_plugins_original = global.Layer.light;
	global.Layer.light = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.light_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.colorize) === "Object")
{
	global.Layer.colorize_patch_hd_plugins_original = global.Layer.colorize;
	global.Layer.colorize = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.colorize_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.modulate) === "Object")
{
	global.Layer.modulate_patch_hd_plugins_original = global.Layer.modulate;
	global.Layer.modulate = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.modulate_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.noise) === "Object")
{
	global.Layer.noise_patch_hd_plugins_original = global.Layer.noise;
	global.Layer.noise = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.noise_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.generateWhiteNoise) === "Object")
{
	global.Layer.generateWhiteNoise_patch_hd_plugins_original = global.Layer.generateWhiteNoise;
	global.Layer.generateWhiteNoise = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.generateWhiteNoise_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.gaussianBlur) === "Object")
{
	global.Layer.gaussianBlur_patch_hd_plugins_original = global.Layer.gaussianBlur;
	global.Layer.gaussianBlur = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.gaussianBlur_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// layerExAreaAverage.dll
if (typeof(global.Layer.stretchCopyAA) === "Object")
{
	global.Layer.stretchCopyAA_patch_hd_plugins_original = global.Layer.stretchCopyAA;
	global.Layer.stretchCopyAA = function(left, top, width, height, src, sleft, stop, swidth, sheight, type)
	{
		left = src.transformLeft(left, this);
		top = src.transformTop(top, this);
		width *= this.widthScale;
		height *= this.heightScale;
		sleft = this.transformSLeft(src, sleft, swidth);
		stop *= src.heightScale;
		swidth *= src.widthScale;
		sheight *= src.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		left = global.Math.round(left) | 0;
		top = global.Math.round(top) | 0;
		width = global.Math.round(width) | 0;
		height = global.Math.round(height) | 0;
		sleft = global.Math.round(sleft) | 0;
		stop = global.Math.round(stop) | 0;
		swidth = global.Math.round(swidth) | 0;
		sheight = global.Math.round(sheight) | 0;
@endif

		var ie;
		try
		{
			src.absoluteMode += 1;
			this.absoluteMode += 1;
			(global.Layer.stretchCopyAA_patch_hd_plugins_original incontextof this)(left, top, width, height, src, sleft, stop, swidth, sheight, type);
		}
		catch (e)
		{
			ie = e;
		}
		src.absoluteMode -= 1;
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	};
}

// shrinkCopy.dll
if (typeof(global.Layer.shrinkCopy) === "Object")
{
	global.Layer.shrinkCopy_patch_hd_plugins_original = global.Layer.shrinkCopy;
	global.Layer.shrinkCopy = function(left, top, width, height, src, sleft, stop, swidth, sheight)
	{
		left = src.transformLeft(left, this);
		top = src.transformTop(top, this);
		width *= this.widthScale;
		height *= this.heightScale;
		sleft *= src.widthScale;
		stop *= src.heightScale;
		swidth *= src.widthScale;
		sheight *= src.heightScale;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		left = global.Math.round(left) | 0;
		top = global.Math.round(top) | 0;
		width = global.Math.round(width) | 0;
		height = global.Math.round(height) | 0;
		sleft = global.Math.round(sleft) | 0;
		stop = global.Math.round(stop) | 0;
		swidth = global.Math.round(swidth) | 0;
		sheight = global.Math.round(sheight) | 0;
@endif

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer.shrinkCopy_patch_hd_plugins_original incontextof this)(left, top, width, height, src, sleft, stop, swidth, sheight);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	};
}

// krass.dll

if (typeof(global.Layer.ass_set_frame_size_to_image_size) === "Object")
{
	global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original = global.Layer.ass_set_frame_size_to_image_size;
	global.Layer.ass_set_frame_size_to_image_size = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

if (typeof(global.Layer.ass_set_frame_size_to_image_size) === "Object")
{
	global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original = global.Layer.ass_set_frame_size_to_image_size;
	global.Layer.ass_set_frame_size_to_image_size = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
@endif
