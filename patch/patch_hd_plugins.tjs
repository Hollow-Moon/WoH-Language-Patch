@if(HD_MODE)
// filter.dll

global.Noise_patch_hd_plugins_override = function(param)
{
	var ie;
	try
	{
		param.layer.absoluteMode += 1;
		global.Noise_patch_hd_plugins_original(param);
	}
	catch (e)
	{
		ie = e;
	}
	param.layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.Noise) === "Object")
{
	global.Noise_patch_hd_plugins_original = Noise;
	global.Noise = Noise_patch_hd_plugins_override;
}

global.Contrast_patch_hd_plugins_override = function(elm)
{
	var ie;
	try
	{
		elm.layer.absoluteMode += 1;
		global.Contrast_patch_hd_plugins_original(elm);
	}
	catch (e)
	{
		ie = e;
	}
	elm.layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.Contrast) === "Object")
{
	global.Contrast_patch_hd_plugins_original = Contrast;
	global.Contrast = Contrast_patch_hd_plugins_override;
}

global.initHaze_patch_hd_plugins_override = function(elm)
{
	var originalUpper = elm.upper;
	var originalCenter = elm.center;
	var originalLower = elm.lower;
	var originalCycle = elm.cycle;
	elm.upper = elm.upper * scaleFactor if elm.upper > 0;
	elm.center = elm.center * global.get_wideScaleFactor() if elm.center > 0;
	elm.lower = elm.lower * scaleFactor if elm.lower > 0;
	elm.cycle = elm.cycle / scaleFactor;
	for (var i=0; i < elm.waves.count; i++) {
		elm.waves[i][2] *= scaleFactor;
	}
	for (var i=0; i < elm.lwaves.count; i++) {
		elm.lwaves[i][2] *= scaleFactor;
	}
	var ie;
	try
	{
		global.initHaze_patch_hd_plugins_original(elm);
	}
	catch (e)
	{
		ie = e;
	}
	elm.upper = originalUpper;
	elm.center = originalCenter;
	elm.lower = originalLower;
	elm.cycle = originalCycle;
	for (var i=0; i < elm.waves.count; i++) {
		elm.waves[i][2] /= scaleFactor;
	}
	for (var i=0; i < elm.lwaves.count; i++) {
		elm.lwaves[i][2] /= scaleFactor;
	}
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.initHaze) === "Object")
{
	global.initHaze_patch_hd_plugins_original = initHaze;
	global.initHaze = initHaze_patch_hd_plugins_override;
}

global.doHaze_patch_hd_plugins_override = function(elm)
{
	var ie;
	try
	{
		elm.src.absoluteMode += 1;
		elm.dest.absoluteMode += 1;
		global.doHaze_patch_hd_plugins_original(elm);
	}
	catch (e)
	{
		ie = e;
	}
	elm.src.absoluteMode -= 1;
	elm.dest.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.doHaze) === "Object")
{
	global.doHaze_patch_hd_plugins_original = doHaze;
	global.doHaze = doHaze_patch_hd_plugins_override;
}

// slideopen.dll

global.initSlideOpen_patch_hd_plugins_override = function(plugin)
{
	if (global.kag.wideScreen) return; // Plugin doesn't work in wide screen for some reason.

	var ie;
	try
	{
		plugin.src.absoluteMode += 1;
		plugin.dest.absoluteMode += 1;
		global.initSlideOpen_patch_hd_plugins_original(plugin);
	}
	catch (e)
	{
		ie = e;
	}
	plugin.src.absoluteMode -= 1;
	plugin.dest.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.initSlideOpen) === "Object")
{
	global.initSlideOpen_patch_hd_plugins_original = initSlideOpen;
	global.initSlideOpen = initSlideOpen_patch_hd_plugins_override;
}

global.drawSlideOpen_patch_hd_plugins_override = function()
{
	if (global.kag.wideScreen) return;
	return global.drawSlideOpen_patch_hd_plugins_original(...);
};
if (typeof(global.drawSlideOpen) === "Object")
{
	global.drawSlideOpen_patch_hd_plugins_original = drawSlideOpen;
	global.drawSlideOpen = drawSlideOpen_patch_hd_plugins_override;
}

global.finishSlideOpen_patch_hd_plugins_override = function()
{
	if (global.kag.wideScreen) return;
	return global.finishSlideOpen_patch_hd_plugins_original(...);
};
if (typeof(global.finishSlideOpen) === "Object")
{
	global.finishSlideOpen_patch_hd_plugins_original = finishSlideOpen;
	global.finishSlideOpen = finishSlideOpen_patch_hd_plugins_override;
}

// drawer.dll

global.drawLine_patch_hd_plugins_override = function(layer, x0, y0, cx, cy, lc)
{
	x0 = layer.scaleInsideImageWidth(x0);
	y0 = layer.scaleInsideImageHeight(y0);
	cx = layer.scaleInsideImageWidth(cx);
	cy = layer.scaleInsideImageHeight(cy);

	var ie;
	try
	{
		layer.absoluteMode += 1;
		global.drawLine_patch_hd_plugins_original(layer, x0, y0, cx, cy, lc);
	}
	catch (e)
	{
		ie = e;
	}
	layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.drawLine) === "Object")
{
	global.drawLine_patch_hd_plugins_original = drawLine;
	global.drawLine = drawLine_patch_hd_plugins_override;
}


global.drawAALine_patch_hd_plugins_override = function(layer, x0, y0, cx, cy, lc)
{
	x0 = layer.scaleInsideImageWidth(x0);
	y0 = layer.scaleInsideImageHeight(y0);
	cx = layer.scaleInsideImageWidth(cx);
	cy = layer.scaleInsideImageHeight(cy);

	var ie;
	try
	{
		layer.absoluteMode += 1;
		global.drawAALine_patch_hd_plugins_original(layer, x0, y0, cx, cy, lc);
	}
	catch (e)
	{
		ie = e;
	}
	layer.absoluteMode -= 1;
	if (ie !== void)
	{
		throw ie;
	}
};
if (typeof(global.drawAALine) === "Object")
{
	global.drawAALine_patch_hd_plugins_original = drawAALine;
	global.drawAALine = drawAALine_patch_hd_plugins_override;
}

// LayerExFilter.dll
if (typeof(global.Layer.drawNoise) === "Object")
{
	global.Layer.drawNoise_patch_hd_plugins_original = global.Layer.drawNoise;
	global.Layer.drawNoise = function(monocro, under, upper, seed, l, t, w, h, holdalpha)
	{
		var wOriginal = this.scaleInsideImageWidth(w);
		var hOriginal = this.scaleInsideImageWidth(h);
		var lOriginal = this.scaleInsideImageLeft(l, w, wOriginal);
		var tOriginal = this.scaleInsideImageTop(t, h, hOriginal);
		
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.drawNoise_patch_hd_plugins_original incontextof this)(monocro, under, upper, seed, lOriginal, tOriginal, wOriginal, hOriginal, holdalpha);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.doContrast) === "Object")
{
	global.Layer.doContrast_patch_hd_plugins_original = global.Layer.doContrast;
	global.Layer.doContrast = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.doContrast_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initHazeCopy) === "Object")
{
	global.Layer.initHazeCopy_patch_hd_plugins_original = global.Layer.initHazeCopy;
	global.Layer.initHazeCopy = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initHazeCopy_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.uninitHazeCopy) === "Object")
{
	global.Layer.uninitHazeCopy_patch_hd_plugins_original = global.Layer.uninitHazeCopy;
	global.Layer.uninitHazeCopy = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.uninitHazeCopy_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.hazeCopy) === "Object")
{
	global.Layer.hazeCopy_patch_hd_plugins_original = global.Layer.hazeCopy;
	global.Layer.hazeCopy = function(waveinfono, srcLayer, sl, st, rad, delta, per, alphablend, dl, dt, dw, dh, sw, sh)
	{
		var swOriginal = srcLayer.scaleInsideImageWidth(sw);
		var shOriginal = srcLayer.scaleInsideImageHeight(sh);
		var slOriginal = srcLayer.scaleInsideImageLeft(sl, sw, swOriginal);
		var stOriginal = srcLayer.scaleInsideImageTop(st, sh, shOriginal);

		var dwOriginal = this.scaleInsideImageWidth(dw);
		var dhOriginal = this.scaleInsideImageHeight(dh);
		var dlOriginal = this.scaleInsideImageLeft(dl, dw, dwOriginal);
		var dtOriginal = this.scaleInsideImageTop(dt, dt, dtOriginal);

		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.hazeCopy_patch_hd_plugins_original incontextof this)(waveinfono, srcLayer, sl, st, rad, delta, per, alphablend, dlOriginal, dtOriginal, dwOriginal, dhOriginal, swOriginal, shOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExParticle.dll
if (typeof(global.Layer.initVectorParticle) === "Object")
{
	global.Layer.initVectorParticle_patch_hd_plugins_original = global.Layer.initVectorParticle;
	global.Layer.initVectorParticle = function(unk, mc, gr, l, t, w, h)
	{
		var wOriginal = this.scaleInsideImageWidth(w);
		var hOriginal = this.scaleInsideImageWidth(h);
		var lOriginal = this.scaleInsideImageLeft(l, w, wOriginal);
		var tOriginal = this.scaleInsideImageTop(t, h, hOriginal);

		var ret;
		var ie;
		try
		{
			if (this.initializedParticle && typeof(this.particleImage) === "Object")
			{
				this.particleImage.absoluteMode += 1;
			}
			this.absoluteMode += 1;
			ret = (global.Layer.initVectorParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, lOriginal, tOriginal, wOriginal, hOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initRotateParticle) === "Object")
{
	global.Layer.initRotateParticle_patch_hd_plugins_original = global.Layer.initRotateParticle;
	global.Layer.initRotateParticle = function(unk, mc, gr, cx, cy)
	{
		cx = this.scaleInsideImageWidth(cx);
		cy = this.scaleInsideImageHeight(cy);

		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initRotateParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, cx, cy);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initAccelRotateParticle) === "Object")
{
	global.Layer.initAccelRotateParticle_patch_hd_plugins_original = global.Layer.initAccelRotateParticle;
	global.Layer.initAccelRotateParticle = function(unk, mc, gr, cx, cy)
	{
		cx = this.scaleInsideImageWidth(cx);
		cy = this.scaleInsideImageHeight(cy);
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initAccelRotateParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, cx, cy);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.initBlinkParticle) === "Object")
{
	global.Layer.initBlinkParticle_patch_hd_plugins_original = global.Layer.initBlinkParticle;
	global.Layer.initBlinkParticle = function(unk, mc, gr, l, t, w, h)
	{
		var wOriginal = this.scaleInsideImageWidth(w);
		var hOriginal = this.scaleInsideImageWidth(h);
		var lOriginal = this.scaleInsideImageLeft(l, w, wOriginal);
		var tOriginal = this.scaleInsideImageTop(t, h, hOriginal);

		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.initBlinkParticle_patch_hd_plugins_original incontextof this)(unk, mc, gr, lOriginal, tOriginal, wOriginal, hOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.uninitParticle) === "Object")
{
	global.Layer.uninitParticle_patch_hd_plugins_original = global.Layer.uninitParticle;
	global.Layer.uninitParticle = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.uninitParticle_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.updateParticle) === "Object")
{
	global.Layer.updateParticle_patch_hd_plugins_original = global.Layer.updateParticle;
	global.Layer.updateParticle = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.updateParticle_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.setParticleBlinkTime) === "Object")
{
	global.Layer.setParticleBlinkTime_patch_hd_plugins_original = global.Layer.setParticleBlinkTime;
	global.Layer.setParticleBlinkTime = function()
	{
		var ret;
		var ie;
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode += 1;
		}
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.setParticleBlinkTime_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		if (this.initializedParticle && typeof(this.particleImage) === "Object")
		{
			this.particleImage.absoluteMode -= 1;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExYaDraw.dll

if (typeof(global.Layer.drawFocusLines) === "Object")
{
	// XXX: probably need to do split-component multiply of cmin and cmax…
	global.Layer.drawFocusLines_patch_hd_plugins_original = global.Layer.drawFocusLines;
	global.Layer.drawFocusLines = function(cx, cy, cmin, cmax, lmin, lmax, emin, emax, color)
	{
		cx = this.scaleInsideImageWidth(cx);
		cy = this.scaleInsideImageHeight(cy);

		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.drawFocusLines_patch_hd_plugins_original incontextof this)(cx, cy, cmin, cmax, lmin, lmax, emin, emax, color);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// LayerExImage.dll

if (typeof(global.Layer.light) === "Object")
{
	global.Layer.light_patch_hd_plugins_original = global.Layer.light;
	global.Layer.light = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.light_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.colorize) === "Object")
{
	global.Layer.colorize_patch_hd_plugins_original = global.Layer.colorize;
	global.Layer.colorize = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.colorize_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.modulate) === "Object")
{
	global.Layer.modulate_patch_hd_plugins_original = global.Layer.modulate;
	global.Layer.modulate = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.modulate_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.noise) === "Object")
{
	global.Layer.noise_patch_hd_plugins_original = global.Layer.noise;
	global.Layer.noise = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.noise_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.generateWhiteNoise) === "Object")
{
	global.Layer.generateWhiteNoise_patch_hd_plugins_original = global.Layer.generateWhiteNoise;
	global.Layer.generateWhiteNoise = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.generateWhiteNoise_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
if (typeof(global.Layer.gaussianBlur) === "Object")
{
	global.Layer.gaussianBlur_patch_hd_plugins_original = global.Layer.gaussianBlur;
	global.Layer.gaussianBlur = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.gaussianBlur_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

// layerExAreaAverage.dll
if (typeof(global.Layer.stretchCopyAA) === "Object")
{
	global.Layer.stretchCopyAA_patch_hd_plugins_original = global.Layer.stretchCopyAA;
	global.Layer.stretchCopyAA = function(left, top, width, height, src, sleft, stop, swidth, sheight, type)
	{
		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			src.absoluteMode += 1;
			this.absoluteMode += 1;
			(global.Layer.stretchCopyAA_patch_hd_plugins_original incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal, type);
		}
		catch (e)
		{
			ie = e;
		}
		src.absoluteMode -= 1;
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	};
}

// shrinkCopy.dll
if (typeof(global.Layer.shrinkCopy) === "Object")
{
	global.Layer.shrinkCopy_patch_hd_plugins_original = global.Layer.shrinkCopy;
	global.Layer.shrinkCopy = function(left, top, width, height, src, sleft, stop, swidth, sheight)
	{
		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer.shrinkCopy_patch_hd_plugins_original incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	};
}

// krass.dll

if (typeof(global.Layer.ass_set_frame_size_to_image_size) === "Object")
{
	global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original = global.Layer.ass_set_frame_size_to_image_size;
	global.Layer.ass_set_frame_size_to_image_size = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}

if (typeof(global.Layer.ass_set_frame_size_to_image_size) === "Object")
{
	global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original = global.Layer.ass_set_frame_size_to_image_size;
	global.Layer.ass_set_frame_size_to_image_size = function()
	{
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			ret = (global.Layer.ass_set_frame_size_to_image_size_patch_hd_plugins_original incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		return ret;
	};
}
@endif
