
if (typeof(global.NamedPipeClient) !== "Object")
{
	if (Storages.isExistentStorage("krnamedpipeclient.dll"))
	{
		Plugins.link("krnamedpipeclient.dll");
	}
}

if (typeof(Scripts.evalJSON) !== "Object")
{
	if (Storages.isExistentStorage("json.dll"))
	{
		Plugins.link("json.dll");
	}
}

if (typeof(Storages.exportFile) !== "Object")
{
	if (Storages.isExistentStorage("fstat.dll"))
	{
		Plugins.link("fstat.dll");
	}
}

{
	// CreateNamedPipe
	// dwOpenMode flags
	global.PIPE_ACCESS_DUPLEX = 0x00000003;
	global.PIPE_ACCESS_INBOUND = 0x00000001;
	global.PIPE_ACCESS_OUTBOUND = 0x00000002;
	global.FILE_FLAG_FIRST_PIPE_INSTANCE = 0x00080000;
	global.FILE_FLAG_WRITE_THROUGH = 0x80000000;
	global.FILE_FLAG_OVERLAPPED = 0x40000000;
	global.WRITE_DAC = 0x00040000;
	global.WRITE_OWNER = 0x00080000;
	global.ACCESS_SYSTEM_SECURITY = 0x01000000;
	// dwPipeMode flags
	global.PIPE_TYPE_BYTE = 0x00000000;
	global.PIPE_TYPE_MESSAGE = 0x00000004;
	global.PIPE_READMODE_BYTE = 0x00000000;
	global.PIPE_READMODE_MESSAGE = 0x00000002;
	global.PIPE_WAIT = 0x00000000;
	global.PIPE_NOWAIT = 0x00000001;
	global.PIPE_ACCEPT_REMOTE_CLIENTS = 0x00000000;
	global.PIPE_REJECT_REMOTE_CLIENTS = 0x00000008;
	// nMaxInstances flags
	global.PIPE_UNLIMITED_INSTANCES = 255;

	// CreateFile
	// dwDesiredAccess flags (generic)
	global.GENERIC_READ = 0x80000000;
	global.GENERIC_WRITE = 0x40000000;
	global.GENERIC_EXECUTE = 0x20000000;
	global.GENERIC_ALL = 0x10000000;
	// dwShareMode flags
	global.FILE_SHARE_DELETE = 0x00000004;
	global.FILE_SHARE_READ = 0x00000001;
	global.FILE_SHARE_WRITE = 0x00000002;
	// dwCreationDisposition flags
	global.CREATE_ALWAYS = 2;
	global.CREATE_NEW = 1;
	global.OPEN_ALWAYS = 4;
	global.OPEN_EXISTING = 3;
	global.TRUNCATE_EXISTING = 5;
	// dwFlagsAndAttributes flags
	global.FILE_ATTRIBUTE_ARCHIVE = 0x20;
	global.FILE_ATTRIBUTE_ENCRYPTED = 0x4000;
	global.FILE_ATTRIBUTE_HIDDEN = 0x2;
	global.FILE_ATTRIBUTE_NORMAL = 0x80;
	global.FILE_ATTRIBUTE_OFFLINE = 0x1000;
	global.FILE_ATTRIBUTE_READONLY = 0x1;
	global.FILE_ATTRIBUTE_SYSTEM = 0x4;
	global.FILE_ATTRIBUTE_TEMPORARY = 0x100;
	global.FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
	global.FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;
	global.FILE_FLAG_NO_BUFFERING = 0x20000000;
	global.FILE_FLAG_OPEN_NO_RECALL = 0x00100000;
	global.FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
	global.FILE_FLAG_OVERLAPPED = 0x40000000;
	global.FILE_FLAG_POSIX_SEMANTICS = 0x0100000;
	global.FILE_FLAG_RANDOM_ACCESS = 0x10000000;
	global.FILE_FLAG_SESSION_AWARE = 0x00800000;
	global.FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;
	global.FILE_FLAG_WRITE_THROUGH = 0x80000000;
}

class MpvNamedPipeClientIPC
{
	var mpvpath;
	var namedpipe;
	var commandnpc;
	var exportnpc;
	var subfileexportnpc;
	var requests;
	var packedclose;
	function MpvNamedPipeClientIPC()
	{
		this.commandnpc = null;
		this.exportnpc = null;
		this.subfileexportnpc = null;
		this.mpvpath = global.paths_base[0] + "mpv.exe";
		this.packedclose = ["{ \"command\": [\"quit\"] }\n"].pack("a*");
		this.namedpipe = ("\\\\.\\pipe\\MpvNamedPipeClientIPC%i").sprintf(System.getTickCount());
		this.requests = [];
	}

	function finalize()
	{
		if (this.commandnpc !== null)
		{
			this.commandnpc.write(this.packedclose);
			this.kill_command_npc();
		}
		if (this.exportnpc !== null)
		{
			this.exportnpc.exportFileWait();
			this.exportnpc.close();
			invalidate this.exportnpc;
			this.exportnpc = null;
		}
		invalidate this;
	}

	function find_extract_mpv()
	{
		if (typeof(global.mpv_exepath) === "String")
		{
			this.mpvpath = global.mpv_exepath;
		}
		var mpv_placedpath = Storages.getPlacedPath("mpv.exe");
		if (mpv_placedpath !== "" && !Storages.isExistentStorage(this.mpvpath))
		{
			var mpv_localpath = Storages.getLocalName(mpv_placedpath);
			if (mpv_localpath === "" && typeof(Storages.exportFile) === "Object")
			{
				Storages.exportFile(mpv_placedpath, this.mpvpath);
				this.mpvpath = mpv_placedpath;
			}
			else
			{
				this.mpvpath = mpv_placedpath;
			}
		}
		return Storages.isExistentStorage(this.mpvpath);
	}

	function init()
	{
		var command_line = [
			"--idle",
			"--no-config",
			["--input-ipc-server=", this.namedpipe]
		];
		var add_command_line = [
			"--no-osc",
			"--osd-level=0",
			"--gpu-api=opengl",
			"--no-input-default-bindings",
			"--window-minimized",
			"--force-window"
		];
		if (typeof(global.mpv_commandline) === "Object")
		{
			add_command_line = global.mpv_commandline;
		}
		for (var i = 0, internal_forloop_count = add_command_line.count; i < internal_forloop_count; i += 1)
		{
			command_line.add(add_command_line[i]);
		}
		var success = global.build_exec_command_line(this.mpvpath, command_line, true, false);
		if (success)
		{
			System.addContinuousHandler(this.ensure_command_npc_continuous);
		}
		return success;
	}

	function kill_command_npc()
	{
		if (this.commandnpc !== null)
		{
			this.commandnpc.close();
			invalidate this.commandnpc;
			this.commandnpc = null;
		}
	}

	function reload_command_npc()
	{
		if (this.commandnpc !== null)
		{
			this.kill_command_npc();
			this.ensure_command_npc(10000);
		}
	}

	function ensure_command_npc_continuous()
	{
		this.ensure_command_npc();
	}

	function ensure_command_npc(wait_ms=1)
	{
		if (this.commandnpc === null)
		{
			if (NamedPipeClient.waitForPath(this.namedpipe, wait_ms))
			{
				this.commandnpc = new NamedPipeClient();
				this.commandnpc.open(
					this.namedpipe,
					GENERIC_READ | GENERIC_WRITE,
					0,
					false,
					OPEN_EXISTING,
					FILE_FLAG_WRITE_THROUGH
				);
				this.commandnpc.setState(PIPE_READMODE_MESSAGE | PIPE_WAIT, void, void);
				this.send_recv(%["command" => ["keybind", "CLOSE_WIN", "quit"]]);
				this.send_recv(%["command" => ["keybind", "MBTN_LEFT", "stop"]]);
				this.send_recv(%["command" => ["keybind", "ctrl", "stop"]]);
				this.send_recv(%["command" => ["set_property", "pause", "yes"]]);
				this.send_recv(%["command" => ["set_property", "window-minimized", "yes"]]);
				this.send_recv(%["command" => ["set_property", "force-window", "yes"]]);
				System.addContinuousHandler(this.get_stuff_continuous);
			}
		}
		if (this.commandnpc !== null)
		{
			System.removeContinuousHandler(this.ensure_command_npc_continuous);
		}
	}

	function get_stuff_continuous()
	{
		this.get_stuff();
	}

	function get_stuff(want_request_id, timeout=1000)
	{
		if (typeof(this.commandnpc) !== "Object")
		{
			System.removeContinuousHandler(this.get_stuff_continuous);
			return;
		}
		var ret = null;
		var has_request = want_request_id === void;
		var timeoutend = System.getTickCount() + timeout;
		while ((typeof(ret) !== "Octet") && !has_request)
		{
			ret = this.commandnpc.read();
			if ((typeof(ret) === "Octet"))
			{
@if(VIDEOMPV2_USENEWLINE)
				var ssplit = ret.unpack("a" + ret.length)[0].split("\n");
				for (var i = 0; i < ssplit.count; i += 1)
				{
					var txt = ssplit[i];
					if (txt.length > 0)
					{
						var ret3 = Scripts.evalJSON(txt);
						this.requests.add(ret3);
						if (ret3.request_id === want_request_id)
						{
							has_request = true;
						}
					}
				}
@endif
@if(!VIDEOMPV2_USENEWLINE)
				var ret3 = Scripts.evalJSON(ret.unpack("a" + ret.length)[0]);
				this.requests.add(ret3);
				if (ret3.request_id === want_request_id)
				{
					has_request = true;
				}
@endif
			}
			if (System.getTickCount() > timeoutend)
			{
				break;
			}
		}
	}

	function send_recv(dict, want_request=true)
	{
		if (this.commandnpc === null)
		{
			throw new Exception("MPV client not detected");
		}
		dict.request_id = System.getTickCount();
		get_stuff();
		this.commandnpc.write([("%s\n").sprintf(Scripts.toJSONString(dict).replace(/\r\n/g, ""))].pack("a*"));
		if (!want_request)
		{
			return null;
		}
		get_stuff(dict.request_id);
		for (var i = 0, internal_forloop_count = this.requests.count; i < internal_forloop_count; i += 1)
		{
			if (this.requests[i].request_id == dict.request_id)
			{
				return this.requests[i];
			}
		}
		return null;
	}

	function waitforplayfile()
	{
		if (this.exportnpc !== null)
		{
			this.exportnpc.exportFileWait();
			this.exportnpc.close();
			this.exportnpc = null;
		}
	}

	function playfile_storages(path)
	{
		if (this.exportnpc !== null)
		{
			this.waitforplayfile();
		}
		var exportname = ("\\\\.\\pipe\\MpvNamedPipeClientIPC%i").sprintf(System.getTickCount());
		this.exportnpc = new NamedPipeClient();
		this.exportnpc.create(
			exportname,
			PIPE_ACCESS_OUTBOUND | FILE_FLAG_FIRST_PIPE_INSTANCE,
			PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT | PIPE_REJECT_REMOTE_CLIENTS,
			2,
			1024 * 16,
			1024 * 16,
			0,
			false
		);
		this.exportnpc.exportFileAsync(path);
		this.send_recv(%["command" => ["loadfile", exportname]]);
	}

	function waitforsubfile()
	{
		if (this.subfileexportnpc !== null)
		{
			this.subfileexportnpc.exportFileWait();
			this.subfileexportnpc.close();
			this.subfileexportnpc = null;
		}
	}

	function subfile_storages(path)
	{
		if (this.subfileexportnpc !== null)
		{
			this.waitforsubfile();
		}
		var exportname = ("\\\\.\\pipe\\MpvNamedPipeClientIPC%i.ass").sprintf(System.getTickCount());
		this.subfileexportnpc = new NamedPipeClient();
		this.subfileexportnpc.create(
			exportname,
			PIPE_ACCESS_OUTBOUND | FILE_FLAG_FIRST_PIPE_INSTANCE,
			PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT | PIPE_REJECT_REMOTE_CLIENTS,
			2,
			1024 * 16,
			1024 * 16,
			0,
			false
		);
		this.subfileexportnpc.exportFileAsync(path);
		this.send_recv(%["command" => ["sub-add", exportname]]);
	}
}

if ((typeof(global.NamedPipeClient) === "Object") && (typeof(Scripts.evalJSON) === "Object") && (typeof(Array.pack) === "Object"))
{
	global.mpvNPCIPCObj = new MpvNamedPipeClientIPC();
	if (!global.mpvNPCIPCObj.find_extract_mpv())
	{
		var msg = "VideoMPV2: could not find mpv executable; tried " + global.mpvNPCIPCObj.mpvpath;
		var videosubsystem = System.getArgument("-videosubsystem");
		if (videosubsystem !== void)
		{
			if (videosubsystem === "mpv")
			{
				throw new Exception(msg);
			}
		}
		Debug.notice(msg);
		return;
	}
	if (!global.mpvNPCIPCObj.init())
	{
		var msg = "VideoMPV2: failed to initialize due to ShellExecute failure";
		var videosubsystem = System.getArgument("-videosubsystem");
		if (videosubsystem !== void)
		{
			if (videosubsystem === "mpv")
			{
				throw new Exception(msg);
			}
		}
		Debug.notice(msg);
		return;
	}
	global.iswine = typeof(System.readRegValue("HKEY_CURRENT_USER\\Software\\Wine\\FileOpenAssociations\\Enable")) === "String";

	global.playVideoMPV = function(name)
	{
		if (typeof(global.mpvNPCIPCObj) !== "Object")
		{
			return;
		}
		var forceDeliverEvents = function()
		{
			var origEventDisabled = System.eventDisabled;
			System.eventDisabled = true;
			System.eventDisabled = false;
			System.eventDisabled = origEventDisabled;
		};
		var fullscreen = global.kag.fullScreen;
		if (fullscreen)
		{
			global.kag.onWindowedMenuItemClick();
		}
		System.eventDisabled = true;
		global.kag.visible = false;
		global.mpvNPCIPCObj.ensure_command_npc(10000);
		global.mpvNPCIPCObj.reload_command_npc();
		global.mpvNPCIPCObj.playfile_storages(name);
		var namerev = name.reverse();
		var spos = namerev.indexOf(".");
		var subname = ("ssa." + namerev.substring(spos + 1)).reverse();
		if (Storages.isExistentStorage(subname))
		{
			global.mpvNPCIPCObj.subfile_storages(subname);
		}
		global.mpvNPCIPCObj.send_recv(%["command" => ["keybind", "CLOSE_WIN", "stop"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "window-minimized", "no"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "fullscreen", fullscreen ? "yes" : "no"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "pause", "no"]]);
		global.mpvNPCIPCObj.waitforplayfile();
		global.mpvNPCIPCObj.send_recv(%["command" => ["keybind", "CLOSE_WIN", "quit"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "pause", "yes"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "fullscreen", "no"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["set_property", "window-minimized", "yes"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["stop"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["stop"]]);
		global.mpvNPCIPCObj.send_recv(%["command" => ["stop"]]);
		global.mpvNPCIPCObj.get_stuff();
		System.eventDisabled = false;
		forceDeliverEvents();
		global.kag.visible = true;
		if (fullscreen)
		{
			global.kag.onFullScreenMenuItemClick();
		}
		forceDeliverEvents();
		return 0;
	};

	global.shouldUseMPV = function()
	{
		var videosubsystem = System.getArgument("-videosubsystem");
		if (videosubsystem !== void)
		{
			return (videosubsystem === "mpv");
		}
		return global.iswine || (typeof(global.kag.sflags.forceMpvPlayback) === "Integer" && global.kag.sflags.forceMpvPlayback); // TODO should also return true in windows without WMF (need to find a way to query that...)
	};

	Debug.notice("VideoMPV2: initialized successfully");
}
else
{
	var msg = "";
	msg += "VideoMPV2: failed to initialize for the following reasons:\n";
	if ((typeof(global.NamedPipeClient) !== "Object"))
	{
		msg += "VideoMPV2: NamedPipeClient object (krnamedpipeclient.dll) not found\n";
	}
	if (typeof(Scripts.evalJSON) !== "Object")
	{
		msg += "VideoMPV2: Scripts.evalJSON function (json.dll) not found\n";
	}
	if (typeof(Array.pack) !== "Object")
	{
		msg += "VideoMPV2: Array.pack function (implemented in krkrz) not found\n";
	}
	var videosubsystem = System.getArgument("-videosubsystem");
	if (videosubsystem !== void)
	{
		if (videosubsystem === "mpv")
		{
			throw new Exception(msg);
		}
	}
	Debug.notice(msg);
}
