
global.Window_hint_original = Window;
class Window_hint_override extends Window_hint_original
{
	var hintlayer = void;

	function initHintLayer()
	{
		hintlayer = new Layer(this, primaryLayer);
		with (hintlayer) {
			.visible = false;
			.ignoreHintSensing = true;
			.hitThreshold = 256;
			.font.height = Math.ceil(9 / Math.min(1, innerHeightScale)); // upscale font when using window size < x1.0
			.font.face = __s("MS UI Gothic", "hint_font_face");
@if(WIDE_MODE)
			._isFixedPosition = true;
@endif
		}

		// hintDelay = 500; // default
		// hintDelay = 0; // immediate
		// hintDelay = -1; // never
		// hintDelay = 1000; // slow
	}

	var hintHorizontalPadding = 4;
	var hintVerticalPadding = 6;
	var hintLineSpacing = 6;
	var tooltipBorderColor = 0xffffe1;
	var mouseCursorSize = 20;

	function onHintChanged(text, x, y, isshow)
	{
		if (hintlayer === void) {
			initHintLayer();
		}
		if (isshow) {
			var lines = text.split("\n");
			var longestLineIndex = 0;
			for (var i=1; i<lines.count; i++) {
				if (lines[i].length > lines[longestLineIndex].length) {
					longestLineIndex = i;
				}
			}

			var fontHeight = hintlayer.font.height;
			var w = hintlayer.font.getTextWidth(lines[longestLineIndex]) + hintHorizontalPadding * 2;
			var h = fontHeight * lines.count + hintLineSpacing * (lines.count-1) + hintVerticalPadding * 2;
			hintlayer.setImageSize(w, h);
			hintlayer.setSizeToImageSize();

@if(HD_MODE)
			if (typeof this.fullScreened !== "undefined" && fullScreened) {
				var windowToScreenRatio = (innerHeight*scaleFactor) / System.screenHeight;
				x -= (System.screenWidth - (innerWidth*wideScaleFactor / windowToScreenRatio)) / 2;
				x *= windowToScreenRatio;
				y *= windowToScreenRatio;
			}

			x /= wideScaleFactor;
			y /= scaleFactor;
@endif
@if(ZOOM_WINDOW)
			x /= innerWidthScale;
			y /= innerHeightScale;
			if ((x+w) > innerWidth/innerWidthScale) { x = innerWidth/innerWidthScale - w; }
			if ((y+mouseCursorSize+h) > innerHeight/innerHeightScale) { y = innerHeight/innerHeightScale - h - mouseCursorSize/innerHeightScale; }
			hintlayer.setPos(x, y + mouseCursorSize/innerHeightScale);
@endif
@if(!ZOOM_WINDOW)
			if ((x+w) > innerWidth) { x = innerWidth - w; }
			if ((y+mouseCursorSize+h) > innerHeight) { y = innerHeight - h - mouseCursorSize; }
			hintlayer.setPos(x, y + mouseCursorSize);
@endif

			hintlayer.fillRect(0, 0, w, h, 0);
			hintlayer.colorRect(0, 0, w, h, clInfoBk, 196);

			hintlayer.colorRect(0,   0,   1, h, tooltipBorderColor);
			hintlayer.colorRect(0,   0,   w, 1, tooltipBorderColor);
			hintlayer.colorRect(w-1, 0,   1, h, tooltipBorderColor);
			hintlayer.colorRect(0,   h-1, w, 1, tooltipBorderColor);

			var lineY = hintVerticalPadding;
			for (var i=0; i<lines.count; i++) {
				hintlayer.drawText(hintHorizontalPadding, lineY, lines[i], clInfoText, 220);
				lineY += fontHeight + hintLineSpacing;
			}
			hintlayer.visible = true;
			hintlayer.bringToFront();
		} else {
			hintlayer.visible = false;
		}
	}
}
global.Window = Window_hint_override;
