
global.KAGSoundBuffer_patch_fade_bgm_with_voice_override_original = global.KAGSoundBuffer;
class KAGSoundBuffer_patch_fade_bgm_with_voice_override_override extends global.KAGSoundBuffer_patch_fade_bgm_with_voice_override_original
{
	var fadeStatus; // 记录渐变的状态

	function KAGSoundBuffer_patch_fade_bgm_with_voice_override_override()
	{
		super.KAGSoundBuffer(...);
	}

	function KAGSoundBuffer()
	{
		this.KAGSoundBuffer_patch_fade_bgm_with_voice_override_override(...);
	}

	function fade(endVolume, time, delay = 0)
	{
		// fade オーバーライド
		this.inFading = true;
		this.fadeStatus = %[startTick:global.System.getTickCount(), startVolume:this.volume, endVolume:endVolume, time:time, delay:delay];
		this.sbclass.fade(endVolume, time, delay);
	}

	function fadeOutAndStop(time, delay = 0)
	{
		this.fadeStatus = %[startTick:global.System.getTickCount(), startVolume:this.volume, endVolume:0, time:time, delay:delay];
		super.fadeOutAndStop(time, delay);
	}

	function onFadeCompleted()
	{
		this.fadeStatus = void;
		super.onFadeCompleted(...);
	}
}
global.KAGSoundBuffer = global.KAGSoundBuffer_patch_fade_bgm_with_voice_override_override;

global.BGM_patch_fade_bgm_with_voice_override_original = global.BGM;
class BGM_patch_fade_bgm_with_voice_override_override extends global.BGM_patch_fade_bgm_with_voice_override_original
{
	function BGM_patch_fade_bgm_with_voice_override_override()
	{
		super.BGM(...);
	}

	function BGM()
	{
		this.BGM_patch_fade_bgm_with_voice_override_override(...);
	}

	function fade(elm)
	{
		// 指定音量までフェード
		var time = elm.time === void ? 5000 : +elm.time;
		var vol = +elm.volume * 1000;
		var delay = elm.delay === void ? 0 : +elm.delay;
//		stopFade();
		if(this._enabled)
		{
			this.currentBuffer.fade(vol, time, delay);
		}
		this.volume = vol;
	}

	property fadeStatus
	{
		getter { return  this.currentBuffer.fadeStatus; }
	}
}
global.BGM = global.BGM_patch_fade_bgm_with_voice_override_override;
