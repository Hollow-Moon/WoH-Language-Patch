
// A data structure for fast Unicode character metadata lookup, ported from ICU
// Based on https://github.com/foliojs/unicode-trie

// Shift size for getting the index-1 table offset.
global.SHIFT_1 = 6 + 5;

// Shift size for getting the index-2 table offset.
global.SHIFT_2 = 5;

// Difference between the two shift sizes,
// for getting an index-1 offset from an index-2 offset. 6=11-5
global.SHIFT_1_2 = global.SHIFT_1 - global.SHIFT_2;

// Number of index-1 entries for the BMP. 32=0x20
// This part of the index-1 table is omitted from the serialized form.
global.OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> global.SHIFT_1;

// Number of entries in an index-2 block. 64=0x40
global.INDEX_2_BLOCK_LENGTH = 1 << global.SHIFT_1_2;

// Mask for getting the lower bits for the in-index-2-block offset. */
global.INDEX_2_MASK = global.INDEX_2_BLOCK_LENGTH - 1;

// Shift size for shifting left the index array values.
// Increases possible data size with 16-bit index values at the cost
// of compactability.
// This requires data blocks to be aligned by DATA_GRANULARITY.
global.INDEX_SHIFT = 2;

// Number of entries in a data block. 32=0x20
global.DATA_BLOCK_LENGTH = 1 << global.SHIFT_2;

// Mask for getting the lower bits for the in-data-block offset.
global.DATA_MASK = global.DATA_BLOCK_LENGTH - 1;

// The part of the index-2 table for U+D800..U+DBFF stores values for
// lead surrogate code _units_ not code _points_.
// Values for lead surrogate code _points_ are indexed with this portion of the table.
// Length=32=0x20=0x400>>SHIFT_2. (There are 1024=0x400 lead surrogates.)
global.LSCP_INDEX_2_OFFSET = 0x10000 >> global.SHIFT_2;
global.LSCP_INDEX_2_LENGTH = 0x400 >> global.SHIFT_2;

// Count the lengths of both BMP pieces. 2080=0x820
global.INDEX_2_BMP_LENGTH = global.LSCP_INDEX_2_OFFSET + global.LSCP_INDEX_2_LENGTH;

// The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.
// Length 32=0x20 for lead bytes C0..DF, regardless of SHIFT_2.
global.UTF8_2B_INDEX_2_OFFSET = global.INDEX_2_BMP_LENGTH;
global.UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;  // U+0800 is the first code point after 2-byte UTF-8

// The index-1 table, only used for supplementary code points, at offset 2112=0x840.
// Variable length, for code points up to highStart, where the last single-value range starts.
// Maximum length 512=0x200=0x100000>>SHIFT_1.
// (For 0x100000 supplementary code points U+10000..U+10ffff.)
//
// The part of the index-2 table for supplementary code points starts
// after this index-1 table.
//
// Both the index-1 table and the following part of the index-2 table
// are omitted completely if there is only BMP data.
global.INDEX_1_OFFSET = global.UTF8_2B_INDEX_2_OFFSET + global.UTF8_2B_INDEX_2_LENGTH;

// The alignment size of a data block. Also the granularity for compaction.
global.DATA_GRANULARITY = 1 << global.INDEX_SHIFT;

class UnicodeTrie
{
	function UnicodeTrie(data)
	{
		this.highStart = data.highStart;
		this.errorValue = data.errorValue;
		this.data = data.data;
	}

	function get_data(item)
	{
		var itm = item * 4;
		return (this.data[itm + 3] << 24) | (this.data[itm + 2] << 16) | (this.data[itm + 1] << 8) | (this.data[itm + 0] << 0);
	}

	function get_data_len()
	{
		return this.data.length * 4;
	}

	function get(codePoint)
	{
		var index;
		if ((codePoint < 0) || (codePoint > 0x10ffff))
		{
			return this.errorValue;
		}

		if ((codePoint < 0xd800) || ((codePoint > 0xdbff) && (codePoint <= 0xffff)))
		{
			// Ordinary BMP code point, excluding leading surrogates.
			// BMP uses a single level lookup.  BMP index starts at offset 0 in the index.
			// data is stored in the index array itself.
			index = (this.get_data(codePoint >> global.SHIFT_2) << global.INDEX_SHIFT) + (codePoint & global.DATA_MASK);
			return this.get_data(index);
		}

		if (codePoint <= 0xffff)
		{
			// Lead Surrogate Code Point.  A Separate index section is stored for
			// lead surrogate code units and code points.
			//   The main index has the code unit data.
			//   For this function, we need the code point data.
			index = (this.get_data(global.LSCP_INDEX_2_OFFSET + ((codePoint - 0xd800) >> global.SHIFT_2)) << global.INDEX_SHIFT) + (codePoint & global.DATA_MASK);
			return this.get_data(index);
		}

		if (codePoint < this.highStart)
		{
			// Supplemental code point, use two-level lookup.
			index = this.get_data((global.INDEX_1_OFFSET - global.OMITTED_BMP_INDEX_1_LENGTH) + (codePoint >> global.SHIFT_1));
			index = this.get_data(index + ((codePoint >> global.SHIFT_2) & global.INDEX_2_MASK));
			index = (index << global.INDEX_SHIFT) + (codePoint & global.DATA_MASK);
			return this.get_data(index);
		}

		return this.get_data(this.get_data_length() - global.DATA_GRANULARITY);
	}
}
