global.VideoOverlay_patch_hd_layer_original = global.VideoOverlay;
class VideoOverlay_patch_hd_layer_override extends global.VideoOverlay_patch_hd_layer_original
{
	function VideoOverlay_patch_hd_layer_override()
	{
		super.VideoOverlay(...);
	}

	function VideoOverlay()
	{
		this.VideoOverlay_patch_hd_layer_override(...);
	}

	property width
	{
		getter
		{
@if(1)
			if (typeof(this.mp) === "Object")
			{
				return super.width;
			}
@endif
@if(SCALE_USING_FLOATING_POINT)
			return super.width / global.get_wideScaleFactor();
@endif
@if(!SCALE_USING_FLOATING_POINT)
			return super.width \ global.get_wideScaleFactor();
@endif
		}
	}

	property height
	{
		getter
		{
@if(1)
			if (typeof(this.mp) === "Object")
			{
				return super.height;
			}
@endif
@if(SCALE_USING_FLOATING_POINT)
			return super.height / global.scaleFactor;
@endif
@if(!SCALE_USING_FLOATING_POINT)
			return super.height \ global.scaleFactor;
@endif
		}
	}

	property originalWidth
	{
		getter
		{
@if(SCALE_USING_FLOATING_POINT)
			return super.originalWidth / global.get_wideScaleFactor();
@endif
@if(!SCALE_USING_FLOATING_POINT)
			return super.originalWidth \ global.get_wideScaleFactor();
@endif
		}
	}

	property originalHeight
	{
		getter
		{
@if(SCALE_USING_FLOATING_POINT)
			return super.originalHeight / global.scaleFactor;
@endif
@if(!SCALE_USING_FLOATING_POINT)
			return super.originalHeight \ global.scaleFactor;
@endif
		}
	}

	function setBounds(left, top, width, height)
	{
@if(1)
		if (typeof(this.mp) === "Object")
		{
			return super.setBounds(left, top, width, height);
		}
@endif
		return super.setBounds(left*global.get_wideScaleFactor(), top*global.scaleFactor, width*global.get_wideScaleFactor(), height*global.scaleFactor);
	}
}
global.VideoOverlay = global.VideoOverlay_patch_hd_layer_override;
