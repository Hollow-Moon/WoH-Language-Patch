global.Conductor_patch_conductor_original = Conductor;

class Conductor_patch_conductor_override extends Conductor_patch_conductor_original
{
	function Conductor_patch_conductor_override()
	{
		super.Conductor(...);
	}

	// 覆盖Layer
	function Conductor()
	{
		Conductor_patch_conductor_override(...);
	}

	var dash_character = "―";
	var block_character = "■";

	// Blech. TJS2 "String" class is /supposed/ to have a .repeat() method.
	function dashrepeat(count, character)
	{
		var dashes = "";
		for (var i=0;i<count;i++) {
			dashes += character;
		}
		return dashes;
	}

	function replaceLine(text, reg, character=dash_character)
	{
		var results = reg.exec(text);
		while(results.count == 2) {
			var count;
			if (results[1] == "") {
				count = 1;
			} else {
				count = results[1];
			}
			text = text.replace(reg, dashrepeat(count, character));
			results = reg.exec(text);
		}
		return text;
	}

	function cleanLine(line=curLineStr)
	{
		if (isInQuiz()) {
			return quizdata.question;
		}
		if (line.length > 0 && line[0] == "@") {
			return "";
		}
		line = replaceLine(line, /\[line len=([0-9]+)]/); // Replace line-tags with dashes
		line = replaceLine(line, /\[line([0-9]*)]/);      // Replace slightly-different-line-tags with dashes
		line = replaceLine(line, /\[block len=([0-9]+)]/, block_character);
		line = line.replace(/\["[a-zA-Z0-9_-]*"]/g, "");  // Remove arrays with string quotes indexes (not sure if possible but just in case)
		line = line.replace(/\['[a-zA-Z0-9_-]*']/g, "");  // Remove arrays with string apostrophes indexes (not sure if possible but just in case)
		line = line.replace(/\[[0-9]*]/g, "");            // Remove arrays with number indexes (required or it will break when there is nested []s)
		line = line.replace(/\[\+?\w+\.\w+]/g, "");       // Remove arrays with variable index (i.e. [+mp.pos])
		line = line.replace(/\[[^]]*]/g, "");             // Remove tags
		return line;
	}

	function isInQuiz()
	{
		return curStorage == 'QuizSystem.ks' && owner.currentLabel == '*quiz_question';
	}

	var conductorPrevStorage;
	var conductorPrevLine;
	var conductorPrevLineStr;
	var lastQuizdataQuestion;
	var hasNewLineSinceLastCall = false;
	function isNewLine()
	{
		if (hasNewLineSinceLastCall)
		{
			hasNewLineSinceLastCall = false;
			return true;
		}

		return false;
	}

	function getNextTag()
	{
		var ret = super.getNextTag(...);
		if (typeof(ret) === "Object")
		{
			ret.__patch_conductor_storage = this.curStorage;
			ret.__patch_conductor_line = this.curLine;
			ret.__patch_conductor_line_str = this.curLineStr;
		}
		return ret;
	}

	function onTag(elm)
	{
		if (elm.tagname === "ch" && elm.__patch_conductor_storage !== void && elm.__patch_conductor_line !== void)
		{
			if (elm.__patch_conductor_storage != conductorPrevStorage || elm.__patch_conductor_line != conductorPrevLine || (isInQuiz() && lastQuizdataQuestion != quizdata.question))
			{
				{
					hasNewLineSinceLastCall = true;
					conductorPrevStorage = elm.__patch_conductor_storage;
					conductorPrevLine = elm.__patch_conductor_line;
					conductorPrevLineStr = elm.__patch_conductor_line_str;
					if (isInQuiz() && lastQuizdataQuestion != quizdata.question) {
						lastQuizdataQuestion = quizdata.question;
					}
				}
			}
		}
		return super.onTag(...);
	}

	function onScenarioLoad()
	{
		conductorPrevStorage = void;
		conductorPrevLine = void;
		conductorPrevLineStr = void;
		lastQuizdataQuestion = void;
		return super.onScenarioLoad(...);
	}
}

global.Conductor = Conductor_patch_conductor_override;
