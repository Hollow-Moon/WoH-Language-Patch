
global.BaseConductor_patch_conductor_original = BaseConductor;
class BaseConductor_patch_conductor_override extends BaseConductor_patch_conductor_original
{
	function BaseConductor_patch_conductor_override()
	{
		super.BaseConductor(...);
	}
	function BaseConductor()
	{
		BaseConductor_patch_conductor_override(...);
	}

	var lines = [];
	function onScenarioLoad(name)
	{
		// Use Array.load for loading scenario
		this.lines.clear();
		this.lines.load(name);
		return this.lines.join("\n");
	}
}
global.BaseConductor = BaseConductor_patch_conductor_override;

global.patch_conductor_regex_1 = /\[line(?: len=)?([0-9]*?)\]/g;
global.patch_conductor_regex_2 = /\[block(?: len=)?([0-9]*?)\]/g;
global.patch_conductor_regex_3 = /(?:\[ruby char="(.*?)" text="(?:.*?)"]|\[ruby char=(.*?) text="(?:.*?)"]|\[ruby char="(.*?)" text=(?:.*?)]|\[ruby char=(.*?) text=(?:.*?)]|\[ruby text="(?:.*?)" char="(.*?)"]|\[ruby text="(?:.*?)" char=(.*?)]|\[ruby text=(?:.*?) char="(.*?)"]|\[ruby text=(?:.*?) char=(.*?)])/g;
global.patch_conductor_regex_4 = /(?:\["[a-zA-Z0-9_-]*"]|\['[a-zA-Z0-9_-]*']|\[[0-9]*]|\[\+?\w+\.\w+]|\[[^]]*])/g;

global.patch_conductor_regex_5 = /(?:(?<=^)|(?<=\n))(?:@|;|\*).*?(?=$|\n)/g;
global.patch_conductor_regex_6 = /(?s)(?:(?:^|\n)\[iscript\]|(?:^|\n)\[iscript\]\\(?:\n)|(?:^|\n)@iscript(?:\n)).*?(?:(?:^|\n)\[endscript\]|(?:^|\n)\[endscript\]\\(?:\n)|(?:^|\n)@endscript(?:\n))/g;

global.Conductor_patch_conductor_original = Conductor;

class Conductor_patch_conductor_override extends Conductor_patch_conductor_original
{
	function Conductor_patch_conductor_override()
	{
		super.Conductor(...);
	}

	// 覆盖Layer
	function Conductor()
	{
		Conductor_patch_conductor_override(...);
	}

	var dash_character = "―";
	var block_character = "■";
	var lines = [];
	var cleaned_lines = [];

	function replaceLine(text, reg, character=dash_character)
	{
		var results = reg.match(text);
		while(results.count == 2) {
			var count;
			if (results[1] == "") {
				count = 1;
			} else {
				count = results[1];
			}
			text = text.replace(reg, character.repeat(count));
			results = reg.match(text);
		}
		return text;
	}

	function replaceRubyChar(matcharr)
	{
		matcharr.erase(0);
		var x = matcharr.join("");
		if (+x != x)
		{
			return x;
		}
		return "";
	}

	function cleanLine(line=curLineStr)
	{
		if (isInQuiz())
		{
			return quizdata.question;
		}
		if (line.length === 0)
		{
			return "";
		}
		if (line[0] === "@" || line[0] === ";")
		{
			return "";
		}

		line = this.replaceLine(line, global.patch_conductor_regex_1);
		// Replace line-tags with dashes
		// Replace slightly-different-line-tags with dashes
		line = this.replaceLine(line, global.patch_conductor_regex_2, block_character);
		line = line.replace(global.patch_conductor_regex_3, this.replaceRubyChar);
		// Replace ruby tag containing text in char argument
		line = line.replace(global.patch_conductor_regex_4, "");
		// Remove arrays with string quotes indexes (not sure if possible but just in case)
		// Remove arrays with string apostrophes indexes (not sure if possible but just in case)
		// Remove arrays with number indexes (required or it will break when there is nested []s)
		// Remove arrays with variable index (i.e. [+mp.pos])
		// Remove tags
		return line;
	}

	function iscriptReplace(matcharr)
	{
		var newline_arrtmp = [];
		var matchstr = matcharr[0];
		var old_length = matchstr.length;
		matchstr = matchstr.replace(/\n/g, "");
		var diff_length = old_length - matchstr.length;
		newline_arrtmp.count = diff_length + 1;
		return newline_arrtmp.join("\n");
	}

	function cleanMultiLine(line)
	{
		line = line.replace(global.patch_conductor_regex_6, this.iscriptReplace);
		// Replace iscript/endscript tags
		line = line.replace(global.patch_conductor_regex_5, "");
		// Replace comments, labels, and command lines
		line = this.replaceLine(line, global.patch_conductor_regex_1);
		// Replace line-tags with dashes
		// Replace slightly-different-line-tags with dashes
		line = this.replaceLine(line, global.patch_conductor_regex_2, block_character);
		line = line.replace(global.patch_conductor_regex_3, this.replaceRubyChar);
		// Replace ruby tag containing text in char argument
		line = line.replace(global.patch_conductor_regex_4, "");
		// Remove arrays with string quotes indexes (not sure if possible but just in case)
		// Remove arrays with string apostrophes indexes (not sure if possible but just in case)
		// Remove arrays with number indexes (required or it will break when there is nested []s)
		// Remove arrays with variable index (i.e. [+mp.pos])
		// Remove tags
		return line;
	}

	function isInQuiz()
	{
		return curStorage == 'QuizSystem.ks' && owner.currentLabel == '*quiz_question';
	}

	var conductorPrevStorage;
	var conductorPrevLine;
	var lastQuizdataQuestion;
	var hasNewLineSinceLastCall = false;
	function isNewLine()
	{
		if (hasNewLineSinceLastCall)
		{
			hasNewLineSinceLastCall = false;
			return true;
		}

		return false;
	}

	var patch_conductor_temp_array = [];
	var patch_conductor_temp_array2 = [];
	var patch_conductor_messagelayer_tags = [
		"font",
		"deffont",
		"resetfont",
		"italic",
		"i",
		"/i",
		"rf",
		"l",
		"lr",
		"r",
@if(1)
		"p",
		"pg",
		"cm",
@endif
@if(1)
		"graph",
		"ruby",
@endif
@if(0)
		"hch",
		"style",
		"defstyle",
		"resetstyle",
		"link",
		"endlink",
		"button",
		"edit",
		"checkbox",
		"commit",
		"timeout",
		"ctimeout",
		"wheel",
		"cwheel",
		"click",
		"cclick",
		"current",
		"ct",
		"er",
		"indent",
		"endindent",
		"locate",
		"glyph",
		"s",
		"laycount",
		"mappfont",
@endif
	];

	var patch_conductor_messagelayer_proconly_tags = [
		"wait",
	];

	function getNextTag()
	{
		var ret = super.getNextTag(...);
		var patch_conductor_messagelayer_tags = this.patch_conductor_messagelayer_tags;
		var patch_conductor_messagelayer_proconly_tags = this.patch_conductor_messagelayer_proconly_tags;
		if (this.processSpecialTags)
		{
			var conductor_split_tags = [];
			while (ret !== void)
			{
				var temp_text = this.patch_conductor_temp_array2;
				temp_text.clear();
				var save_curStorage = this.curStorage;
				var save_curLine = this.curLine;
				var messagelayer_tag_prepend = [];
				var messagelayer_tag_append = [];
				while (ret !== void)
				{
					patch_conductor_temp_array.assign(ret);
					if (patch_conductor_messagelayer_tags.find(ret.tagname) !== -1 || (messagelayer_tag_prepend.count > 0 && patch_conductor_messagelayer_proconly_tags.find(ret.tagname) !== -1))
					{
						{
							var messagelayer_tag_container = %[];
							(Dictionary.assignStruct incontextof messagelayer_tag_container)(ret);
							ret = super.getNextTag(...);
							messagelayer_tag_prepend.add(messagelayer_tag_container);
							continue;
						}
					}
					break;
				}
				while (ret !== void)
				{
					patch_conductor_temp_array.assign(ret);
					if (patch_conductor_messagelayer_tags.find(ret.tagname) !== -1 || patch_conductor_messagelayer_proconly_tags.find(ret.tagname) !== -1)
					{
						break;
					}
					{
						if (ret.tagname === "ch")
						{
							if (patch_conductor_temp_array.count === 4)
							{
								temp_text.add(ret.text);
								ret = super.getNextTag(...);
								continue;
							}
						}
						else if (ret.tagname === "r")
						{
							// tagname only
							if (patch_conductor_temp_array.count === 2)
							{
								temp_text.add("\n");
								ret = super.getNextTag(...);
								continue;
							}
						}
					}
					break;
				}
				// continue to search for appended MessageLayer related tags
				while (ret !== void)
				{
					patch_conductor_temp_array.assign(ret);
					if (patch_conductor_messagelayer_tags.find(ret.tagname) !== -1 || (messagelayer_tag_prepend.count > 0 && patch_conductor_messagelayer_proconly_tags.find(ret.tagname) !== -1))
					{
						{
							var messagelayer_tag_container = %[];
							(Dictionary.assignStruct incontextof messagelayer_tag_container)(ret);
							ret = super.getNextTag(...);
							messagelayer_tag_append.add(messagelayer_tag_container);
							continue;
						}
					}
					break;
				}
				if (temp_text.count > 0)
				{
					var ret2 = %[];
					ret2.__patch_conductor_storage = save_curStorage;
					ret2.__patch_conductor_line = save_curLine;
					ret2.tagname = "ch_patch_conductor_split";
					ret2.text = temp_text.join("");
@if(0)
					Debug.message("Submitting text " + ret2.text);
@endif
					ret2.append = messagelayer_tag_append;
@if(0)
					if (messagelayer_tag_append.count > 0)
					{
						var tag_ls = [];
						for (var i = 0; i < messagelayer_tag_append.count; i += 1)
						{
							tag_ls.add(messagelayer_tag_append[i].tagname);
						}
						Debug.message("and append tags " + tag_ls.join(","));
					}
@endif
					ret2.prepend = messagelayer_tag_prepend;
@if(0)
					if (messagelayer_tag_prepend.count > 0)
					{
						var tag_ls = [];
						for (var i = 0; i < messagelayer_tag_prepend.count; i += 1)
						{
							tag_ls.add(messagelayer_tag_prepend[i].tagname);
						}
						Debug.message("and prepend tags " + tag_ls.join(","));
					}
@endif
					conductor_split_tags.add(ret2);
				}
				else if (messagelayer_tag_append.count > 0)
				{
					var ret2 = %[];
					ret2.__patch_conductor_storage = save_curStorage;
					ret2.__patch_conductor_line = save_curLine;
					ret2.tagname = "ch_patch_conductor_messagelayer_tag";
					{
						ret2.append = messagelayer_tag_append;
@if(0)
						var tag_ls = [];
						for (var i = 0; i < messagelayer_tag_append.count; i += 1)
						{
							tag_ls.add(messagelayer_tag_append[i].tagname);
						}
						Debug.message("Submitting tags " + tag_ls.join(","));
@endif
					}
					{
						ret2.prepend = messagelayer_tag_prepend;
@if(0)
						var tag_ls = [];
						for (var i = 0; i < messagelayer_tag_prepend.count; i += 1)
						{
							tag_ls.add(messagelayer_tag_prepend[i].tagname);
						}
						Debug.message("and prepend tags " + tag_ls.join(","));
@endif
					}
					conductor_split_tags.add(ret2);
				}
				if (temp_text.count > 0 || messagelayer_tag_append.count > 0 || messagelayer_tag_prepend.count > 0)
				{
					continue;
				}
				break;
			}
			if (conductor_split_tags.count > 0)
			{
@if(0)
				Debug.message("End of submission");
@endif
				for (var i = conductor_split_tags.count - 1; i >= 0; i -= 1)
				{
					this.pendings.insert(0, conductor_split_tags[i]);
				}
			}
		}
		if (typeof(ret) === "Object")
		{
			ret.__patch_conductor_storage = this.curStorage;
			ret.__patch_conductor_line = this.curLine;
		}
		return ret;
	}

	function queueTag(i, elm)
	{
		var ret2 = %[];
		(Dictionary.assignStruct incontextof ret2)(elm);
		ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
		ret2.__patch_conductor_line = elm.__patch_conductor_line;
		this.pendings.insert(i, ret2);
	}

	function requeueText(text, elm)
	{
		var ret2 = %[];
		ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
		ret2.__patch_conductor_line = elm.__patch_conductor_line;
		ret2.tagname = "ch_patch_conductor_split";
		ret2.text = text;
		ret2.append = elm.append;
		ret2.prepend = elm.prepend;
		this.pendings.insert(0, ret2);
	}

	function queueText(text, elm)
	{
		var text_sz = 0;
		if (typeof(text) === "Object")
		{
			text_sz = text.count;
		}
		else
		{
			text_sz = text.length;
		}
		for (var i = text_sz - 1; i >= 0; i -= 1)
		{
			var ret2 = %[];
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			if (text[i] == "\n")
			{
				ret2.tagname = "r";
			}
			else
			{
				ret2.tagname = "ch";
				ret2.text = text[i];
			}
			this.pendings.insert(0, ret2);
		}
	}

	function queueReline(elm, reline_ml=true, reline_hl=true)
	{
		if (reline_ml && reline_hl)
		{
			var ret2 = %[];
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			ret2.tagname = "r";
			this.pendings.insert(0, ret2);
		}
		else if (reline_hl && !reline_ml)
		{
			var ret2 = %[];
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			ret2.tagname = "hr";
			this.pendings.insert(0, ret2);
		}
		else if (reline_ml && !reline_hl)
		{
			var old_historyWriteEnabled = this.owner.historyWriteEnabled;
			{
				if (old_historyWriteEnabled)
				{
					// re-enable history output
					var ret2 = %[];
					ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
					ret2.__patch_conductor_line = elm.__patch_conductor_line;
					ret2.tagname = "history";
					ret2.output = "1";
					this.pendings.insert(0, ret2);
				}
				{
					// reline (on message layer only)
					var ret2 = %[];
					ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
					ret2.__patch_conductor_line = elm.__patch_conductor_line;
					ret2.tagname = "r";
					this.pendings.insert(0, ret2);
				}
				if (old_historyWriteEnabled)
				{
					// disable history output
					var ret2 = %[];
					ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
					ret2.__patch_conductor_line = elm.__patch_conductor_line;
					ret2.tagname = "history";
					ret2.output = "0";
					this.pendings.insert(0, ret2);
				}
			}
		}
	}

	function queuePrependMessageLayerRelatedTags(elm)
	{
		var prepend = [];
		prepend.assignStruct(elm.prepend);
		for (var i = prepend.count - 1; i >= 0; i -= 1)
		{
			var ret2 = %[];
			(Dictionary.assignStruct incontextof ret2)(prepend[i]);
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			this.pendings.insert(0, ret2);
		}
	}

	function queueAppendMessageLayerRelatedTags(elm)
	{
		var append = [];
		append.assignStruct(elm.append);
		for (var i = append.count - 1; i >= 0; i -= 1)
		{
			var ret2 = %[];
			(Dictionary.assignStruct incontextof ret2)(append[i]);
			ret2.__patch_conductor_storage = elm.__patch_conductor_storage;
			ret2.__patch_conductor_line = elm.__patch_conductor_line;
			this.pendings.insert(0, ret2);
		}
	}

	function handleConductorSplit(elm)
	{
		var text = elm.text;
		elm.requeue = true;
		if (typeof(this.owner.onConductorPreprocessCh) === "Object" && text !== "")
		{
			text = this.owner.onConductorPreprocessCh(text, this, elm);
		}
		if (elm.requeue)
		{
			if (elm.append !== void)
			{
				this.queueAppendMessageLayerRelatedTags(elm);
			}
			this.queueText(text, elm);
			if (elm.prepend !== void)
			{
				this.queuePrependMessageLayerRelatedTags(elm);
			}
		}
		if (typeof(this.owner.onConductorPreprocessChCompletion) === "Object")
		{
			this.owner.onConductorPreprocessChCompletion(this, elm);
		}
		return 0;
	}

	function handleConductorMessageLayerTag(elm)
	{
		{
			this.queueAppendMessageLayerRelatedTags(elm);
			this.queuePrependMessageLayerRelatedTags(elm);
		}
		return 0;
	}

	function onTag(elm)
	{
		if (elm.tagname === "ch_patch_conductor_split")
		{
			return this.handleConductorSplit(elm);
		}
		if (elm.tagname === "ch_patch_conductor_messagelayer_tag")
		{
			return this.handleConductorMessageLayerTag(elm);
		}
		if (elm.tagname === "ch" && elm.__patch_conductor_storage !== void && elm.__patch_conductor_line !== void)
		{
			if (elm.__patch_conductor_storage != conductorPrevStorage || elm.__patch_conductor_line != conductorPrevLine || (isInQuiz() && lastQuizdataQuestion != quizdata.question))
			{
				{
					hasNewLineSinceLastCall = true;
					conductorPrevStorage = elm.__patch_conductor_storage;
					conductorPrevLine = elm.__patch_conductor_line;
					if (isInQuiz() && lastQuizdataQuestion != quizdata.question) {
						lastQuizdataQuestion = quizdata.question;
					}
				}
			}
		}
		return super.onTag(...);
	}

	function onScenarioLoad(name)
	{
		conductorPrevStorage = void;
		conductorPrevLine = void;
		lastQuizdataQuestion = void;
		super.onScenarioLoad(...);
		// Use Array.load for loading scenario
		this.lines.clear();
		this.lines.load(name);
		var joined_lines = this.lines.join("\n");
		var joined_cleaned_lines = this.cleanMultiLine(joined_lines);
		if (typeof(this.owner.replace_characters_regex) === "Object")
		{
			joined_cleaned_lines = this.owner.replace_characters_regex(joined_cleaned_lines);
		}
		this.cleaned_lines = joined_cleaned_lines.split("\n");
		if (typeof(this.owner.onConductorScenarioPreLoad) === "Object")
		{
			this.owner.onConductorScenarioPreLoad(joined_cleaned_lines, this);
		}
		return joined_lines;
	}
}

global.Conductor = Conductor_patch_conductor_override;
