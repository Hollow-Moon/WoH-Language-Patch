global.msgctxt = "msgctxt";
global.msgid = "msgid";
global.msgidPlural = "msgid_plural";
global.msgstr = "msgstr";

global.msgstrPlural = "msgstr[";
global.pluralForms = "Plural-Forms";
global.pluralExpressions = void;

global.defaultDomain = "default";
global.defaultContext = "";

global.domains = %[];

global.contextDelimiter = "\x04"; // EOT

global.__ = function(text, domain=global.defaultDomain)
{
	return global._x(text,,domain);
} incontextof global;

global._x = function(text, context=global.defaultContext, domain=global.defaultDomain)
{
	var dict = global.domains[domain];
	if (dict === void) {
		return text;
	}
	var result = dict[context + global.contextDelimiter + text];
	if (result === void) {
		return text;
	}
	return result;
} incontextof global;

global._n = function(textSingle, textPlural, pluralNumber, domain=global.defaultDomain)
{
	if (global.pluralExpressions === void) {
		return textSingle;
	}

	global.n = pluralNumber; // Input for eval expression
	global.plural = void; // Output for eval expression
	global.Scripts.eval(global.pluralExpressions[1]);

	var dict = global.domains[domain];
	if (dict === void) {
		return global.plural == 0? textSingle : textPlural;
	}
	var result = dict[global.defaultContext + global.contextDelimiter + textSingle + global.contextDelimiter + textPlural];
	if (result === void) {
		return global.plural == 0? textSingle : textPlural;
	}
	return result[global.plural];
} incontextof global;

global.removeAllMO = function()
{
	(global.Dictionary.clear incontextof global.domains)();
	global.pluralExpressions = void;
};

global.loadMoFile = function(moFile, domain=global.defaultDomain)
{
	var poFile = global.Storages.chopStorageExt(moFile) + ".po";

	if (!global.Storages.isExistentStorage(poFile)) {
		return;
	}

	var lines = [].load(poFile);

	var dict = %[];

	var context = global.defaultContext;
	var currentId;
	var currentIdPlural;

	for (var i = 0, internal_forloop_count = lines.count; i < internal_forloop_count; i += 1) {
		if (global.isEntry(global.msgctxt, lines, i)) {
			var tmp = global.readEntry(global.msgctxt, lines, i);
			context = tmp[0];
			i += tmp[1];
		}
		else if (global.isEntry(global.msgidPlural, lines, i)) {
			var tmp = global.readEntry(global.msgidPlural, lines, i);
			currentIdPlural = tmp[0];
			i += tmp[1];
		}
		else if (global.isEntry(global.msgid, lines, i)) {
			var tmp = global.readEntry(global.msgid, lines, i);
			currentId = tmp[0];
			i += tmp[1];
		}
		else if (global.isEntry(global.msgstrPlural, lines, i)) {
			var text = [];
			var j=0;
			var msgstrPluralIndex = global.msgstrPlural + ("" + j) + "]";
			while (global.isEntry(msgstrPluralIndex, lines, i)) {
				var tmp = global.readEntry(msgstrPluralIndex, lines, i);
				text.add(tmp[0]);
				i += tmp[1] + 1;
				j += 1;
				msgstrPluralIndex = global.msgstrPlural + ("" + j) + "]";
			}
			i -= 1;

			dict[context + global.contextDelimiter + currentId + global.contextDelimiter + currentIdPlural] = text;
			context = global.defaultContext;
			currentId = void;
			currentIdPlural = void;
		}
		else if (global.isEntry(global.msgstr, lines, i)) {
			var tmp = global.readEntry(global.msgstr, lines, i);
			var text = tmp[0];
			i += tmp[1];

			if (!text.length)
			{
				text = currentId;
			}

			dict[context + global.contextDelimiter + currentId] = text;
			context = global.defaultContext;
			currentId = void;
		}
	}

	global.domains[domain] = dict;
	global.readPluralForms(dict[context + global.contextDelimiter + ""]);
	dict[context + global.contextDelimiter + ""] = void;
};


global.isEntry = function(header, lines, i)
{
	return lines[i].substr(0, header.length) == header;
};

global.readEntry = function(header, lines, i)
{
	var text = lines[i].substr(header.length + 2, lines[i].length-(header.length + 2)-1);
	var index = 1;
	var nextLine = lines[i+index];
	while (nextLine != "" && nextLine[0] === '"') {
		text += nextLine.substr(1, nextLine.length-2);
		index += 1;
		nextLine = lines[i+index];
	}
	// TODO: handle \x00 and \000 sequences
	text = text.replace(/\\n/g, "\n").replace(/\\t/g, "\t").replace(/\\b/g, "\b").replace(/\\r/g, "\r").replace(/\\f/g, "\f").replace(/\\v/g, "\v").replace(/\\a/g, "\a").replace(/\\\\/g, "\\").replace(/\\"/g, "\"");
	return [text, index-1];
};

global.readPluralForms = function(text)
{
	var lines = text.split("\n");
	for (var i = 0, internal_forloop_count = lines.count; i < internal_forloop_count; i += 1) {
		if (lines[i].substr(0, global.pluralForms.length) == global.pluralForms) {
			global.pluralExpressions = lines[i].substr(global.pluralForms.length + 2, lines[i].length - (global.pluralForms.length + 2)).split(";");
			break;
		}
	}
};
