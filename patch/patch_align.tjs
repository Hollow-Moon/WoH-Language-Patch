
global.HistoryLayer_patch_align_original = global.HistoryLayer;
class HistoryLayer_patch_align_override extends global.HistoryLayer_patch_align_original
{
	function HistoryLayer_patch_align_override()
	{
		super.HistoryLayer(...);
	}

	function HistoryLayer()
	{
		this.HistoryLayer_patch_align_override(...);
	}

	function locateAlign(anchor, text, offsetText="", offsetTextDirection=0) {
		var right = this.relinePos;
		var x = void;
		var anchorValue = 0;
		if (anchor == "right") {
			anchorValue = 1;
		} else if (anchor == "center") {
			anchorValue = 0.5;
		} else if (("" + (+anchor)) == anchor) {
			anchorValue = +anchor;
		}
		x = (right - this.font.getTextWidth(text)) * anchorValue + this.font.getTextWidth(offsetText)*offsetTextDirection;
		this.lineStart[this.dataPage][this.dataPos] = x;
		this.limitPos = this.limitPos_org - x;
		this.relinePos = this.relinePos_org - x;
	}
}
global.HistoryLayer = global.HistoryLayer_patch_align_override;

global.MessageLayer_patch_align_original = global.MessageLayer;
class MessageLayer_patch_align_override extends global.MessageLayer_patch_align_original
{
	function MessageLayer_patch_align_override()
	{
		super.MessageLayer(...);
	}

	function MessageLayer()
	{
		this.MessageLayer_patch_align_override(...);
	}

	function locateAlign(anchor, text, offsetText="", offsetTextDirection=0)
	{
		var right = this.relinexpos - this.marginL;
		var x = void;
		var anchorValue = 0;
		if (anchor == "right") {
			anchorValue = 1;
		} else if (anchor == "center") {
			anchorValue = 0.5;
		} else if (("" + (+anchor)) == anchor) {
			anchorValue = +anchor;
		}
@if(!MESSAGELAYER_USECHARLAYER)
		x = (right - this.lineLayer.font.getTextWidth(text)) * anchorValue + this.lineLayer.font.getTextWidth(offsetText)*offsetTextDirection;
@endif
@if(MESSAGELAYER_USECHARLAYER)
		x = (right - this.getChWidth(text)[1]) * anchorValue + this.getChWidth(offsetText)[1]*offsetTextDirection;
@endif
		this.locate(x, void);
	}

	function locateAlignImage(anchor, imageWidth, y)
	{
		var right = this.window.scWidth - this.marginL;
		var anchorValue = global.getAnchorValue(anchor);
		var x = (right - imageWidth) * anchorValue;
		this.locate(x, y);
	}
}
global.MessageLayer = global.MessageLayer_patch_align_override;

{
	{
		global.add_kag_window_tag_handler("locatealign", function(elm)
		{
			this.historyLayer.locateAlign(elm.anchor, elm.textForLength, elm.offsetText, elm.offsetTextDirection);
			if(this.currentWithBack) this.current.comp.locateAlign(elm.anchor, elm.textForLength, elm.offsetText, elm.offsetTextDirection);
			this.current.locateAlign(elm.anchor, elm.textForLength, elm.offsetText, elm.offsetTextDirection);
			return 0;
		});
		global.add_kag_window_tag_handler("align", function(elm)
		{
			if (elm.text !== void) {
				conductor.processLine(elm.text);
			}

			if (elm.anchor !== void) {
				var textForLength = this.conductor.cleanLine(elm.textforlength !== void? elm.textforlength : elm.text);
				var offsetText = elm.offsettext !== void? this.conductor.cleanLine(elm.offsettext) : "";
				var offsetTextDirection = elm.offsettextdirection !== void? elm.offsettextdirection : 0;

				var locatealignTag = %[tagname:"locatealign", anchor:elm.anchor, textForLength:textForLength, offsetText:offsetText, offsetTextDirection:offsetTextDirection];
				this.conductor.queueTag(0, locatealignTag);
			}
			return 0;
		});
	}
}
