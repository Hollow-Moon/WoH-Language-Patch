
// Right to left text support.
// Vertical text is currently not supported.
// ActingMessageLayer is currently not supported.

global.Layer_patch_rtl_original = global.Layer;
class Layer_patch_rtl_override extends global.Layer_patch_rtl_original
{
	function Layer_patch_rtl_override()
	{
		super.Layer(...);
	}

	function Layer()
	{
		this.Layer_patch_rtl_override(...);
	}

	function operateRect(left, top, src, sleft, stop, swidth, sheight, mode, opacity)
	{
		if (this.name === "行描画用浮遊メッセージレイヤ" && global.get_rtl_enabled(typeof(global.kag) === "Object" ? global.kag : this.window))
		{
			left = this.parent.relinexpos - left;
			left -= src.imageWidth;
			return (global.Layer_patch_rtl_original.operateRect incontextof this)(left, top, src, sleft, stop, swidth, sheight, mode, opacity);
		}
		return (global.Layer_patch_rtl_original.operateRect incontextof this)(...);
	}

	function setPos(left, top, width, height)
	{
		if ((this instanceof "ClickGlyphLayer") && global.get_rtl_enabled(typeof(global.kag) === "Object" ? global.kag : this.window))
		{
			left = this.parent.relinexpos - (this.parent.lineLayerPos);
			left += this.imageWidth;
			return (global.Layer_patch_rtl_original.setPos incontextof this)(left, top, width, height);
		}
		return (global.Layer_patch_rtl_original.setPos incontextof this)(...);
	}

	function drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy)
	{
		if (!global.get_rtl_enabled(typeof(global.kag) === "Object" ? global.kag : this.window) || (this instanceof "ConfigMenuLayer"))
		{
			return (global.Layer_patch_rtl_original.drawText incontextof this)(...);
		}
		text += "";
		if (global.get_arabic_shaping_enabled(typeof(global.kag) === "Object" ? global.kag : this.window))
		{
			if (this.name !== "行描画用浮遊メッセージレイヤ")
			{
				text = global.shape_arabic(text);
			}
			if (global.get_half_height_offset_hack(typeof(global.kag) === "Object" ? global.kag : this.window))
			{
				top -= this.font.height \ 2;
			}
		}
		text = text.reverse();
		
		if (this.name === "行描画用浮遊メッセージレイヤ")
		{
			left = this.parent.relinexpos - left;
		}
		else
		{
			left = this.width - left;
		}
		left -= this.font.getTextWidth(text);
		return (global.Layer_patch_rtl_original.drawText incontextof this)(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy);
	}
}
global.Layer = global.Layer_patch_rtl_override;
