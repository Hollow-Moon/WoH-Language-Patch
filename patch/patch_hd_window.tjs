global.Window_patch_hd_layer_original = global.Window;
class Window_patch_hd_layer_override extends global.Window_patch_hd_layer_original
{
	var _left;
	var _top;
	var _width;
	var _height;
	var _innerWidth;
	var _innerHeight;

	var scrollXOffset = 0;
	var scrollYOffset = 0;
	var originalscrollXOffset = void;
	var originalscrollYOffset = void;
	var scrollYOffsetSpeed = 5;
	var scrollYOffsetMin = 0;
	var scrollYOffsetMax = 150;

	var absoluteMode = 0;

	property transformedScrollXOffset { getter { return this.scrollXOffset; } }

	// Under normal conditions result=-scrollYOffset, but this transformation considers different scale/wide factors.
	property transformedScrollYOffset { getter {
		var scale = this.scrollYOffset / 150; // 0: image unchanged, 150: image scrolled all the way to the bottom.
		var factor = this.wideScreen? global.wideFactor : global.cropFactor;
@if(SCALE_USING_FLOATING_POINT)
		var result = originalResHeight * (global.Math.abs(1 - factor)    ) * scale / global.wideFactor;
@endif
@if(!SCALE_USING_FLOATING_POINT)
		var result = global.originalResHeight * (global.Math.abs(1 - factor) | 0) * scale \ global.wideFactor;
@endif
		return result;
	} }

	property widthScale { getter { return this.isMainWindow? global.get_wideScaleFactor() : global.scaleFactor; } }
	property heightScale { getter { return global.scaleFactor * (this.isMainWindow? global.cropFactor : 1); } }
	property wideFactor { getter { return this.isMainWindow? global.wideFactor : 1; } }
	property isMainWindow { getter { return this === global.Window.mainWindow; } }
	property body { getter() { return this.fore; } }

	property hdScaleFactor
	{
		getter
		{
			if (!this.isMainWindow) {
				return global.Window.mainWindow.scflags[global.hdScaleFactorFlagName];
			}
			if (this.scflags[global.hdScaleFactorFlagName] === void) {
				for (var i=global.scaleFactors.count-1; i>=0; i--) {
					if (global.patchExists(global.hdPatchesNames[i]) &&
						global.System.desktopWidth >= global.originalResWidth * global.scaleFactors[i] && global.System.desktopHeight >= global.originalResHeight * global.scaleFactors[i]) {
						this.scflags[global.hdScaleFactorFlagName] = global.scaleFactors[i];
						break;
					}
				}
				if (this.scflags[global.hdScaleFactorFlagName] === void) {
					this.scflags[global.hdScaleFactorFlagName] = 1;
				}
			}
			return this.scflags[global.hdScaleFactorFlagName];
		}
		setter(v)
		{
			this.scflags[global.hdScaleFactorFlagName] = v;
		}
	}

	property isHd
	{
		getter
		{
			return this.hdScaleFactor > 1;
		}
	}

	property wideScreen
	{
		getter
		{
			if (!this.isMainWindow) {
				// return global.Window.mainWindow.scflags[global.wideScreenFlagName];
				return false;
			}
			if (this.scflags[global.wideScreenFlagName] === void) {
				this.scflags[global.wideScreenFlagName] = false;
			}
			return this.scflags[global.wideScreenFlagName];
		}
		setter(v)
		{
			this.scflags[global.wideScreenFlagName] = v;
		}
	}

	property wideRatio
	{
		getter
		{
			var retvalue;
			if (!this.wideScreen) {
				retvalue = global.cubicRatio;
			} else if (this.scflags[global.autoWideRatioFlagName]) {
				retvalue = global.get_systemRatio();
			} else {
				retvalue = this.scflags[global.wideRatioFlagName] != void? this.scflags[global.wideRatioFlagName] : global.get_systemRatio();
			}
@if(!SCALE_USING_FLOATING_POINT)
			retvalue |= 0;
@endif
			return retvalue;
		}
		setter(v)
		{
			if (!this.wideScreen) {
				this.scflags[global.autoWideRatioFlagName] = false;
				this.scflags[global.wideRatioFlagName] = global.cubicRatio;
			}
			this.scflags[global.autoWideRatioFlagName] = global.floatEquals(v, global.get_systemRatio());
			this.scflags[global.wideRatioFlagName] = v;
		}
	}

	property isAutoWide
	{
		getter
		{
			return this.scflags[global.autoWideRatioFlagName];
		}
	}

	property left
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.left;
			}
			return this.isMainWindow? super.left : this._left;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._left = this.unscaleLeft(v);
				super.left = v;
			}
			else
			{
				this._left = v;
				super.left = this.scaleLeft(v);
			}
		}
	}

	property top
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.top;
			}
			return this.isMainWindow? super.top : this._top;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._top = this.unscaleTop(v);
				super.top = v;
			}
			else
			{
				this._top = v;
				super.top = this.scaleTop(v);
			}
		}
	}

	property width
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.width;
			}
			return this._width;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._width = this.unscaleWidth(v);
				super.width = v;
			}
			else
			{
				this._width = v;
				super.width = this.scaleWidth(v);
			}
		}
	}

	property height
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.height;
			}
			return this._height;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._height = this.unscaleHeight(v);
				super.height = v;
			}
			else
			{
				this._height = v;
				super.height = this.scaleHeight(v);
			}
		}
	}

	property innerWidth
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.innerWidth;
			}
			if (typeof(this._resizeSnapshot) === "Object")
			{
				return this.unscaleWidth(this.innerWidthOriginal);
			}
			return this._innerWidth;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._innerWidth = this.unscaleWidth(v);
				super.innerWidth = v;
			}
			else
			{
				this._innerWidth = v;
				super.innerWidth = this.scaleWidth(v);
			}

		}
	}

	property innerHeight
	{
		getter
		{
			if (this.absoluteMode)
			{
				return super.innerHeight;
			}
			if (typeof(this._resizeSnapshot) === "Object")
			{
				return this.unscaleHeight(this.innerHeightOriginal);
			}
			return this._innerHeight;
		}
		setter(v)
		{
			if (this.absoluteMode)
			{
				this._innerHeight = this.unscaleHeight(v);
				super.innerHeight = v;
			}
			else
			{
				this._innerHeight = v;
				super.innerHeight = this.scaleHeight(v);
			}
		}
	}

	property widthOriginal
	{
		getter { return *((&(global.Window_patch_hd_layer_original).width) incontextof this); }
		setter(v) { *((&(global.Window_patch_hd_layer_original).width) incontextof this) = v; }
	}
	property heightOriginal
	{
		getter { return *((&(global.Window_patch_hd_layer_original).height) incontextof this); }
		setter(v) { *((&(global.Window_patch_hd_layer_original).height) incontextof this) = v; }
	}

	property innerWidthOriginal
	{
		getter { return *((&(global.Window_patch_hd_layer_original).innerWidth) incontextof this); }
		setter(v) { *((&(global.Window_patch_hd_layer_original).innerWidth) incontextof this) = v; }
	}

	property innerHeightOriginal
	{
		getter { return *((&(global.Window_patch_hd_layer_original).innerHeight) incontextof this); }
		setter(v) { *((&(global.Window_patch_hd_layer_original).innerHeight) incontextof this) = v; }
	}

	function Window_patch_hd_layer_override()
	{
		super.Window(...);
		this._left = super.left;
		this._top = super.top;
		this._width = super.width;
		this._height = super.height;
		this._innerWidth = super.innerWidth;
		this._innerHeight = super.innerHeight;
	}

	function Window()
	{
		this.Window_patch_hd_layer_override(...);
	}

	function scaleLeft(left)
    {
        if (this.isMainWindow) {
            return left;
        }
        return global.Window.mainWindow.left + global.scalePosition(left-global.Window.mainWindow.left, this._width, super.width, global.Window.mainWindow.width, global.Window.mainWindow.widthOriginal);
    }

	function unscaleLeft(left)
    {
    	// XXX: stubbed
        return left;
    }

	function scaleTop(top)
	{
		if (this.isMainWindow) {
			return top;
		}
		return global.Window.mainWindow.top + global.scalePosition(top-global.Window.mainWindow.top, this._height, super.height, global.Window.mainWindow.height, global.Window.mainWindow.heightOriginal);
	}

	function unscaleTop(top)
	{
		// XXX: stubbed
		return top;
	}

	function scaleWidth(w)
	{
		return global.scaleSize(w, this.widthScale);
	}

	function unscaleWidth(w)
	{
		// unscaleSize() outputs float to offer higher precision to whoever needs it. (Font kerning in HD relies on it!).
		// For window size handling we need rounding to prevent unintended downsizing cascades.
@if(!SCALE_ROUND_TOWARDS_NEAREST)
		return global.Math.ceil(global.unscaleSize(w, this.widthScale)) | 0;
@endif
@if(SCALE_ROUND_TOWARDS_NEAREST)
		return global.Math.round(global.unscaleSize(w, this.widthScale)) | 0;
@endif
	}

	function scaleHeight(h)
	{
		return global.scaleSize(h, global.scaleFactor);
	}

	function unscaleHeight(h)
	{
		// unscaleSize() outputs float to offer higher precision to whoever needs it. (Font kerning in HD relies on it!).
		// For window size handling we need rounding to prevent unintended downsizing cascades.
@if(!SCALE_ROUND_TOWARDS_NEAREST)
		return global.Math.ceil(global.unscaleSize(h, global.scaleFactor)) | 0;
@endif
@if(SCALE_ROUND_TOWARDS_NEAREST)
		return global.Math.round(global.unscaleSize(h, global.scaleFactor)) | 0;
@endif
	}

	// The float variety of these functions is used in patch_font_wrapper_hd.tjs
	function unscaleWidthFloat(w)
	{
		return global.unscaleSize(w, this.widthScale);
	}

	function unscaleHeightFloat(h)
	{
		return global.unscaleSize(h, global.scaleFactor);
	}

	function setPos(left, top)
	{
		if (this.isMainWindow)
		{
			super.setPos(left, top);
		}
		else
		{
			if (this.absoluteMode)
			{
				this._left = this.unscaleLeft(left);
				this._top = this.unscaleTop(top);
				super.setPos(left, top);
			}
			else
			{
				this._left = left;
				this._top = top;
				super.setPos(this.scaleLeft(left), this.scaleTop(top));
			}
		}
	}

	function setSize(width, height)
	{
		if (this.absoluteMode)
		{
			this._width = this.unscaleWidth(width);
			this._height = this.unscaleHeight(height);
			super.setSize(width, height);
		}
		else
		{
			this._width = width;
			this._height = height;
			super.setSize(this.scaleWidth(width), this.scaleHeight(height));
		}

		this._innerWidth = this.unscaleWidth(this.innerWidthOriginal);
		this._innerHeight = this.unscaleHeight(this.innerHeightOriginal);
	}

	function setInnerSize(innerWidth, innerHeight)
	{
		if (this.absoluteMode)
		{
			this._innerWidth = this.unscaleWidth(innerWidth);
			this._innerHeight = this.unscaleHeight(innerHeight);
			super.setInnerSize(innerWidth, innerHeight);
		}
		else
		{
			this._innerWidth = innerWidth;
			this._innerHeight = innerHeight;
			super.setInnerSize(this.scaleWidth(innerWidth), this.scaleHeight(innerHeight));
		}

		this._width = this.unscaleWidth(this.widthOriginal);
		this._height = this.unscaleHeight(this.heightOriginal);
	}
}
global.Window = global.Window_patch_hd_layer_override;
