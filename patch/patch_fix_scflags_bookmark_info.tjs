
global.KAGWindow_patch_fix_scflags_bookmark_info_original = global.KAGWindow;
class KAGWindow_patch_fix_scflags_bookmark_info_override extends global.KAGWindow_patch_fix_scflags_bookmark_info_original
{
	function KAGWindow_patch_fix_scflags_bookmark_info_override()
	{
		super.KAGWindow(...);
	}

	function KAGWindow()
	{
		this.KAGWindow_patch_fix_scflags_bookmark_info_override(...);
	}

	var patch_fix_scflags_bookmark_info_initialized = false;
	var patch_fix_scflags_bookmark_info_regex = /(\d+)\.(bmp|ksd)$/g;
	var patch_fix_scflags_bookmark_info_processing = false;

	function setSystemStateFromSystemVariables()
	{
		var ret = super.setSystemStateFromSystemVariables(...);
		if (!this.patch_fix_scflags_bookmark_info_initialized)
		{
			this.patch_fix_scflags_bookmark_info_initialized = true;
			this.patch_fix_scflags_bookmark_info_processing = true;
			var made_changes = false;
			if (typeof(global.Storages.dirlist) === "Object")
			{
				var storages = global.Storages.dirlist(this.saveDataLocation + "/");
				for (var i = 0; i < storages.count; i += 1)
				{
					var file = storages[i];
					if (file.substring(0, this.dataName.length) === this.dataName)
					{
						var matches = this.patch_fix_scflags_bookmark_info_regex.match(file);
						if (matches.count > 0)
						{
							var num = matches[1] | 0;
							if (this.getBookMarkDate(num) == "")
							{
								try
								{
									var fn = this.saveDataLocation + "/" + file;
									var modestr = "";
									if (this.saveThumbnail)
									{
@if(!HD_COMPATIBLE_SAVES)
										modestr += "o" + this.calcThumbnailSize().size;
@endif
@if(HD_COMPATIBLE_SAVES)
										modestr += "o" + this.calcThumbnailSize(fn).size;
@endif
									}
									var data = global.safeEvalStorage(fn, modestr);
									this.getBookMarkInfoFromData(data.core, num);
									made_changes = true;
								}
								catch (e)
								{
									global.Debug.message("Something went wrong while attempting to read " + file);
									if (typeof(e) === "Object" && typeof(e.message) === "String")
									{
										global.Debug.message("Exception: " + e.message);
									}
								}
							}
						}
					}
				}
			}
			this.patch_fix_scflags_bookmark_info_processing = false;
@if(0)
			if (made_changes)
			{
				this.saveSystemVariables();
			}
@endif
		}
		return ret;
	}

	function saveSystemVariables()
	{
		if (this.patch_fix_scflags_bookmark_info_processing)
		{
			return;
		}
		return super.saveSystemVariables(...);
	}

	function setBookMarkMenuCaptions()
	{
		if (this.patch_fix_scflags_bookmark_info_processing)
		{
			return;
		}
		return super.setBookMarkMenuCaptions(...);
	}

}
global.KAGWindow = global.KAGWindow_patch_fix_scflags_bookmark_info_override;
