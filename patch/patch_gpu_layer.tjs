

function TVP_RGB2COLOR(r, g, b)
{
    return ((((r)<<16) + ((g)<<8) + (b)) | 0xff000000);
}

function TVP_RGBA2COLOR(r, g, b, a)
{
    return (((a)<<24) + (((r)<<16) + ((g)<<8) + (b)));
}

class WindowShimBitmapLayerTreeOwner extends BitmapLayerTreeOwner
{
	var window = void;
	var texture = void;
	function WindowShimBitmapLayerTreeOwner(window)
	{
		this.window = window;
		super.BitmapLayerTreeOwner();
	}

	function get_texture()
	{
		var primaryLayer = this.primaryLayer;
		if (typeof(primaryLayer) === "Object" && primaryLayer !== null)
		{

		}
		else
		{
			Debug.message("no primary layer");
			return;
		}
		if (texture === void)
		{
			texture = new Offscreen(this.width, this.height);
			texture.copyRect(0, 0, this.bitmap, 0, 0, this.width, this.height);
			this.clearDirtyRect();
		}
		else
		{
			if (texture.width != this.width || texture.height != this.height)
			{
				invalidate texture;
				texture = new Offscreen(this.width, this.height);
				texture.copyRect(0, 0, this.bitmap, 0, 0, this.width, this.height);
				this.clearDirtyRect();
			}
			else
			{
				if (this.isUpdated)
				{
					texture.copyRect(0, 0, this.bitmap, 0, 0, this.width, this.height);
					//var rect = this.dirtyRect;
					//texture.copyRect(rect.left, rect.top, this.bitmap, rect);
					//this.clearDirtyRect();
				}
			}
		}
		return texture;
	}

	function draw()
	{
		var canvas = this.window.canvas;
		//canvas.clearColor = 0xff000000;
		canvas.matrix.reset();
		canvas.renderTarget = void;
		canvas.enableClipRect = false;
		canvas.fill(canvas.width, canvas.height, 0xffFFFFFF);
		//canvas.clearColor = 0xffFFFFFF;
		canvas.clear();
		canvas.blendMode = bmOpaque;
		canvas.a_opacity = 1.0;

		canvas.save();
		var texture = this.get_texture();
		if (texture !== void)
		{
			canvas.drawTexture(texture);
		}
		canvas.restore();
		//canvas.fill(300, 300, 0xff000000);
		canvas.flush();
	}

	var last_cursor_x = 0;
	var last_cursor_y = 0;
	function onGetCursorPos(x, y)
	{
		// Bad API design. You can't write to pointer / pass by reference in TJS.
	}

	function onSetCursorPos(x, y)
	{
		this.last_cursor_x = x;
		this.last_cursor_y = y;
	}

	function onChangeLayerImage()
	{
		// stub
	}

	function onDisableAttentionPoint()
	{
		// stub
	}

	function onReleaseMouseCapture()
	{
		// stub
	}

	function onResetImeMode()
	{
		// stub
	}

	function onResizeLayer(w, h)
	{
		// stub
	}

	function onSetAttentionPoint(layer, x, y)
	{
		// stub
	}

	function onSetHintText(sender, hint)
	{
		// stub
	}

	function onSetImeMode(mode)
	{
		// stub
	}

	function onSetMouseCursor(cursor)
	{
		// stub
	}
}

global.Window_patch_gpu_layer_original = Window;
class Window_patch_gpu_layer_override extends Window_patch_gpu_layer_original
{
	var bitmap_layer_tree_owner = void;
	function Window_patch_gpu_layer_override()
	{
		{
			bitmap_layer_tree_owner = new WindowShimBitmapLayerTreeOwner(this);
		}
		super.Window(...);
	}

	property primaryLayer
	{
		getter
		{
			if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
			{
				return this.bitmap_layer_tree_owner.primaryLayer;
			}
			return super.primaryLayer;
		}
	}

	property focusedLayer
	{
		getter
		{
			if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
			{
				return this.bitmap_layer_tree_owner.focusedLayer;
			}
			return super.focusedLayer;
		}
		setter(v)
		{
			if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
			{
				this.bitmap_layer_tree_owner.focusedLayer = v;
				return;
			}
			super.focusedLayer = v;
		}
	}

	function Window()
	{
		Window_patch_gpu_layer_override(...);
	}

	function onDraw()
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			this.bitmap_layer_tree_owner.draw();
		}
@if(0)
		return super.onDraw(...);
@endif
	}

	function onMouseDown(x, y, button, shift)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireMouseDown(x, y, button, shift);
		}
		return super.onMouseDown(...);
	}

	function onMouseUp(x, y, button, shift)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireMouseUp(x, y, button, shift);
		}
		return super.onMouseUp(...);
	}

	function onMouseMove(x, y, shift)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			// XXX: this causes segmentation fault!
@if(0)
			bitmap_layer_tree_owner.fireMouseMove(x, y, shift);
@endif
		}
		return super.onMouseMove(...);
	}

	function onMouseWheel(shift, delta, x, y)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireMouseWheel(shift, delta, x, y);
		}
		return super.onMouseWheel(...);
	}

	function onMouseLeave()
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireMouseOutOfWindow();
		}
		return super.onMouseLeave(...);
	}

	function onKeyDown(key, shift)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireKeyDown(key, shift);
		}
		return super.onKeyDown(...);
	}

	function onKeyPress(key)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireKeyPress(key);
		}
		return super.onKeyPress(...);	
	}

	function onKeyUp(key, shift)
	{
		if (typeof(this.canvas) === "Object" && this.canvas !== null && typeof(this.bitmap_layer_tree_owner) === "Object")
		{
			bitmap_layer_tree_owner.fireKeyUp(key, shift);
		}
		return super.onKeyUp(...);
	}
}
global.Window = Window_patch_gpu_layer_override;

global.Layer_patch_gpu_layer_original = Layer;
class Layer_patch_gpu_layer_override extends Layer_patch_gpu_layer_original
{
	var orig_window = void;
	property window
	{
		getter
		{
			return this.orig_window;
		}
	}

	var orig_call_on_paint = false;
	property callOnPaint
	{
		getter
		{
			return this.orig_call_on_paint;
		}
		setter(v)
		{
			this.orig_call_on_paint = !!v;
		}
	}

	function Layer_patch_gpu_layer_override(window, parent)
	{
		this.orig_window = window;
		if (typeof(window.bitmap_layer_tree_owner) === "Object" && window.bitmap_layer_tree_owner !== null)
		{
			super.Layer(window.bitmap_layer_tree_owner, parent);
		}
		else
		{
			super.Layer(window, parent);
		}	
	}

	function Layer()
	{
		Layer_patch_gpu_layer_override(...);
	}

@if(0)
	function GetTypeNameString()
	{
		switch(this.type)
		{
			case ltBinder:			return "ltBinder";
			case ltOpaque:			return "ltOpaque";
			case ltAlpha:			return "ltAlpha";
			case ltAdditive:		return "ltAdditive";
			case ltSubtractive:		return "ltSubtractive";
			case ltMultiplicative:	return "ltMultiplicative";
			case ltDodge:			return "ltDodge";
			case ltDarken:			return "ltDarken";
			case ltLighten:			return "ltLighten";
			case ltScreen:			return "ltScreen";
			case ltAddAlpha:		return "ltAddAlpha";
			case ltPsNormal:		return "PsNormal";
			case ltPsAdditive:		return "PsAdditive";
			case ltPsSubtractive:	return "PsSubtractive";
			case ltPsMultiplicative:return "PsMultiplicative";
			case ltPsScreen:		return "PsScreen";
			case ltPsOverlay:		return "PsOverlay";
			case ltPsHardLight:		return "PsHardLight";
			case ltPsSoftLight:		return "PsSoftLight";
			case ltPsColorDodge:	return "PsColorDodge";
			case ltPsColorDodge5:	return "PsColorDodge5";
			case ltPsColorBurn:		return "PsColorBurn";
			case ltPsLighten:		return "PsLighten";
			case ltPsDarken:		return "PsDarken";
			case ltPsDifference:	return "PsDifference";
			case ltPsDifference5:	return "PsDifference5";
			case ltPsExclusion:		return "PsExclusion";

			default:				return "unknown";
		}
	}

	function DumpStructure(level = 0)
	{
		var indent = "";
		for (var i = 0; i < level; i += 1)
		{
			indent += "  ";
		}
		var name = this.name;
		if (name == "")
		{
			name = "<noname>";
		}

		var ptr = " " + this;
		var ptr2 = " (native NOTIMPL)";

		Debug.message(indent + name +
			ptr + ptr2 +
			"( " + this.left + "," +
			this.top + ")-(" + this.right +
			"," + this.bottom + ") (" +
			this.width + "x" + this.height +
			")" + " " +
			(this.visible ? "visible" : "invisible") +
			" index=" + this.absolute +
			(this.provinceImageBuffer ? " p" : "") +
			" " + this.GetTypeNameString()
			);
		level += 1;
		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].DumpStructure(level);
		}
	}

	function dump_reimpl()
	{
		this.DumpStructure(0);
	}


	property type
	{
		getter
		{
			return this.typeOriginal;
		}
		setter(v)
		{
			if (this.typeOriginal != v)
			{
				switch (this.typeOriginal)
				{
					case ltOpaque:
					case ltAlpha:
					case ltAdditive:
					case ltSubtractive:
					case ltMultiplicative:
					case ltDodge:
					case ltDarken:
					case ltLighten:
					case ltScreen:
					case ltAddAlpha:
					case ltPsNormal:
					case ltPsAdditive:
					case ltPsSubtractive:
					case ltPsMultiplicative:
					case ltPsScreen:
					case ltPsOverlay:
					case ltPsHardLight:
					case ltPsSoftLight:
					case ltPsColorDodge:
					case ltPsColorDodge5:
					case ltPsColorBurn:
					case ltPsLighten:
					case ltPsDarken:
					case ltPsDifference:
					case ltPsDifference5:
					case ltPsExclusion:
						this.setInitialImageProperties();
						break;
					default:
						break;
				}
				switch (this.typeOriginal)
				{
					case ltBinder:
					case ltOpaque:
					case ltAlpha:
					case ltSubtractive:
					case ltMultiplicative:
					case ltDarken:
					case ltPsSubtractive:
					case ltPsMultiplicative:
					case ltPsColorBurn:
					case ltPsDarken:
						this._neutralColor = this._transparentColor = TVP_RGBA2COLOR(255, 255, 255, 0);
						break;
					case ltAdditive:
					case ltDodge:
					case ltLighten:
					case ltScreen:
					case ltAddAlpha:
					case ltPsNormal:
					case ltPsAdditive:
					case ltPsScreen:
					case ltPsColorDodge:
					case ltPsColorDodge5:
					case ltPsLighten:
					case ltPsDifference:
					case ltPsDifference5:
					case ltPsExclusion:
						this._neutralColor = this._transparentColor = TVP_RGBA2COLOR(0, 0, 0, 0);
						break;
					case ltPsOverlay:
					case ltPsHardLight:
					case ltPsSoftLight:
						this._neutralColor = this._transparentColor = TVP_RGBA2COLOR(128, 128, 128, 0);
						break;
					default:
						break;
				}
				switch (this.typeOriginal)
				{
					case ltBinder:
						this._canHaveImage = false;
						break;
					case ltOpaque:
					case ltAlpha:
					case ltAdditive:
					case ltSubtractive:
					case ltMultiplicative:
					case ltDodge:
					case ltDarken:
					case ltLighten:
					case ltScreen:
					case ltAddAlpha:
					case ltPsNormal:
					case ltPsAdditive:
					case ltPsSubtractive:
					case ltPsMultiplicative:
					case ltPsScreen:
					case ltPsOverlay:
					case ltPsHardLight:
					case ltPsSoftLight:
					case ltPsColorDodge:
					case ltPsColorDodge5:
					case ltPsColorBurn:
					case ltPsLighten:
					case ltPsDarken:
					case ltPsDifference:
					case ltPsDifference5:
					case ltPsExclusion:
						this._canHaveImage = true;
						break;
					default:
						break;
				}
			}
			this.typeOriginal = v;
		}
	}

@endif

	var texture = void;
	function get_texture()
	{
		var bitmap = new Bitmap();
		this.copyToBitmapFromMainImage(this.bitmap);
		if (texture === void)
		{
			texture = new Offscreen(super.width, super.height);
			texture.copyRect(0, 0, bitmap, 0, 0, super.width, super.height);
		}
		else
		{
			if (texture.width != super.width || texture.height != super.height)
			{
				invalidate texture;
				texture = new Offscreen(super.width, super.height);
				texture.copyRect(0, 0, bitmap, 0, 0, super.width, super.height);
			}
			else
			{
				texture.copyRect(0, 0, bitmap, 0, 0, super.width, super.height);
			}
		}
		invalidate bitmap;
		return texture;
	}

	var _inCompletion = false;
	function BeforeCompletion()
	{
		if (this._inCompletion)
		{
			return;
		}

@if(0)
		if (this.callOnPaint)
		{
			this.callOnPaint = false;
			if (typeof(this.onPaint) === "Object")
			{
				this.onPaint();
			}
		}
@endif

		// TODO: transition handling

		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].BeforeCompletion();
		}
	}

	function AfterCompletion()
	{
		if (this._inCompletion)
		{
			return;
		}

		// TODO: transition handling

		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].AfterCompletion();
		}
	}

	function Draw()
	{
		var canvas = this.window.canvas;
		canvas.save();
		canvas.matrix.translate(super.left, super.top);
		var current_cliprect = new Rect(super.clipLeft, super.clipTop, super.clipLeft + super.clipWidth, super.clipTop + super.clipHeight);
		canvas.clipRect.clip(current_cliprect);

		// draw self
		canvas.save();
		canvas.matrix.translate(super.imageLeft, super.imageTop);
		var texture = this.get_texture();
		if (texture !== void)
		{
			canvas.drawTexture(texture);
		}
		canvas.restore();

		// draw children
		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].Draw();
		}

		// TODO: send completion message
		canvas.restore();
	}

	function piledCopy_to_canvas()
	{
@if(0)
		var any_visible = false;
		for (var i = 0, internal_forloop_count = src.children.count; i < internal_forloop_count; i += 1)
		{
			if (src.children[i].visible)
			{
				any_visible = true;
				break;
			}
		}
		if (any_visible == false && this.imageLeft == 0 && this.imageTop == 0 && this.width == src.width && this.height == src.height)
		{
			this.assignImages(src);
			return;
		}
@endif

		this.BeforeCompletion();
		// ...
		this._inCompletion = true;
		this.Draw();
		this._inCompletion = false;
		this.AfterCompletion();
	}

	function update()
	{
@if(0)
		var ret = super.update(...);
@endif
		if (super.callOnPaint)
		{
			orig_call_on_paint = true;
			super.callOnPaint = false;
		}
@if(0)
		return ret;
@endif
	}
}
global.Layer = Layer_patch_gpu_layer_override;
