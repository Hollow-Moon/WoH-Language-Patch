// Patch names
var vitaAssetsPatchName = devMode? "ImagesVita" : "vita"; // not the best place to decalre the vita patch name but we need it at this stage
@if(GAME_FATE)
var hPatchName = "h";
var hCensorPatchName = mainPatchName;
var maturePatchName = devMode? "mature" : mainPatchName;
@endif
@if(GAME_FHAT)
var hPatchName = mainPatchName;
var hCensorPatchName = vitaAssetsPatchName;
var maturePatchName = vitaAssetsPatchName;
@endif
var decensoredPatchName = "decensor";

// Flag names
var hFlagName = "ghentai";
var hCensoredFlagName = "censored";
var matureFlagName = "gmature";
var decensoredFlagName = "decensor";

function get_hPatchExists() { { return patchExists(hPatchName); } }
function get_isHCensored(kag=global.kag) { { return kag.sflags[hCensoredFlagName] !== void? kag.sflags[hCensoredFlagName] : !kag.sflags[hFlagName]; } } // RN uses hFlagName while HA uses hCensoredFlagName
function get_isMatureCensored(kag=global.kag) { { return !kag.sflags[matureFlagName]; } }
function get_fullyCensored(kag=global.kag) { { return get_isHCensored(kag) && get_isMatureCensored(kag); } }
function get_isDecensored(kag=global.kag) { { return kag.sflags[decensoredFlagName]; } };

// Folder names
var fullyCensoredFolderName = "censored";

var censoredHFolderName = "censored_h";
var censoredMatureFolderName = "censored_mature";

var uncensoredHFolderName = "h";
var uncensoredMatureFolderName = "mature";

var decensoredFolderName = "decensored";

function getTextCensored(text, kag=global.kag) {
	if (text == void) return text;
	if (text.indexOf("|") >=0)
	{
		var splitText = [].split("|", text);
		if (kag.sflags[splitText[2]])
			return splitText[0];
		return splitText[1];
	}
	return text;
}

function isHScene(kag=global.kag)
{
	var name = kag.flags.scriptlabel;
	if (name == void || name == "") return false;

	name = Storages.chopStorageExt(name);
	name = name.replace(/trail_/g,"");
	var split = [].split("-",name);

	return split.length >= 2 && split[1].length == 3;
}

function updateDecensorConfig(kag=global.kag)
{
	var decensor_types = [void, "bishopcruz", "Bellandy", "original"];
	var decensor_config_file_name = "decensor_config.dic";

	var decensor_config;
	var custom_decensor_config_file_path = global.paths_base[0] + decensor_config_file_name;
	if (Storages.isExistentStorage(custom_decensor_config_file_path))
	{
		decensor_config = Scripts.evalStorage(custom_decensor_config_file_path);
	}
	else if (Storages.isExistentStorage(decensor_config_file_name))
	{
		decensor_config = Scripts.evalStorage(decensor_config_file_name);
	}

	if (decensor_config === void) {
		return;
	}

	var decensoredImages = Scripts.getObjectKeys(decensor_config);

	for(var i=0; i<decensoredImages.count; i++)
	{
		var currentDecensorType = decensor_types[+decensor_config[decensoredImages[i]]];

		for (var j=1; j<decensor_types.count; j++)
		{
			var decensor_type = decensor_types[j];
			var decensor_version_path = decensoredFolderName + "/" + decensoredImages[i] + "/" + decensor_type;
@if(HD_MODE)
			var decensor_version_path_hd = decensoredFolderName + hdFolderSuffix + "/" + decensoredImages[i] + "/" + decensor_type;
@endif
			if(decensor_type == currentDecensorType)
			{
				if(get_isDecensored(kag))
				{
					load_patches([
						[decensoredPatchName, decensor_version_path],
@if(HD_MODE)
						kag.isHd ? [decensoredPatchName, decensor_version_path_hd] : void,
@endif
					]);
					unload_patches([
@if(HD_MODE)
						(!kag.isHd) ? [decensoredPatchName, decensor_version_path_hd] : void,
@endif
					]);
				}
				else
				{
					unload_patches([
						[decensoredPatchName, decensor_version_path],
@if(HD_MODE)
						kag.isHd ? [decensoredPatchName, decensor_version_path_hd] : void,
@endif
					]);
				}
			}
			else
			{
				unload_patches([
					[decensoredPatchName, decensor_version_path],
@if(HD_MODE)
					kag.isHd ? [decensoredPatchName, decensor_version_path_hd] : void,
@endif
				]);
			}
		}
	}
}
