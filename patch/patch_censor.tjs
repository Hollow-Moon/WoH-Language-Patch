// Patch names
global.vitaAssetsPatchName = global.devMode? "ImagesVita" : "vita"; // not the best place to decalre the vita patch name but we need it at this stage
@if(GAME_FATE)
global.hPatchName = "h";
global.hCensorPatchName = global.mainPatchName;
global.maturePatchName = global.devMode? "ImagesPatch" : global.mainPatchName;
global.decensoredPatchName = "h";
@endif
@if(GAME_FHAT)
global.hPatchName = global.mainPatchName;
global.hCensorPatchName = global.vitaAssetsPatchName;
global.maturePatchName = global.vitaAssetsPatchName;
global.decensoredPatchName = "decensor";
@endif

// Flag names
global.hFlagName = "ghentai";
global.hCensoredFlagName = "censored";
global.matureFlagName = "gmature";
global.decensoredFlagName = "decensor";

global.get_hPatchExists = function() { { return global.patchExists(global.hPatchName); } };
global.get_isHCensored = function(kag=global.kag) { { return kag.sflags[global.hCensoredFlagName] !== void? kag.sflags[global.hCensoredFlagName] : !kag.sflags[global.hFlagName]; } }; // RN uses hFlagName while HA uses hCensoredFlagName
global.get_isMatureCensored = function(kag=global.kag) { { return !kag.sflags[global.matureFlagName]; } };
global.get_fullyCensored = function(kag=global.kag) { { return global.get_isHCensored(kag) && global.get_isMatureCensored(kag); } };
global.get_isDecensored = function(kag=global.kag) { { return kag.sflags[global.decensoredFlagName]; } };

// Folder names
global.fullyCensoredFolderName = "censored";

global.censoredHFolderName = "censored_h";
global.censoredMatureFolderName = "censored_mature";

global.uncensoredHFolderName = "h";
global.uncensoredMatureFolderName = "mature";

global.decensoredFolderName = "decensored";

global.getTextCensored = function(text, kag=global.kag)
{
	if (text == void) return text;
	if (text.indexOf("|") >=0)
	{
		var splitText = [].split("|", text);
		if (kag.sflags[splitText[2]])
			return splitText[0];
		return splitText[1];
	}
	return text;
};

global.isHScene = function(kag=global.kag)
{
	var name = kag.flags.scriptlabel;
	if (name == void || name == "") return false;

	name = global.Storages.chopStorageExt(name);
	name = name.replace(/trail_/g,"");
	var split = [].split("-",name);

	return split.length >= 2 && split[1].length == 3;
};

global.updateDecensorConfig = function(kag=global.kag)
{
	var decensor_types = [void, "bishopcruz", "Bellandy", "original"];
	var decensor_config_file_name = "decensor_config.dic";

	var decensor_config;
	var custom_decensor_config_file_path = global.paths_base[0] + decensor_config_file_name;
	if (global.Storages.isExistentStorage(custom_decensor_config_file_path))
	{
		decensor_config = global.Scripts.evalStorage(custom_decensor_config_file_path);
	}
	else if (global.Storages.isExistentStorage(decensor_config_file_name))
	{
		decensor_config = global.Scripts.evalStorage(decensor_config_file_name);
	}

	if (decensor_config === void) {
		return;
	}

	var decensoredImages = [];
	decensoredImages.assign(decensor_config);

	for (var i = 0, internal_forloop_count = decensoredImages.count; i < internal_forloop_count; i += 2)
	{
		var currentDecensorType = decensor_types[+decensor_config[decensoredImages[i]]];

		for (var j = 1, internal_forloop_count = decensor_types.count; j < internal_forloop_count; j += 1)
		{
			var decensor_type = decensor_types[j];
			var decensorInnerPath = "/" + decensoredImages[i] + "/" + decensor_type;
			var decensorFullPath = global.decensoredFolderName + decensorInnerPath;

			if(decensor_type == currentDecensorType)
			{
				if(global.get_isDecensored(kag))
				{
					var patches_arr = [[global.hPatchName, decensorFullPath]];
@if(HD_MODE)
					addHdPaths(patches_arr, global.hPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
					patches_arr.add([global.decensoredPatchName, decensorFullPath]);
@if(HD_MODE)
					addHdPaths(patches_arr, global.decensoredPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
					global.load_patches(patches_arr);

					patches_arr = [];
@if(HD_MODE)
					addHdPaths(patches_arr, global.decensoredPatchName, global.decensoredFolderName, decensorInnerPath) if !kag.isHd;
					addHdPaths(patches_arr, global.hPatchName, global.decensoredFolderName, decensorInnerPath) if !kag.isHd;
@endif
					global.unload_patches(patches_arr);
				}
				else
				{
					var patches_arr = [[global.decensoredPatchName, decensorFullPath]];
@if(HD_MODE)
					addHdPaths(patches_arr, global.decensoredPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
					patches_arr.add([global.hPatchName, decensorFullPath]);
@if(HD_MODE)
					addHdPaths(patches_arr, global.hPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
					global.unload_patches(patches_arr);
				}
			}
			else
			{
				var patches_arr = [[global.decensoredPatchName, decensorFullPath]];
@if(HD_MODE)
				addHdPaths(patches_arr, global.decensoredPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
				patches_arr.add([global.hPatchName, decensorFullPath]);
@if(HD_MODE)
				addHdPaths(patches_arr, global.hPatchName, global.decensoredFolderName, decensorInnerPath) if kag.isHd;
@endif
				global.unload_patches(patches_arr);
			}
		}
	}
	invalidate decensoredImages;
};
