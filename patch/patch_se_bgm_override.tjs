
global.SESoundBuffer_patch_se_bgm_original = global.SESoundBuffer;
class SESoundBuffer_patch_se_bgm_override extends global.SESoundBuffer_patch_se_bgm_original
{
	function SESoundBuffer_patch_se_bgm_override()
	{
		super.SESoundBuffer(...);
	}

	function SESoundBuffer()
	{
		this.SESoundBuffer_patch_se_bgm_override(...);
	}

	//サウンドデバイスが動作していない状態でゼロ除算ハード例外が出る問題の回避
	property totalTime
	{
		getter()
		{
			if(status == "unload")
				return 0;	//	未読込なので
			try
			{
				var tt;
				tt = super.totalTime;
				return tt;
			}
			catch(e)
			{
				global.dm("SESoundBuffer：メディアの総再生時間取得に失敗しました(実行は続行できます) : " + e.message);
				return 0;
			}
		}
	}

	function play(elm, resetvolume = true)
	{
		// play オーバーライド
		(global.WaveSoundBuffer.stop incontextof this)();
		this.stopFade();
@if(GAME_WOHN)
		global.asyncCaller.cancel(this._onFadeCompleted);	//	予約されているフェード後の停止をキャンセル
@endif
		var storage = elm.storage;
		var start = elm.start;
		var found = true;
@if(0)
		if(!Storages.isExistentStorage(storage))
		{
			var test;
			if(test = storage + ".wav", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".ogg", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".opus", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".tcw", Storages.isExistentStorage(test))
				storage = test;
			else
				found = false;
		}
@endif
@if(1)
		found = global.check_if_audio_exists(storage);
@endif
		if(!found)
@if(0)
			throw new global.Exception(global.__("効果音 %s が見つかりません").sprintf(storage));
@endif
@if(1)
		{
			global.Debug.message(global.__("効果音 %s が見つかりません").sprintf(storage));
			return;
		}
@endif
		var loop = elm.loop === void ? false : +elm.loop;
		this.looping = loop;
		if(loop)
			this.currentStorage = storage;
		else
			this.currentStorage = "";
		try
		{
			(global.WaveSoundBuffer.open incontextof this)(storage);
			if(resetvolume) *(&(global.WaveSoundBuffer.volume) incontextof this) = this.currentVolume * 1000;
			// 再生位置指定
			if (start !== void &&
				(*(&(global.WaveSoundBuffer.labels) incontextof this)) !== void &&
				(start = (*(&(global.WaveSoundBuffer.labels) incontextof this))[start]) !== void &&
				(start = start.samplePosition) !== void) {
				*(&(global.WaveSoundBuffer.samplePosition) incontextof this) = start;
			}
			(global.WaveSoundBuffer.play incontextof this)();
		}
		catch(e)
		{
			global.Debug.message("効果音の再生に失敗しました(実行は続行できます) : " + e.message);
		}
	}
}
global.SESoundBuffer = global.SESoundBuffer_patch_se_bgm_override;

global.KAGWaveSoundBuffer_patch_se_bgm_original = global.KAGWaveSoundBuffer;
class KAGWaveSoundBuffer_patch_se_bgm_override extends global.KAGWaveSoundBuffer_patch_se_bgm_original
{
	function KAGWaveSoundBuffer_patch_se_bgm_override()
	{
		super.KAGWaveSoundBuffer(...);
	}

	function KAGWaveSoundBuffer()
	{
		this.KAGWaveSoundBuffer_patch_se_bgm_override(...);
	}

	//サウンドデバイスが動作していない状態でゼロ除算ハード例外が出る問題の回避
	property totalTime
	{
		getter()
		{
			try
			{
				var tt;
				tt = global.WaveSoundBuffer.totalTime;
				return tt;
			}
			catch(e)
			{
				global.dm("KAGWaveSoundBuffer：メディアの総再生時間取得に失敗しました(実行は続行できます) : " + e.message);
				return 0;
			}
		}
	}
}
global.KAGWaveSoundBuffer = global.KAGWaveSoundBuffer_patch_se_bgm_override;

global.BGM_patch_se_bgm_original = global.BGM;
class BGM_patch_se_bgm_override extends global.BGM_patch_se_bgm_original
{
	function BGM_patch_se_bgm_override()
	{
		super.BGM(...);
	}

	function BGM()
	{
		this.BGM_patch_se_bgm_override(...);
	}

	function playBuffer(buf, storage, loop, paused = false, start)
	{
		// buf に対して演奏を開始させる

		// 拡張子やドライブ文字が省略された場合、検索を行う
		var found = true;
@if(0)
		var test;
		if(!Storages.isExistentStorage(storage))
		{
			if(test = storage + ".wav", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".ogg", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".opus", Storages.isExistentStorage(test))
				storage = test;
			else if(test = storage + ".tcw", Storages.isExistentStorage(test))
				storage = test;
			else
				found = false;
		}
@endif
@if(1)
		found = global.check_if_audio_exists(storage);
@endif


		if(this._enabled)
		{
			if(!found)
			{
				global.Debug.message("BGM " + storage + " が見つかりません");
				return;
			}

			try
			{
				buf.looping = loop; // 引数の "loop"
				buf.open(storage);
                // ごう追加 再生位置制御
                if (start !== void &&
                    buf.labels !== void &&
                    (start = buf.labels[start]) !== void &&
                    (start = start.samplePosition) !== void) {
                    buf.samplePosition = start;
                }
                buf.paused = paused;
				buf.play();
			}
			catch(e)
			{
				global.Debug.message("BGM " + storage +" を再生できません : " + e.message);
				return;
			}
		}
		this.currentBuffer = buf;
	}
}
global.BGM = global.BGM_patch_se_bgm_override;
