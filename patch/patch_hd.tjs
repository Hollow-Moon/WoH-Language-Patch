@if(GAME_FATE||GAME_FHAT)
var originalResWidth = 800;
var originalResHeight = 600;
@endif
@if(GAME_WOHN)
var originalResWidth = 1024;
var originalResHeight = 576;
@endif
@if(GAME_FATE)
var highResWidth = 1280;
var highResHeight = 960;
var veryHighResWidth = 1920;
var veryHighResHeight = 1440;
@endif
@if(GAME_FHAT)
var highResWidth = 1600;
var highResHeight = 1200;
var veryHighResWidth = 3200;
var veryHighResHeight = 2400;
@endif
@if(GAME_WOHN)
var highResWidth = 2048;
var highResHeight = 1152;
var veryHighResWidth = 4096;
var veryHighResHeight = 2304;
@endif
@if(SCALE_USING_FLOATING_POINT)
var defaultScaleFactor = highResWidth / originalResWidth;
var defaultHighScaleFactor = veryHighResWidth / originalResWidth;
@endif
@if(!SCALE_USING_FLOATING_POINT)
var defaultScaleFactor = highResWidth \ originalResWidth;
var defaultHighScaleFactor = veryHighResWidth \ originalResWidth;
@endif
var isCropped = false;
var scaleFactor = 1;
var wideFactor = 1;
var cropFactor = 1;
@if(GAME_FATE||GAME_FHAT)
var cubicRatio = 4/3;
@endif
@if(GAME_WOHN)
var cubicRatio = 16/9;
@endif
var standardWideRatio = 16/9;

var hdFolderSuffix = "-hd";

@if(GAME_FATE)
var hdPatchName = devMode? "ImagesHD" : "HD";
var fhdPatchName = devMode?  "ImagesHD2" : "HD";
@endif
@if(GAME_FHAT)
var hdPatchName = devMode? "ImageHD" : "HD";
var fhdPatchName = devMode?  "ImageHD2" : "HD";
@endif
@if(GAME_WOHN)
var hdPatchName = devMode? "ImageHD" : "HD";
var fhdPatchName = devMode?  "ImageHD2" : "HD";
@endif

var wideRulePatchName = devMode? "RuleWide" : hdPatchName;
var wideRuleFolderName = devMode? "" : "RuleWide";

var hdScaleFactorFlagName = "hdScaleFactor";
var wideScreenFlagName = "wideScreen";
var autoWideRatioFlagName = "autoWideRatio";
var wideRatioFlagName = "wideRatio";

var devHdImageFolders = ["BGImageHD", "FGImageHD", "ImageHD", "ImagesClassicHD", "ImagesConfigHD", "ImagesMobile", "ImagesPatchHD", "ImagesPS2HD", "ImagesTitleHD", "ImagesTrialHD", "ImagesHanafudaHD", "RuleHD", "Image_transparentHDcolor"];

property systemRatio { getter { return System.screenWidth / System.screenHeight; } }
property hdPatchExists { getter { return patchExists(hdPatchName) || patchExists(fhdPatchName); } }
property fhdPatchExists { getter { return patchExists(fhdPatchName); } }

property inverseScaleFactor { getter() { return 1/scaleFactor; } }
property inverseWideFactor { getter() { return 1/wideFactor; } }
property inverseCubicRatio { getter() { return 1/cubicRatio; } }
property wideScaleFactor { getter() { return scaleFactor * wideFactor; } }


function loadHdPatch(kag=global.kag)
{
	var patches_arr = [];
	patches_arr.add([hdPatchName]);
	if (devMode) {
		for (var i = 0, internal_forloop_count = devHdImageFolders.count; i < internal_forloop_count; i += 1) {
			patches_arr.add([devHdImageFolders[i]]);
		}
	}
	patches_arr.add([opPatchName, 'hd']) if get_opPatchExists();
	if (typeof(kag) === "Object")
	{
		patches_arr.add([maturePatchName, uncensoredMatureFolderName + hdFolderSuffix]) if kag.sflags[matureFlagName];
		patches_arr.add([hPatchName, uncensoredHFolderName + hdFolderSuffix]) if kag.sflags[hFlagName];

		patches_arr.add([languagePatchName(japaneseLanguage), imagesFolderName + hdFolderSuffix]);
		patches_arr.add([languagePatchName(kag.sflags.language), imagesFolderName + hdFolderSuffix]) if kag.sflags.language !== void && kag.sflags.language !== japaneseLanguage;
	}

	load_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		updateDecensorConfig(kag);
	}
}

function unloadHdPatch(kag=global.kag)
{
	var patches_arr = [];
	patches_arr.add([hdPatchName]);
	if (devMode) {
		for (var i = 0, internal_forloop_count = devHdImageFolders.count; i < internal_forloop_count; i += 1) {
			patches_arr.add([devHdImageFolders[i]]);
		}
	}
	patches_arr.add([opPatchName, 'hd']) if get_opPatchExists();
	if (typeof(kag) === "Object")
	{
		patches_arr.add([maturePatchName, uncensoredMatureFolderName + hdFolderSuffix]) if kag.sflags[matureFlagName];
		patches_arr.add([hPatchName, uncensoredHFolderName + hdFolderSuffix]) if kag.sflags[hFlagName];

		patches_arr.add([languagePatchName(japaneseLanguage), imagesFolderName + hdFolderSuffix]);
		patches_arr.add([languagePatchName(kag.sflags.language), imagesFolderName + hdFolderSuffix]) if kag.sflags.language !== void && kag.sflags.language !== japaneseLanguage;
	}

	unload_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		updateDecensorConfig(kag);
	}
}

function initializeQuality(scale) {
	scaleFactor = scale;
	hdScaleFactor = scale;

	if (isHd) {
		loadHdPatch(this);
	} else {
		unloadHdPatch(this);
	}
}

function initializeWide(ratio) {
	wideScreen = ratio > cubicRatio;
	wideRatio = ratio;
@if(SCALE_USING_FLOATING_POINT)
	wideFactor = originalResHeight * ratio / originalResWidth;
@endif
@if(!SCALE_USING_FLOATING_POINT)
	wideFactor = originalResHeight * ratio \ originalResWidth;
	if (!wideFactor)
	{
		wideFactor = 1;
	}
@endif

	if (wideScreen) {
		load_patches([[wideRulePatchName, wideRuleFolderName]]);
	} else {
		unload_patches([[wideRulePatchName, wideRuleFolderName]]);
	}
}

function onQualityMenuItemClick(sender, quality) {
	with (sender.owner) {
		var changed = false;
		if (quality == "low" && .hdScaleFactor !== 1) {
@if(!KIRIKIROID&&!KIRIKIRISDL2)
			{
				global.full_game_reload("-hdscalefactor=1");
			}
@endif
			.extraConductor.clear();
			.lineBreak.loadedImage = null;
			.pageBreak.loadedImage = null;
			.reload_scenario_prepare();
			(initializeQuality incontextof sender.owner)(1);
			changed = true;
			sender.checked = true;
		} else if (quality == "high" && .hdScaleFactor !== defaultScaleFactor) {
@if(!KIRIKIROID&&!KIRIKIRISDL2)
			{
				global.full_game_reload("-hdscalefactor=" + defaultScaleFactor);
			}
@endif
			.extraConductor.clear();
			.lineBreak.loadedImage = null;
			.pageBreak.loadedImage = null;
			.reload_scenario_prepare();
			(initializeQuality incontextof sender.owner)(defaultScaleFactor);
			changed = true;
			sender.checked = true;
		} else if (quality == "veryHigh" && .hdScaleFactor !== defaultHighScaleFactor) {
@if(!KIRIKIROID&&!KIRIKIRISDL2)
			{
				global.full_game_reload("-hdscalefactor=" + defaultHighScaleFactor);
			}
@endif
			.extraConductor.clear();
			.lineBreak.loadedImage = null;
			.pageBreak.loadedImage = null;
			.reload_scenario_prepare();
			(initializeQuality incontextof sender.owner)(defaultHighScaleFactor);
			changed = true;
			sender.checked = true;
		}
		if (changed) {
			changeResolution(sender.owner);
			.reload_scenario_execute();
		}
	}
}

function onWideMenuItemClick(sender, ratio, cropped=false) {
	if (ratio == "standard") {
		ratio = cubicRatio;
	} else if (ratio == "wide") {
		ratio = systemRatio;
	}
	
	if (ratio !== void && !floatEquals(ratio, sender.owner.wideRatio))
	{
@if(!KIRIKIROID&&!KIRIKIRISDL2)
		{
			global.full_game_reload("-wideratio=" + global.real_to_hex_string(ratio));
		}
@endif
		with (sender.owner) {
			.extraConductor.clear();
			.reload_scenario_prepare();
			(initializeWide incontextof sender.owner)(ratio);
			changeResolution(sender.owner);
			.reload_scenario_execute();
		}
	}
	if (cropped != isCropped)
	{
		with (sender.owner) {
@if(SCALE_USING_FLOATING_POINT)
			if (cropped)
			{
				isCropped = true;
				cropFactor = 1 / cubicRatio;
			}
			else
@endif
			{
				isCropped = false;
				cropFactor = 1;
			}

			.extraConductor.clear();
			.reload_scenario_prepare();

			.setSize(.width, .height);

			.reload_scenario_execute();
		}
	}

	sender.checked = true;
}

function changeResolution(win) {
	with (win) {
		(updateResolution incontextof win)(%[]);
		if (typeof(._primaryLayer) === "Object")
		{
			._primaryLayer.update_bounds_hd_layer();
		}
		if (typeof(.hintlayer) === "Object")
		{
			invalidate .hintlayer;
			.hintlayer = void;
		}
		if (typeof(global.flow_tracker_object) === "Object" && typeof(global.flow_tracker_object.isTest) === "Integer" && global.flow_tracker_object.isTest)
		{
			global.flow_tracker_object.isTest = false;
			global.flow_tracker_object.isTest = true;
		}
@if(!ZOOM_WINDOW)
		.setSize(originalResWidth, originalResHeight);
		.setInnerSize(originalResWidth, originalResHeight);
@endif
	}
}

function updateResolution(mp)
{
	isPossibleChangeScreen	= true if mp.changescreen === true;
	var curfullscreen	= false;
	curfullscreen <-> fullScreen;	//	フルスクリーン状態を解除
	//pxWidth = exWidth = size[0];
	//pxHeight = exHeight = size[1];
@if(ZOOM_WINDOW)
	setInnerSize(innerWidth, innerHeight);	//	ウィンドウのクライアントサイズを変更
@endif
@if(!ZOOM_WINDOW)
	setSize(originalResWidth, originalResHeight);
	setInnerSize(originalResWidth, originalResHeight);
	setZoom(1, 1);
@endif

@if(ZOOM_WINDOW)
	addHook("afterChangeScreenMode", fullScreenAfterChangeScreenMode) if curfullscreen;
@endif
@if(!ZOOM_WINDOW)
	curfullscreen <-> fullScreen;	//	フルスクリーン状態を復帰
@endif

	isPossibleChangeScreen	= false if mp.changescreen === false;
}


function initializeHDPatch() {
	if (System.getArgument("-hdscalefactor") !== void)
	{
		hdScaleFactor = +System.getArgument("-hdscalefactor");
	}
	(initializeQuality incontextof this)(hdScaleFactor, true);
	if (System.getArgument("-wideratio") !== void)
	{
		(initializeWide incontextof this)(System.getArgument("-wideratio") * 1.0, true);
	}
	else
	{
		(initializeWide incontextof this)(wideRatio, true);
	}
	changeResolution(this);
}
