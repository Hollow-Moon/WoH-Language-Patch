@if(GAME_FATE||GAME_FHAT)
global.originalResWidth = 800;
global.originalResHeight = 600;
@endif
@if(GAME_WOHN)
global.originalResWidth = 1024;
global.originalResHeight = 576;
@endif

global.isCropped = false;
global.scaleFactor = 1;
global.wideFactor = 1;
global.cropFactor = 1;
@if(GAME_FATE||GAME_FHAT)
global.cubicRatio = 4/3;
@endif
@if(GAME_WOHN)
global.cubicRatio = 16/9;
@endif
global.standardWideRatio = 16/9;

@if(GAME_FATE)
global.hdPatchesNames = [
	devMode? "ImagesHD" : "hd", // 1280x960
	devMode? "ImagesHD_1600" : "hd_1600", // 1600x1200
	devMode? "ImagesHD_1920" : "hd_1920", // 1920x1440
	devMode? "ImagesHD_2400" : "hd_2400", // 2400x1800
	devMode? "ImagesHD_3200" : "hd_3200" // 3200x2400
];
global.scaleFactors = [1.6, 2, 2.4, 3, 4];
global.hdNames = ["hd", "hd_1600", "hd_1920", "hd_2400", "hd_3200"];
@endif
@if(GAME_FHAT)
global.hdPatchesNames = [
	devMode? "ImageHD" : "HD",
	devMode?  "ImageHD2" : "FHD",
];
global.scaleFactors = [2, 4];
global.hdNames = ["hd", "fhd"];
@endif
@if(GAME_WOHN)
global.hdPatchesNames = [
	devMode? "ImageHD" : "HD",
	devMode?  "ImageHD2" : "FHD",
];
global.scaleFactors = [2, 4];
global.hdNames = ["hd", "fhd"];
@endif

global.scaleFactorsToPatchName = %[];
global.scaleFactorsToHdNames = %[];
for (var i=0; i<global.scaleFactors.count; i++) {
	global.scaleFactorsToPatchName[global.scaleFactors[i]] = global.hdPatchesNames[i];
	global.scaleFactorsToHdNames[global.scaleFactors[i]] = global.hdNames[i];
}

global.get_widePatchName = function() { { return devMode? "ImagesPatch" : mainPatchName; } };
global.ruleWideFolderName = "rule-wide";

global.hdScaleFactorFlagName = "hdScaleFactor";
global.wideScreenFlagName = "wideScreen";
global.autoWideRatioFlagName = "autoWideRatio";
global.wideRatioFlagName = "wideRatio";

global.devImageFolders = ["ImagesPatch"];

@if(!GAME_FHAT)
global.devHdImageFolders = [];
@endif
@if(GAME_FHAT)
global.devHdImageFolders = ["BGImageHD", "FGImageHD", "ImageHD", "ImagesConfigHD", "ImagesPatchHD", "ImagesHanafudaHD", "RuleHD"];
@endif

global.get_systemRatio = function() { { return System.screenWidth / System.screenHeight; } };

global.get_inverseScaleFactor = function() { { return 1/scaleFactor; } };
global.get_inverseWideFactor = function() { { return 1/wideFactor; } };
global.get_inverseCubicRatio = function() { { return 1/cubicRatio; } };
global.get_wideScaleFactor = function() { { return scaleFactor * wideFactor; } };

global.get_hdPatchName = function() { { return global.scaleFactorsToPatchName[scaleFactor]; } };
global.get_hdFolderName = function() { { return global.scaleFactorsToHdNames[scaleFactor]; } };
global.get_hdFolderSuffix = function() { { return "-" + global.get_hdFolderName(); } };
global.get_hdPatchSuffix = function() { { return "_" + global.get_hdFolderName(); } };

global.addHdPaths = function(patches_arr, patchName, folder="", innerPath="")
{
	var separator = folder === ""? "" : "-";
	for (var i = 0; i < hdNames.count; i++) {
		patches_arr.add([patchName, folder + separator + hdNames[i] + innerPath]);
		if (hdNames[i] == global.get_hdFolderName()) {
			break;
		}
	}
	var patchNameHd = patchName === mainPatchName || (devMode && devImageFolders.contains(patchName))? global.get_hdPatchName() : (patchName + global.get_hdPatchSuffix());
	if (folder != "") {
		patches_arr.add([patchNameHd, folder + innerPath]);
	}
	for (var i = 0; i < hdNames.count; i++) {
		patches_arr.add([patchNameHd, folder + separator + hdNames[i] + innerPath]);
		if (hdNames[i] == global.get_hdFolderName()) {
			break;
		}
	}
};

global.unloadAllHdPatches = function(kag=global.kag)
{
	var originalScaleFactor = scaleFactor;

	for (var i = 0; i < scaleFactors.count; i++) {
		scaleFactor = scaleFactors[i];
		unloadHdPatch(kag);
	}
	scaleFactor = originalScaleFactor;
};

global.getHdPatchesArray = function(kag=global.kag)
{
	var patches_arr = [];
	patches_arr.add([global.get_hdPatchName()]);
	if (devMode && scaleFactor === global.scaleFactors[0]) {
		for (var i = 0, internal_forloop_count = devHdImageFolders.count; i < internal_forloop_count; i += 1) {
			patches_arr.add([devHdImageFolders[i]]);
		}
	}
	addHdPaths(patches_arr, opPatchName) if get_opPatchExists();
	if (typeof(kag) === "Object")
	{
		addHdPaths(patches_arr, global.get_widePatchName(), ruleWideFolderName) if kag.scflags[wideScreenFlagName];

		addHdPaths(patches_arr, mobileBreakGlyphsPatchName, mobileBreakGlyphsFolderName) if kag.sflags[mobileBreakGlyphsFlagName];
		addHdPaths(patches_arr, mobileWindowPatchName, mobileWindowFolderName) if kag.sflags[mobileWindowFlagName];
		addHdPaths(patches_arr, wideWindowPatchName, wideWindowFolderName) if kag.scflags[wideScreenFlagName] && kag.sflags[wideWindowFlagName];
		addHdPaths(patches_arr, wideMobileWindowPatchName, wideMobileWindowFolderName) if kag.scflags[wideScreenFlagName] && kag.sflags[wideWindowFlagName] && kag.sflags[mobileWindowFlagName];

		addHdPaths(patches_arr, maturePatchName, uncensoredMatureFolderName) if kag.sflags[matureFlagName];
		addHdPaths(patches_arr, hPatchName, uncensoredHFolderName) if kag.sflags[hFlagName];

		addHdPaths(patches_arr, languagePatchName(japaneseLanguage), imagesFolderName);
		addHdPaths(patches_arr, languagePatchName(kag.sflags.language), imagesFolderName) if kag.sflags.language !== void && kag.sflags.language !== japaneseLanguage;
	}

	return patches_arr;
};

global.loadHdPatch = function(kag=global.kag)
{
	if (global.get_hdPatchName() === void) {
		return;
	}
	
	var patches_arr = getHdPatchesArray(kag);

	load_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		updateDecensorConfig(kag);
	}
};

global.unloadHdPatch = function(kag=global.kag)
{
	if (global.get_hdPatchName() === void) {
		return;
	}

	var patches_arr = getHdPatchesArray(kag);

	unload_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		updateDecensorConfig(kag);
	}
};

global.initializeQuality = function(scale)
{
	unloadHdPatch(this);

	scaleFactor = scale;
	hdScaleFactor = scale;

	loadHdPatch(this);
};

global.getWidePatchesArray = function(kag=global.kag)
{
	var patches_arr = [[global.get_widePatchName(), ruleWideFolderName]];
	patches_arr.add([wideWindowPatchName, wideWindowFolderName]) if kag.sflags[wideWindowFlagName];
	patches_arr.add([wideMobileWindowPatchName, wideMobileWindowFolderName]) if kag.sflags[wideWindowFlagName] && kag.sflags[mobileWindowFlagName];
@if(HD_MODE)
	if (kag.isHd) {
		addHdPaths(patches_arr, global.get_widePatchName(), ruleWideFolderName);
		addHdPaths(patches_arr, wideWindowPatchName, wideWindowFolderName) if kag.sflags[wideWindowFlagName];
		addHdPaths(patches_arr, wideMobileWindowPatchName, wideMobileWindowFolderName) if kag.sflags[wideWindowFlagName] && kag.sflags[mobileWindowFlagName];
	}
@endif
	return patches_arr;
};

global.initializeWide = function(ratio)
{
	wideScreen = ratio > cubicRatio;
	wideRatio = ratio;
@if(SCALE_USING_FLOATING_POINT)
	wideFactor = (originalResHeight / originalResWidth) * ratio; // order of operations is important to avoid floating point errors causing visual glitch
@endif
@if(!SCALE_USING_FLOATING_POINT)
	wideFactor = originalResHeight * ratio \ originalResWidth;
	if (!wideFactor)
	{
		wideFactor = 1;
	}
@endif

	var patches_arr = getWidePatchesArray(this);

	if (wideScreen) {
		load_patches(patches_arr);
	} else {
		unload_patches(patches_arr);
	}
};

global.onQualityMenuItemClick = function(sender)
{
	with (sender.owner) {
		var changed = false;
		if (sender.scaleFactor !== .hdScaleFactor) {
@if(!KIRIKIROID&&!KIRIKIRISDL2)
			{
				global.full_game_reload("-hdscalefactor="+sender.scaleFactor);
			}
@endif
			.extraConductor.clear();
			.lineBreak.loadedImage = null;
			.pageBreak.loadedImage = null;
			.reload_scenario_prepare();
			(initializeQuality incontextof sender.owner)(sender.scaleFactor);
			changed = true;
			sender.checked = true;
		}
		if (changed) {
			changeResolution(sender.owner);
			.reload_scenario_execute();
		}
	}
};

global.onWideMenuItemClick = function(sender, ratio, cropped=false)
{
	if (ratio == "standard") {
		ratio = cubicRatio;
	} else if (ratio == "wide") {
		ratio = global.get_systemRatio();
	}
	
	if (ratio !== void && !floatEquals(ratio, sender.owner.wideRatio))
	{
@if(!KIRIKIROID&&!KIRIKIRISDL2)
		{
			global.full_game_reload("-wideratio=" + global.real_to_hex_string(ratio));
		}
@endif
		with (sender.owner) {
			.extraConductor.clear();
			.reload_scenario_prepare();
			(initializeWide incontextof sender.owner)(ratio);
			changeResolution(sender.owner);
			.reload_scenario_execute();
		}
	}
	if (cropped != isCropped)
	{
		with (sender.owner) {
@if(SCALE_USING_FLOATING_POINT)
			if (cropped)
			{
				isCropped = true;
				cropFactor = 1 / cubicRatio;
			}
			else
@endif
			{
				isCropped = false;
				cropFactor = 1;
			}

			.extraConductor.clear();
			.reload_scenario_prepare();

			.setSize(.width, .height);

			.reload_scenario_execute();
		}
	}

	sender.checked = true;
};

global.changeResolution = function(win)
{
	with (win) {
		(updateResolution incontextof win)(%[]);
		if (typeof(._primaryLayer) === "Object")
		{
			._primaryLayer.update_bounds_hd_layer();
		}
		if (typeof(.hintlayer) === "Object")
		{
			invalidate .hintlayer;
			.hintlayer = void;
		}
		if (typeof(global.flow_tracker_object) === "Object" && typeof(global.flow_tracker_object.isTest) === "Integer" && global.flow_tracker_object.isTest)
		{
			global.flow_tracker_object.isTest = false;
			global.flow_tracker_object.isTest = true;
		}
@if(!ZOOM_WINDOW)
		.setSize(originalResWidth, originalResHeight);
		.setInnerSize(originalResWidth, originalResHeight);
@endif
	}
};

global.updateResolution = function(mp)
{
	isPossibleChangeScreen	= true if mp.changescreen === true;
	var curfullscreen	= false;
	curfullscreen <-> fullScreen;	//	フルスクリーン状態を解除
	//pxWidth = exWidth = size[0];
	//pxHeight = exHeight = size[1];
@if(ZOOM_WINDOW)
	setInnerSize(innerWidth, innerHeight);	//	ウィンドウのクライアントサイズを変更
@endif
@if(!ZOOM_WINDOW)
	setSize(originalResWidth, originalResHeight);
	setInnerSize(originalResWidth, originalResHeight);
	setZoom(1, 1);
@endif

@if(ZOOM_WINDOW)
	addHook("afterChangeScreenMode", fullScreenAfterChangeScreenMode) if curfullscreen;
@endif
@if(!ZOOM_WINDOW)
	curfullscreen <-> fullScreen;	//	フルスクリーン状態を復帰
@endif

	isPossibleChangeScreen	= false if mp.changescreen === false;
};


global.initializeHDPatch = function()
{
@if(HD_MODE)
	if (System.getArgument("-hdscalefactor") !== void)
	{
		hdScaleFactor = +System.getArgument("-hdscalefactor");
	}
	unloadAllHdPatches(this);
	(initializeQuality incontextof this)(hdScaleFactor);
	if (System.getArgument("-wideratio") !== void)
	{
		(initializeWide incontextof this)(System.getArgument("-wideratio") * 1.0);
	}
	else
	{
		(initializeWide incontextof this)(wideRatio);
	}
	changeResolution(this);
@endif
@if(!HD_MODE)
	unloadAllHdPatches(this);
@endif
};
