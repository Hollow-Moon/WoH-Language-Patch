@if(GAME_FATE||GAME_FHAT)
global.originalResWidth = 800;
global.originalResHeight = 600;
@endif
@if(GAME_WOHN)
global.originalResWidth = 1024;
global.originalResHeight = 576;
@endif

global.isCropped = false;
global.cropFactor = 1;
@if(GAME_FATE||GAME_FHAT)
global.cubicRatio = 4/3;
@endif
@if(GAME_WOHN)
global.cubicRatio = 16/9;
@endif
global.standardWideRatio = 16/9;

@if(GAME_FATE)
global.hdPatchesNames = [
	global.devMode? "ImagesSD" : "sd", // 800x600
	global.devMode? "ImagesHD" : "hd", // 1280x960
	global.devMode? "ImagesHD_1600" : "hd_1600", // 1600x1200
	global.devMode? "ImagesHD_1920" : "hd_1920", // 1920x1440
	global.devMode? "ImagesHD_2400" : "hd_2400", // 2400x1800
	global.devMode? "ImagesHD_3200" : "hd_3200" // 3200x2400
];
global.scaleFactors = [1, 1.6, 2, 2.4, 3, 4];
global.hdNames = ["sd", "hd", "hd_1600", "hd_1920", "hd_2400", "hd_3200"];
global.renderScaleFactors = [0.25, 0.5, 1, 2];
@endif
@if(GAME_FHAT)
global.hdPatchesNames = [
	global.devMode? "ImageSD" : "SD",
	global.devMode? "ImageHD" : "HD",
	global.devMode?  "ImageHD2" : "FHD",
];
global.scaleFactors = [1, 2, 4];
global.hdNames = ["sd", "hd", "fhd"];
global.renderScaleFactors = [0.25, 0.5, 1, 2];
@endif
@if(GAME_WOHN)
global.hdPatchesNames = [
	global.devMode? "ImageSD" : "SD",
	global.devMode? "ImageHD" : "HD",
	global.devMode?  "ImageHD2" : "FHD",
];
global.scaleFactors = [1, 2, 4];
global.hdNames = ["sd", "hd", "fhd"];
global.renderScaleFactors = [0.25, 0.5, 1, 2];
@endif

global.scaleFactorsToPatchName = %[];
global.scaleFactorsToHdNames = %[];
for (var i=0; i<global.scaleFactors.count; i++) {
	global.scaleFactorsToPatchName[global.scaleFactors[i]] = global.hdPatchesNames[i];
	global.scaleFactorsToHdNames[global.scaleFactors[i]] = global.hdNames[i];
}

global.get_wideHdPatchName = function(kag=global.kag) { { return get_hdPatchName(kag) + "_wide"; } };
global.get_widePatchName = function() { { return global.devMode? "ImagesPatch" : global.mainPatchName; } };
global.widePatchName = "wide";
global.wideFolderName = "wide";
global.calculateAnyWidePatchExists = function() {
	if (global.patchExists(widePatchName)) {
		return true;
	}
	for (var i=0; i<hdPatchesNames.count; i++) {
		if (global.patchExists(hdPatchesNames[i] + "_wide")) {
			return true;
		}
	}
	return false;
};
global.isAnyWidePatchExists = calculateAnyWidePatchExists();

global.hdScaleFactorFlagName = "hdScaleFactor";
global.hdRenderScaleFactorFlagName = "hdRenderScaleFactor";
global.wideScreenFlagName = "wideScreen";
global.autoWideRatioFlagName = "autoWideRatio";
global.wideRatioFlagName = "wideRatio";

global.devImageFolders = ["ImagesPatch"];

@if(!GAME_FHAT)
global.devHdImageFolders = [];
@endif
@if(GAME_FHAT)
global.devHdImageFolders = ["BGImageHD", "FGImageHD", "ImageHD", "ImagesConfigHD", "ImagesPatchHD", "ImagesHanafudaHD", "RuleHD"];
@endif

global.scale_types_list = [];
global.scale_types_dict = %[];
global.upscale_type_default = "stCubic";
global.downscale_type_default = "stCubic";
global.scale_type_exbuttonlayer = "stLinear";

global.get_systemRatio = function() { { return global.System.screenWidth / global.System.screenHeight; } };

global.get_hdScaleFactor = function(kag=global.kag) { return (typeof(kag.hdScaleFactor) !== "undefined") ? kag.hdScaleFactor : 1; };
global.get_hdAssetScaleFactor = function(kag=global.kag) { return (typeof(kag.hdAssetScaleFactor) !== "undefined") ? kag.hdAssetScaleFactor : 1; };

global.get_inverseScaleFactor = function(kag=global.kag) { { return 1/global.get_hdScaleFactor(kag); } };
global.get_inverseWideFactor = function(kag=global.kag) { { return 1/kag.wideFactor; } };
global.get_inverseCubicRatio = function() { { return 1/global.cubicRatio; } };
global.get_wideScaleFactor = function(kag=global.kag) { { return global.get_hdScaleFactor(kag) * kag.wideFactor; } };

global.get_hdPatchName = function(kag=global.kag) { { return global.scaleFactorsToPatchName[global.get_hdAssetScaleFactor(kag)]; } };
global.get_hdFolderName = function(kag=global.kag) { { return global.scaleFactorsToHdNames[global.get_hdAssetScaleFactor(kag)]; } };
global.get_hdFolderSuffix = function(kag=global.kag) { { return "-" + global.get_hdFolderName(kag); } };
global.get_hdPatchSuffix = function(kag=global.kag) { { return "_" + global.get_hdFolderName(kag); } };

global.addHdPaths = function(kag=global.kag, patches_arr, patchName, folder="", innerPath="", addHd, addWide)
{
	addHd = kag.isHd if addHd === void;
	addWide = kag.wideScreen if addWide === void;
	var separator = folder === ""? "" : "-";
	for (var i = 0; i < global.hdNames.count; i++) {
@if(HD_MODE)
		patches_arr.add([patchName, folder + separator + global.hdNames[i] + innerPath]) if addHd;
@endif
		patches_arr.add([patchName, folder + separator + global.hdNames[i] + "-" + global.wideFolderName + innerPath]) if addWide;
		if (global.hdNames[i] == global.get_hdFolderName(kag)) {
			break;
		}
	}
	var patchNameHd = (patchName === global.mainPatchName || (global.devMode && global.devImageFolders.contains(patchName)))? global.get_hdPatchName(kag) : (patchName + global.get_hdPatchSuffix(kag));
	if (patchNameHd === void)
	{
		return;
	}
	if (folder != "") {
		patches_arr.add([patchNameHd, folder + innerPath]) if addHd;
		patches_arr.add([patchNameHd + "_wide", folder + innerPath]) if addWide;
	}
	for (var i = 0; i < global.hdNames.count; i++) {
@if(HD_MODE)
		patches_arr.add([patchNameHd, folder + separator + global.hdNames[i] + innerPath]) if addHd;
@endif
		patches_arr.add([patchNameHd, folder + separator + global.hdNames[i] + "-" + global.wideFolderName + innerPath]) if addWide;
		if (global.hdNames[i] == global.get_hdFolderName(kag)) {
			break;
		}
	}
};
global.addOnlyHdPaths = function(kag, patches_arr, patchName, folder, innerPath, addHd, addWide)
{
	return addHdPaths(kag, patches_arr, patchName, folder, innerPath, true, false);
};
global.addOnlyWidePaths = function(kag, patches_arr, patchName, folder, innerPath, addHd, addWide)
{
	return addHdPaths(kag, patches_arr, patchName, folder, innerPath, false, true);
};

global.unloadAllHdPatches = function(kag=global.kag)
{
	var originalScaleFactor = global.get_hdAssetScaleFactor(kag);

	for (var i = 0; i < global.scaleFactors.count; i++) {
		kag.hdAssetScaleFactor = global.scaleFactors[i];
		global.unloadHdPatch(kag);
	}
	kag.hdAssetScaleFactor = originalScaleFactor;
};

global.getHdPatchesArray = function(kag=global.kag)
{
	var patches_arr = [];
	patches_arr.add([global.get_hdPatchName(kag)]);
	if (global.devMode && global.get_hdAssetScaleFactor(kag) === global.scaleFactors[1]) {
		for (var i = 0, internal_forloop_count = global.devHdImageFolders.count; i < internal_forloop_count; i += 1) {
			patches_arr.add([global.devHdImageFolders[i]]);
		}
	}
	if (typeof(kag) === "Object")
	{
		global.addOnlyHdPaths(kag, patches_arr, global.opPatchName) if global.get_opPatchExists();

		global.addOnlyHdPaths(kag, patches_arr, global.get_widePatchName(), global.wideFolderName) if kag.scflags[global.wideScreenFlagName];
		global.addOnlyHdPaths(kag, patches_arr, widePatchName) if kag.scflags[global.wideScreenFlagName];

		global.addOnlyHdPaths(kag, patches_arr, global.mobileBreakGlyphsPatchName, global.mobileBreakGlyphsFolderName) if kag.sflags[global.mobileBreakGlyphsFlagName];
		global.addOnlyHdPaths(kag, patches_arr, global.mobileWindowPatchName, global.mobileWindowFolderName) if kag.sflags[global.mobileWindowFlagName];
		global.addOnlyHdPaths(kag, patches_arr, global.wideWindowPatchName, global.wideWindowFolderName) if kag.scflags[global.wideScreenFlagName] && kag.sflags[global.wideWindowFlagName];
		global.addOnlyHdPaths(kag, patches_arr, global.wideMobileWindowPatchName, global.wideMobileWindowFolderName) if kag.scflags[global.wideScreenFlagName] && kag.sflags[global.wideWindowFlagName] && kag.sflags[global.mobileWindowFlagName];

		global.addOnlyHdPaths(kag, patches_arr, global.maturePatchName, global.uncensoredMatureFolderName) if kag.sflags[global.matureFlagName];
		global.addOnlyHdPaths(kag, patches_arr, global.ecchiPatchName, global.uncensoredEcchiFolderName) if kag.sflags[global.ecchiFlagName];
		global.addOnlyHdPaths(kag, patches_arr, global.hPatchName, global.uncensoredHFolderName) if kag.sflags[global.hFlagName];

		global.addOnlyHdPaths(kag, patches_arr, global.languagePatchName(global.japaneseLanguage), global.imagesFolderName);
		global.addOnlyHdPaths(kag, patches_arr, global.languagePatchName(kag.sflags.language), global.imagesFolderName) if kag.sflags.language !== void && kag.sflags.language !== global.japaneseLanguage;
	}

	return patches_arr;
};

global.loadHdPatch = function(kag=global.kag)
{
	if (kag.isMain === false || global.get_hdPatchName(kag) === void)
	{
		return;
	}
	
	var patches_arr = global.getHdPatchesArray(kag);

	global.load_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		global.updateDecensorConfig(kag);
	}
};

global.unloadHdPatch = function(kag=global.kag)
{
	if (kag.isMain === false || global.get_hdPatchName(kag) === void)
	{
		return;
	}

	var patches_arr = global.getHdPatchesArray(kag);

	global.unload_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(kag) === "Object")
	{
		global.updateDecensorConfig(kag);
	}
};

global.initializeQuality = function(hdAssetScaleFactor, hdRenderScaleFactor)
{
	global.unloadHdPatch(this);

	this.hdAssetScaleFactor = hdAssetScaleFactor;
	this.hdRenderScaleFactor = hdRenderScaleFactor;

	global.loadHdPatch(this);
};

global.getWidePatchesArray = function(kag=global.kag)
{
	var patches_arr = [];
	global.addOnlyWidePaths(kag, patches_arr, global.get_widePatchName());

	patches_arr.add([global.wideWindowPatchName, global.wideWindowFolderName]) if kag.sflags[global.wideWindowFlagName];
	patches_arr.add([global.wideMobileWindowPatchName, global.wideMobileWindowFolderName]) if kag.sflags[global.wideWindowFlagName] && kag.sflags[global.mobileWindowFlagName];
	global.addOnlyHdPaths(kag, patches_arr, global.wideWindowPatchName, global.wideWindowFolderName) if kag.sflags[global.wideWindowFlagName];
	global.addOnlyHdPaths(kag, patches_arr, global.wideMobileWindowPatchName, global.wideMobileWindowFolderName) if kag.sflags[global.wideWindowFlagName] && kag.sflags[global.mobileWindowFlagName];

	patches_arr.add([global.widePatchName]);
	patches_arr.add([global.widePatchName, global.wideWindowFolderName]) if kag.sflags[global.wideWindowFlagName];
	patches_arr.add([global.widePatchName, global.wideMobileWindowFolderName]) if kag.sflags[global.wideWindowFlagName] && kag.sflags[global.mobileWindowFlagName];
	patches_arr.add([global.get_wideHdPatchName(kag)]);
	patches_arr.add([global.get_wideHdPatchName(kag), global.wideWindowFolderName]) if kag.sflags[global.wideWindowFlagName];
	patches_arr.add([global.get_wideHdPatchName(kag), global.wideMobileWindowFolderName]) if kag.sflags[global.wideWindowFlagName] && kag.sflags[global.mobileWindowFlagName];

	global.addOnlyWidePaths(kag, patches_arr, global.opPatchName) if global.get_opPatchExists();
	global.addOnlyWidePaths(kag, patches_arr, global.maturePatchName, global.uncensoredMatureFolderName) if kag.sflags[global.matureFlagName];
	global.addOnlyWidePaths(kag, patches_arr, global.ecchiPatchName, global.uncensoredEcchiFolderName) if kag.sflags[global.ecchiFlagName];
	global.addOnlyWidePaths(kag, patches_arr, global.hPatchName, global.uncensoredHFolderName) if kag.sflags[global.hFlagName];
	global.addOnlyWidePaths(kag, patches_arr, global.languagePatchName(global.japaneseLanguage), global.imagesFolderName);
	global.addOnlyWidePaths(kag, patches_arr, global.languagePatchName(kag.sflags.language), global.imagesFolderName) if kag.sflags.language !== void && kag.sflags.language !== global.japaneseLanguage;

	return patches_arr;
};

global.initializeWide = function(ratio)
{
	this.wideScreen = ratio > global.cubicRatio;
	this.wideRatio = ratio;

	if (this.isMain !== false)
	{
		var patches_arr = global.getWidePatchesArray(this);

		if (this.wideScreen)
		{
			global.load_patches(patches_arr);
		}
		else
		{
			global.unload_patches(patches_arr);
		}
	}
};

global.onQualityMenuItemClick = function(sender)
{
	{
		var w = sender.owner;
		var changed = false;
		var should_reload = false;
		var hdAssetScaleFactor = w.hdAssetScaleFactor;
		var hdRenderScaleFactor = w.hdRenderScaleFactor;
		var extra_args = [];
		if (typeof(sender.hdAssetScaleFactor) !== "undefined" && sender.hdAssetScaleFactor !== hdAssetScaleFactor)
		{
			hdAssetScaleFactor = sender.hdAssetScaleFactor;
			extra_args.add("-hdassetscalefactor=" + global.number_to_hex_string(hdAssetScaleFactor));
			should_reload = true;
		}
		if (typeof(sender.hdRenderScaleFactor) !== "undefined" && sender.hdRenderScaleFactor !== hdRenderScaleFactor)
		{
			hdRenderScaleFactor = sender.hdRenderScaleFactor;
			extra_args.add("-hdrenderscalefactor=" + global.number_to_hex_string(hdRenderScaleFactor));
			should_reload = true;
		}
@if(!KIRIKIROID&&!KIRIKIRISDL2)
		if (extra_args.count > 0)
		{
			global.full_game_reload(extra_args*);
			// Should be unreachable here
		}
@endif
		if (should_reload)
		{
			w.extraConductor.clear();
			w.lineBreak.loadedImage = null;
			w.pageBreak.loadedImage = null;
			w.reload_scenario_prepare();
			(global.initializeQuality incontextof w)(hdAssetScaleFactor, hdRenderScaleFactor);
			changed = true;
			sender.checked = true;
		}
		if (changed)
		{
			global.changeResolution(sender.owner);
			w.reload_scenario_execute();
		}
	}
};

global.onWideMenuItemClick = function(sender, ratio, cropped=false)
{
	if (ratio == "standard") {
		ratio = global.cubicRatio;
	} else if (ratio == "wide") {
		ratio = global.get_systemRatio();
	}
	
	if (ratio !== void && !global.floatEquals(ratio, sender.owner.wideRatio))
	{
@if(!KIRIKIROID&&!KIRIKIRISDL2)
		{
			global.full_game_reload("-wideratio=" + global.real_to_hex_string(ratio));
		}
@endif
		{
			var w = sender.owner;
			w.extraConductor.clear();
			w.reload_scenario_prepare();
			(global.initializeWide incontextof sender.owner)(ratio);
			global.changeResolution(sender.owner);
			w.reload_scenario_execute();
		}
	}
	if (cropped != global.isCropped)
	{
		{
			var w = sender.owner;
@if(SCALE_USING_FLOATING_POINT)
			if (cropped)
			{
				global.isCropped = true;
				global.cropFactor = 1 / global.cubicRatio;
			}
			else
@endif
			{
				global.isCropped = false;
				global.cropFactor = 1;
			}

			w.extraConductor.clear();
			w.reload_scenario_prepare();

			w.setSize(w.width, w.height);

			w.reload_scenario_execute();
		}
	}

	sender.checked = true;
};

global.changeResolution = function(win)
{
	{
		var w = win;
		(global.updateResolution incontextof win)(%[]);
		if (typeof(w._primaryLayer) === "Object")
		{
			w._primaryLayer.update_bounds_hd_layer();
		}
		if (typeof(w.hintlayer) === "Object")
		{
			invalidate w.hintlayer;
			w.hintlayer = void;
		}
		if (typeof(global.flow_tracker_object) === "Object" && typeof(global.flow_tracker_object.isTest) === "Integer" && global.flow_tracker_object.isTest)
		{
			global.flow_tracker_object.isTest = false;
			global.flow_tracker_object.isTest = true;
		}
@if(!ZOOM_WINDOW)
		w.setSize(global.originalResWidth, global.originalResHeight);
		w.setInnerSize(global.originalResWidth, global.originalResHeight);
@endif
	}
};

global.updateResolution = function(mp)
{
	this.isPossibleChangeScreen	= true if mp.changescreen === true;
	var curfullscreen	= false;
	curfullscreen <-> this.fullScreen;	//	フルスクリーン状態を解除
	//pxWidth = exWidth = size[0];
	//pxHeight = exHeight = size[1];
@if(ZOOM_WINDOW)
	this.setInnerSize(this.innerWidth, this.innerHeight);	//	ウィンドウのクライアントサイズを変更
@endif
@if(!ZOOM_WINDOW)
	this.setSize(global.originalResWidth, global.originalResHeight);
	this.setInnerSize(global.originalResWidth, global.originalResHeight);
	this.setZoom(1, 1);
@endif

@if(ZOOM_WINDOW)
	addHook("afterChangeScreenMode", fullScreenAfterChangeScreenMode) if curfullscreen;
@endif
@if(!ZOOM_WINDOW)
	curfullscreen <-> this.fullScreen;	//	フルスクリーン状態を復帰
@endif

	this.isPossibleChangeScreen	= false if mp.changescreen === false;
};

global.initialize_scale_types = function()
{
	var scale_types_list = global.scale_types_list;
	if (scale_types_list.count !== 0)
	{
		return;
	}

	var def_func = global.layer_stretch_copy_wrapper;
	var x = function(ident, desc, updownscale)
	{
		var scale_types_list = global.scale_types_list;
		if (typeof(global[ident]) === "Integer")
		{
			scale_types_list.add([ident, global.layer_stretch_copy_wrapper, [global[ident]], desc, updownscale]);
		}
	};
	x(/* In Kirikiri 2 */ "stNearest", global.__t("最近傍点"), 1 | 2);
	x(/* In Kirikiri 2 */ "stFastLinear", global.__t("低精度の線形"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stSemiFastLinear", global.__t("固定小数線形"), 1 | 2);
	x(/* In Kirikiri 2; Implementation changed in Kirikiri Z version >= 1.3 */ "stLinear", global.__t("線形"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastCubic", global.__t("固定小数３次元"), 1 | 2);
	x(/* In Kirikiri 2; Implementation changed in Kirikiri Z version >= 1.3 */ "stCubic", global.__t("３次元"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastLanczos2", global.__t("固定小数Lanczos 4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stLanczos2", global.__t("Lanczos 4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastLanczos3", global.__t("固定小数Lanczos 6x6"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stLanczos3", global.__t("Lanczos 6x6"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastSpline16", global.__t("固定小数スプライン4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stSpline16", global.__t("スプライン4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastSpline36", global.__t("固定小数スプライン6x6"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stSpline36", global.__t("スプライン6x6"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3; Downscale only */ "stFastAreaAvg", global.__t("固定小数面積平均縮小"), 2);
	x(/* In Kirikiri Z version >= 1.3; Downscale only */ "stAreaAvg", global.__t("面積平均縮小"), 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastGaussian", global.__t("固定小数ガウス4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stGaussian", global.__t("ガウス4x4"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stFastBlackmanSinc", global.__t("固定小数Blackman-Sinc 8x8"), 1 | 2);
	x(/* In Kirikiri Z version >= 1.3 */ "stBlackmanSinc", global.__t("Blackman-Sinc 8x8"), 1 | 2);

	// Create dict for quick indexing
	var scale_types_dict = global.scale_types_dict;
	for (var i = 0; i < scale_types_list.count; i += 1)
	{
		var scale_type = scale_types_list[i];
		if (scale_type === void)
		{
			continue;
		}
		if (scale_type === "-")
		{
			continue;
		}
		scale_types_dict[scale_type[0]] = scale_type;
	}
};

global.has_scale_type = function(scale_type)
{
	var scale_types_dict = global.scale_types_dict;
	return scale_types_dict[scale_type] !== void;
};

global.set_scale_type = function(scale_type, updownscale)
{
	var wanted_scale_type = scale_type;
	var scale_types_dict = global.scale_types_dict;
	if (scale_types_dict[wanted_scale_type] === void)
	{
		wanted_scale_type = "stCubic";
	}
	if ((updownscale & 1) !== 0)
	{
		global.upscale_type_default = wanted_scale_type;
	}
	if ((updownscale & 2) !== 0)
	{
		global.downscale_type_default = wanted_scale_type;
	}
};

global.layer_stretch_copy_wrapper = function(dlayer, dleft, dtop, dwidth, dheight, slayer, sleft, stop, swidth, sheight, *)
{
	return (global.Layer_patch_hd_layer_original.stretchCopy incontextof dlayer)(dleft, dtop, dwidth, dheight, slayer, sleft, stop, swidth, sheight, *);
};

global.perform_upscale_on_layer = function(dlayer, dleft, dtop, dwidth, dheight, slayer, sleft, stop, swidth, sheight, scale_type)
{
	var scale_types_dict = global.scale_types_dict;
	var x_scale_type = scale_type;
	if (x_scale_type === void)
	{
		if ((dwidth < swidth) && (dheight < sheight))
		{
			x_scale_type = global.downscale_type_default;
		}
		else
		{
			x_scale_type = global.upscale_type_default;
		}
	}
	if (x_scale_type === void)
	{
		return;
	}
	var x_scale_type_info = scale_types_dict[x_scale_type];
	if (x_scale_type_info === void)
	{
		return;
	}
	var x_scale_type_args = x_scale_type_info[2];
	return x_scale_type_info[1](dlayer, dleft, dtop, dwidth, dheight, slayer, sleft, stop, swidth, sheight, x_scale_type_args*);
};

global.initializeHDPatch = function()
{
@if(HD_MODE)
	if (global.System.getArgument("-hdscalefactor") !== void)
	{
		this.hdScaleFactor = +global.System.getArgument("-hdscalefactor");
	}

	if (global.System.getArgument("-hdassetscalefactor") !== void)
	{
		this.hdAssetScaleFactor = +global.System.getArgument("-hdassetscalefactor");
	}

	if (global.System.getArgument("-hdrenderscalefactor") !== void)
	{
		this.hdRenderScaleFactor = +global.System.getArgument("-hdrenderscalefactor");
	}

	if (this.hdAssetScaleFactor > 2.4 && global.System.exeBits == 32) {
		this.hdAssetScaleFactor = 1;
	}

	for (var i=global.scaleFactors.count-1; i>=0; i--) {
		if (global.scaleFactors[i] === 1)
		{
			continue;
		}
		if (global.scaleFactors[i] == this.hdAssetScaleFactor) {
			if (!global.patchExists(global.hdPatchesNames[i])) {
				this.hdAssetScaleFactor = 1;
				break;
			}
		}
	}

	global.initialize_scale_types();

	global.unloadAllHdPatches(this);
	(global.initializeQuality incontextof this)(this.hdAssetScaleFactor, this.hdRenderScaleFactor);
	if (global.System.getArgument("-wideratio") !== void)
	{
		(global.initializeWide incontextof this)(global.System.getArgument("-wideratio") * 1.0);
	}
	else
	{
		(global.initializeWide incontextof this)(this.wideRatio);
	}
	global.changeResolution(this);
@endif
@if(!HD_MODE)
	global.unloadAllHdPatches(this);
@endif
};
