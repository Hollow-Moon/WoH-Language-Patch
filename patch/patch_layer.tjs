
function getFullPathFromStorageIdentifier(storage)
{
	var image_extensions = [".webp", ".png", ".tlg", ".jpg", ".bmp"];
	var file_name = storage;
@if(PREFER_PNG)
	// 特殊 - 先尝试载入PNG 开发用
	var png_file_name = Storages.chopStorageExt(file_name) + ".png";
	if (Storages.isExistentStorage(png_file_name))
	{
		file_name = png_file_name;
	}
@endif

	if (image_extensions.find(Storages.extractStorageExt(file_name)) === -1)
	{
		var file_name_no_ext = Storages.chopStorageExt(storage);
		for (var i = 0; i < image_extensions.count; i += 1)
		{
			var fn = file_name_no_ext + image_extensions[i];
			if (Storages.isExistentStorage(fn))
			{
				file_name = fn;
				break;
			}
		}
	}

	return Storages.getPlacedPath(file_name);
}

global.System_patch_layer_original = System;
class System_patch_layer_override extends System_patch_layer_original
{
	function touchImages(storage, limitbytes=0, timeout=0)
	{
		var storage_fixed = [];
		for (var i = 0; i < storage.count; i += 1)
		{
			var file_name = global.getFullPathFromStorageIdentifier(storage[i]);
			if (file_name !== "")
			{
				storage_fixed.push(file_name);
			}
		}
		return super.touchImages(storage_fixed, limitbytes, timeout);
	}
}
global.System = System_patch_layer_override;

// Layer 类覆盖
global.Layer_patch_layer_original	= Layer;
class Layer_patch_layer_override extends Layer_patch_layer_original
{
	var fontWrapper = void;

	property font
	{
		getter
		{
			return fontWrapper;
		}
	}

	function Layer_patch_layer_override()
	{
		super.Layer(...);
		// Can set default font here.
		fontWrapper = new FontWrapper(super.font, this);
	}

	// 覆盖Layer
	function Layer()
	{
		Layer_patch_layer_override(...);
	}

	property isPrimary
	{
		getter()
		{
			return this === window.primaryLayer || (typeof window.fore !== "undefined" && this === window.fore.base);
		}
	}

	var large_image_warning = false;

	function resize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
			}
			return 0;
		}
		return super.resize(...);
	}

	function setImageSize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
			}
			return 0;
		}
		return super.setImageSize(...);
	}

	function setSize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
			}
			return 0;
		}
		return super.setSize(...);
	}

	function loadImages(storage, key)
	{
		var file_name = global.getFullPathFromStorageIdentifier(storage);
		if (file_name === "")
		{
			throw new Exception(("Image \"%s\" not found").sprintf(storage));
		}
		return super.loadImages(file_name, key);
	}

@if(DRAWTEXT_ESCAPE)
	function drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy, language=global.kag.sflags.language)
	{
		var fontToSpecialCharacters = languageSettings[language]["special_characters"];
@if(!KIRIKIROID)
		if (fontToSpecialCharacters === void || fontToSpecialCharacters[font.face] === void)
@endif
		{
			return super.drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
		}
		var specialCharacters = fontToSpecialCharacters[font.face][0];
		var alternativeFontFace = fontToSpecialCharacters[font.face][1];

		var x = 0;
		for (var i=0; i<text.length; i++) {
			var character = text[i];
			if (specialCharacters.contains(character)) {
				var previousFontFace = font.face;
				font.face = alternativeFontFace;
				super.drawText(left+x, top, character, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
@if(!HD_MODE)
				x += font.getTextWidth(character);
@endif
@if(HD_MODE)
				x += font.getTextWidth(character) * widthScale;
@endif
				font.face = previousFontFace;
			} else {
				super.drawText(left+x, top, character, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
@if(!HD_MODE)
				x += font.getTextWidth(character);
@endif
@if(HD_MODE)
				x += font.getTextWidth(character) * widthScale;
@endif
			}
		}
	}
@endif
}
global.Layer = Layer_patch_layer_override;

global.Window_patch_layer_original	= Window;
class Window_patch_layer_override extends Window_patch_layer_original
{
	var isActive = true;

	function onActivate() {
		isActive = true;
	}

	function onDeactivate() {
		isActive = false;
	}
}
global.Window = Window_patch_layer_override;
