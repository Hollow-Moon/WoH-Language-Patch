
global.image_extensions = [".webp", ".png", ".tlg", ".jpg", ".bmp"];

function chop_image_extension(storage)
{
	var image_extensions = global.image_extensions;

	if (image_extensions.find(global.Storages.extractStorageExt(storage)) === -1)
	{
		var file_name_no_ext = storage;
		var file_name_len = storage.length;

		for (var i = 0; i < image_extensions.count; i += 1)
		{
			var file_name_ext_pos = file_name_no_ext.indexOf(image_extensions[i]);
			if ((file_name_ext_pos !== -1) && (file_name_ext_pos + image_extensions[i].length === file_name_len))
			{
				file_name_no_ext = file_name_no_ext.substring(0, file_name_ext_pos);
				break;
			}
		}
		return file_name_no_ext;
	}


	return storage;
}

function get_file_name_of_image_with_extension_that_exists(storage)
{
	var image_extensions = global.image_extensions;

	if (image_extensions.find(global.Storages.extractStorageExt(storage)) === -1)
	{
		var file_name_no_ext = storage;
		var file_name_len = storage.length;

		for (var i = 0; i < image_extensions.count; i += 1)
		{
			var file_name_ext_pos = file_name_no_ext.indexOf(image_extensions[i]);
			if ((file_name_ext_pos !== -1) && (file_name_ext_pos + image_extensions[i].length === file_name_len))
			{
				file_name_no_ext = file_name_no_ext.substring(0, file_name_ext_pos);
				break;
			}
		}
		for (var i = 0; i < image_extensions.count; i += 1)
		{
			var fn = file_name_no_ext + image_extensions[i];
			if (global.Storages.isExistentStorage(fn))
			{
				return fn;
			}
		}
	}


	return storage;
}

function check_if_image_exists(storage)
{
	return global.Storages.isExistentStorage(global.get_file_name_of_image_with_extension_that_exists(storage));
}

function get_full_path_of_image(storage)
{
	var path = global.get_file_name_of_image_with_extension_that_exists(storage);
	if (path === void)
	{
		return path;
	}
	return global.Storages.getPlacedPath(path);
}

global.Storages.isExistentImage = function(storage)
{
	return global.check_if_image_exists(storage);
};

function isExistentImage(storage)
{
	return global.check_if_image_exists(storage);
}

function getExistImageName(storage)
{
	return global.get_full_path_of_image(storage);
}

global.System.touchImages_patch_layer_original = global.System.touchImages;
global.System.touchImages = function(storage, limitbytes=0, timeout=0)
{
	var storage_fixed = [];
	for (var i = 0; i < storage.count; i += 1)
	{
		var file_name = global.get_full_path_of_image(storage[i]);
		if (file_name !== "")
		{
			storage_fixed.push(file_name);
		}
	}
	return global.System.touchImages_patch_layer_original(storage_fixed, limitbytes, timeout);
};

global.layer_tagdata_replacement = %[];

@if(GAME_WOHN)
{
	global.layer_tagdata_replacement = global.Scripts.evalStorage("patch_wohn_image_tagdata.ksc");
}
@endif

// Layer 类覆盖
global.Layer_patch_layer_original	= Layer;
class Layer_patch_layer_override extends Layer_patch_layer_original
{
	var fontWrapper = void;

	property font
	{
		getter
		{
			return fontWrapper;
		}
	}

	function Layer_patch_layer_override()
	{
		super.Layer(...);
		// Can set default font here.
		fontWrapper = new FontWrapper(super.font, this);
	}

	// 覆盖Layer
	function Layer()
	{
		Layer_patch_layer_override(...);
	}

	property isPrimary
	{
		getter()
		{
			return this === window.primaryLayer || (typeof window.fore !== "undefined" && this === window.fore.base);
		}
	}

	var large_image_warning = false;

	function resize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = Scripts.getTraceString();
				if (trace_string !== "")
				{
					dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.resize(...);
	}

	function setImageSize(w, h)
	{
		if (w > 65535 || w <= 0 || h > 65535 || h <= 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = Scripts.getTraceString();
				if (trace_string !== "")
				{
					dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.setImageSize(...);
	}

	function setSize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!large_image_warning)
			{
				large_image_warning = true;
				dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = Scripts.getTraceString();
				if (trace_string !== "")
				{
					dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.setSize(...);
	}

	function loadImages(storage, key)
	{
		var file_name = global.get_full_path_of_image(storage);
		if (file_name === "")
		{
			throw new Exception(("Image \"%s\" not found").sprintf(storage));
		}
		var res = super.loadImages(file_name, key);
		var replacement_tagdata = global.layer_tagdata_replacement[Storages.chopStorageExt(Storages.extractStorageName(file_name))];
		if (replacement_tagdata !== void)
		{
			if (res === null)
			{
				res = %[];
			}
			(global.Dictionary.assign incontextof res)(replacement_tagdata, false);
		}
		return res;
	}

	function saveLayerImage(storage, type)
	{
		storage = global.Storages.getFullPath(storage);
		return super.saveLayerImage(storage, type);
	}

@if(DRAWTEXT_ESCAPE)
	function drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy, language=(typeof(global.kag) === "Object" ? global.kag.sflags.language : this.window.sflags.language))
	{
		var fontToSpecialCharacters = languageSettings[language]["special_characters"];
@if(!KIRIKIROID)
		if (fontToSpecialCharacters === void || fontToSpecialCharacters[font.face] === void)
@endif
		{
			return super.drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
		}
		var specialCharacters = fontToSpecialCharacters[font.face][0];
		var alternativeFontFace = fontToSpecialCharacters[font.face][1];

		var x = 0;
		for (var i=0; i<text.length; i++) {
			var character = text[i];
			if (specialCharacters.contains(character)) {
				var previousFontFace = font.face;
				font.face = alternativeFontFace;
				super.drawText(left+x, top, character, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
@if(!HD_MODE)
				x += font.getTextWidth(character);
@endif
@if(HD_MODE)
				x += font.getTextWidth(character) * widthScale;
@endif
				font.face = previousFontFace;
			} else {
				super.drawText(left+x, top, character, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
@if(!HD_MODE)
				x += font.getTextWidth(character);
@endif
@if(HD_MODE)
				x += font.getTextWidth(character) * widthScale;
@endif
			}
		}
	}
@endif
}
global.Layer = Layer_patch_layer_override;

global.Window_patch_layer_original	= Window;
class Window_patch_layer_override extends Window_patch_layer_original
{
	var isActive = true;

	function onActivate() {
		isActive = true;
	}

	function onDeactivate() {
		isActive = false;
	}

@if(kirikiriz)
	function onMouseMove(x, y)
	{
		if (typeof this.fullScreened !== "undefined" && fullScreened) {
			var systemRatio = System.screenWidth / System.screenHeight;
@if(HD_MODE)
			var wideRatio = this.wideRatio;
@endif
@if(!HD_MODE)
			var wideRatio = 4/3;
@endif
			var h = systemRatio >= wideRatio? System.screenHeight : System.screenWidth*(1/wideRatio);
			var screenTop = Math.ceil((h-System.screenHeight)/2);
			
			if (y > screenTop) {
				if(typeof(this.menu) != "undefined")
					menu.visible = false;
			}
			else if (y <= screenTop) {
				if(typeof(this.menu) != "undefined")
					menu.visible = true;
			}
		}
		super.onMouseMove(...);
	}
@endif
}
global.Window = Window_patch_layer_override;
