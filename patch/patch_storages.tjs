
{
	Storages.isExistentStorage_patch_storages_original = Storages.isExistentStorage;
	Storages.isExistentStorage = function(storage)
	{
		if ((storage === void) || (storage == null))
		{
			return false;
		}
@if(kirikiriz)
		if (storage.trim() === "")
		{
			return false;
		}
@endif

		return isExistentStorage_patch_storages_original(...);
	} incontextof Storages;
}

{
	// TODO: clean out the auto path table
	global.paths_base = [];
	var paths_base = global.paths_base;
	var paths_to_add = [];
	var paths_to_remove = [];
	var paths = [
		"voice",
		"video",
		"others",
		"etc",
		"rule",
		"sound",
		"bgm",
		"fg",
		"fgimage",
		"bg",
		"bgimage",
		"event",
		"scenario",
		"image",
		"system",
		"plugin",
		"override",
		"update",
		"patch"
	];
	var arcdelim = System.getArgument("-arcdelim");
	if (!arcdelim)
	{
		arcdelim = ">";
	}
	if ((typeof(Storages.dirlist) !== "Object") || (typeof(Storages.isExistentDirectory) !== "Object"))
	{
		if (Storages.isExistentStorage("fstat.dll"))
		{
			Plugins.link("fstat.dll");
		}
	}
	paths_base.add(Storages.getFullPath("../"));

	global.paths_base_dirlist = %[];
	var paths_base_dirlist = global.paths_base_dirlist;
	var paths_search_append = [
		"data",
		"patch",
		"content-data"
	];

	for (var i = 0; i < paths_base.count; i += 1)
	{
		paths_base_dirlist[paths_base[i]] = %[];
		paths_base_dirlist[paths_base[i]]["."] = global.Storages.dirlist(paths_base[i] + "/");
		for (var j = 0; j < paths_base_dirlist[paths_base[i]]["."].count; j += 1)
		{
			paths_base_dirlist[paths_base[i]]["."][j] = paths_base_dirlist[paths_base[i]]["."][j].toLowerCase();
		}
		for (var j = 0; j < paths_search_append.count; j += 1)
		{
			if (paths_base_dirlist[paths_base[i]]["."].find(paths_search_append[j] + "/") !== -1)
			{
				paths_base_dirlist[paths_base[i]][paths_search_append[j]] = global.Storages.dirlist(paths_base[i] + "/" + paths_search_append[j] + "/");
			}
			else
			{
				paths_base_dirlist[paths_base[i]][paths_search_append[j]] = [];
			}
			for (var k = 0; k < paths_base_dirlist[paths_base[i]][paths_search_append[j]].count; k += 1)
			{
				paths_base_dirlist[paths_base[i]][paths_search_append[j]][k] = paths_base_dirlist[paths_base[i]][paths_search_append[j]][k].toLowerCase();
			}
		}
	}

	var paths_to_search_patchnums = [
		"%s.xp3",
		"data",
		".",
		"patch",
		"content-data",
	];
	for (var i = 2; i < 50; i += 1)
	{
		var path = "patch" + i;
		var found = false;
		for (var j = 0; j < paths_to_search_patchnums.count && typeof(paths_to_search_patchnums[j]) === "String"; j += 1)
		{	
			for (var k = 0; k < paths_base.count; k += 1)
			{
				var path = path;
				var path_to_search = paths_to_search_patchnums[j];
				if (path_to_search.indexOf("%s") !== -1)
				{
					path = path_to_search.sprintf(path);
					path_to_search = ".";
				}
				var path_dirlist = paths_base_dirlist[paths_base[k]][path_to_search];
				if (path_dirlist.find(path + "/") !== -1 || path_dirlist.find(path) !== -1)
				{
					found = true;
					break;
				}
			}
			if (found)
			{
				break;
			}
		}
		if (found)
		{
			paths.add(path);
		}
		else
		{
			break;
		}
	}
	var paths_to_search = [
		"data.xp3" + arcdelim + "%s",
		"%s.xp3",
		"data",
		".",
		"patch",
		"content-data",
	];

	for (var i = 0; i < paths_to_search.count && typeof(paths_to_search[i]) === "String"; i += 1)
	{
		for (var j = 0; j < paths.count; j += 1)
		{
			for (var k = 0; k < paths_base.count; k += 1)
			{
				var path = paths[j];
				var path_to_search = paths_to_search[i];
				if (path_to_search.indexOf("%s") !== -1)
				{
					path = path_to_search.sprintf(paths[j]);
					path_to_search = ".";
				}
				var path_dirlist = paths_base_dirlist[paths_base[k]][path_to_search];
				var spos = path_to_search.indexOf(arcdelim);
				paths_to_remove.add(paths_base[k] + "/" + path_to_search + "/" + path + "/");
				paths_to_remove.add(paths_base[k] + "/" + path_to_search + "/" + path + arcdelim);
				if (spos !== -1)
				{
					if (path_dirlist.find(path.substring(0, spos)) !== -1)
					{
						paths_to_add.add(paths_base[k] + "/" + path_to_search + "/" + path + "/");
					}
				}
				else
				{
					if (path_dirlist.find(path + "/") !== -1)
					{
						paths_to_add.add(paths_base[k] + "/" + path_to_search + "/" + path + "/");
					}
					else if (path_dirlist.find(path) !== -1)
					{
						paths_to_add.add(paths_base[k] + "/" + path_to_search + "/" + path + arcdelim);
					}
				}
			}
		}
	}

	if (devMode)
	{
		var devpaths = [
			"../common/plugin",
			"../common/pluginpatch",
			"../common/imageshistory",
			"patch",
			"etc",
			"others",
			"voice",
			"rule",
			"sound",
			"se",
			"bgm",
			"fgimage",
			"bgimage",
			"scenario",
			"image",
			"video",
			"system",
			"plugin",
			"pluginpatch",
			"op",
			"ImagesPatch",
			"ImagesConfig",
			"SEPatch",
@if(GAME_FHAT)
			"voicehanafuda",
			"voicehanafuda2",
			"imagesvita",
			"imageshanafuda",
			"bgm_patch",
			"bgm_vita",
@endif
@if(GAME_FATE)
			"bgm_patch",
			"ImagesClassic",
			"ImagesPS2",
			"ImagesTitle",
			"ImagesSD",
			"ImagesScene",
			"ImagesTrial",
			"BGM_Classic",
			"BGM_Remixed",
			"BGM_PS2",
			"Voice_patch",
			"SoundPatch",
			"Decensor",
@endif
		];
		for (var i = 0; i < devpaths.count && typeof(devpaths[i]) === "String"; i += 1)
		{
			for (var j = 0; j < paths_base.count; j += 1)
			{
				var path = paths_base[j] + devpaths[i] + "/";
				paths_to_remove.add(path);
@if(!KIRIKIROID)
				if (Storages.isExistentDirectory(path))
				{
					paths_to_add.add(path);
				}
@endif
			}
		}
	}

@if(!DEBUG)
	for (var i = 0; i < paths_base.count; i += 1)
	{
		var files = paths_base_dirlist[paths_base[i]]["."];
		var patches = [];
		for (var j = 0; j < files.count; j += 1)
		{
			var fn = files[j];
			if (fn.substr(0, 6) === "patch_" && Storages.extractStorageExt(fn) === ".xp3")
			{
				patches.add(fn);
			}
		}
		patches.sort("a");
		for (var j = 0; j < patches.count; j += 1)
		{
			var path = paths_base[i] + patches[j] + arcdelim;
			paths_to_remove.add(path);
			paths_to_add.add(path);
		}
	}
@endif
	for (var i = 0; i < paths_to_remove.count; i += 1)
	{
		Storages.removeAutoPath(paths_to_remove[i]);
	}

	for (var i = 0; i < paths_to_add.count; i += 1)
	{
		Storages.addAutoPath(paths_to_add[i]);
		Debug.message("Adding to auto path: " + paths_to_add[i]);
	}
}
