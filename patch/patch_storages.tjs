
{
@if(0)
	global.Storages.removeAutoPath_patch_storages_original = global.Storages.removeAutoPath;
	global.Storages.removeAutoPath = function(path)
	{
		global.Debug.message("Removing to auto path: " + path + " : " + global.Scripts.getTraceString());
		return global.Storages.removeAutoPath_patch_storages_original(...);
	};

	global.Storages.addAutoPath_patch_storages_original = global.Storages.addAutoPath;
	global.Storages.addAutoPath = function(path)
	{
		global.Debug.message("Adding to auto path: " + path + " : " + global.Scripts.getTraceString());
		return global.Storages.addAutoPath_patch_storages_original(...);
	};
@endif
	global.string_trim_regex = /(\s+$|^\s+)/g;
	global.Storages.isExistentStorage_patch_storages_original = global.Storages.isExistentStorage;
	global.Storages.isExistentStorage = function(storage)
	{
		if ((storage === void) || (storage === null))
		{
			return false;
		}
		if (global.string_trim_regex.replace(storage, "") === "")
		{
			return false;
		}

		return global.Storages.isExistentStorage_patch_storages_original(storage);
	};

	// Stub out dirlist.dll so that outdated update archives don't get loaded.
	global.Plugins.link_patch_storages_nodirlist_original = global.Plugins.link;
	global.Plugins.link = function(storage)
	{
		if (storage === "dirlist.dll")
		{
			return;
		}
		return global.Plugins.link_patch_storages_nodirlist_original(...);
	};
	global.Plugins.unlink_patch_storages_nodirlist_original = global.Plugins.unlink;
	global.Plugins.unlink = function(storage)
	{
		if (storage === "dirlist.dll")
		{
			return;
		}
		return global.Plugins.unlink_patch_storages_nodirlist_original(...);
	};
	global.getDirList = function(directory)
	{
		return [];
	};
}

{
	global.cxdec_encryption_list = %[];
	global.archive_path_mapping = %[];
	global.archive_path_to_fullpath = %[];
	global.on_corrupt_archive_failure = function(e, arc_path_failed)
	{
		var exception_message = "Unknown error";
		if (typeof(e) === "Object" && isvalid(e))
		{
			if (typeof(e.message) == "String")
			{
				exception_message = e.message;
			}
		}
		var msg_components = [];
		msg_components.add("It appears that a downloaded archive file has been corrupted.");
		msg_components.add("This issue may be caused by canceling the download before it has finished.");
		if (typeof(arc_path_failed) === "String")
		{
			msg_components.add("Offending file: " + arc_path_failed);
		}
		msg_components.add("Please redownload the specified archive file from the project webpage.");
		msg_components.add("");
		msg_components.add("The following script error occurred while attempting to read the archive file.");
		msg_components.add("--------------------------------------------------------------------------------");
		msg_components.add(exception_message);
		msg_components.add("--------------------------------------------------------------------------------");
		msg_components.add(("Support forum thread: %s").sprintf(global.PatchInfoURL));
		var msg = msg_components.join("\n");
		global.System.inform(msg);

@if(!KIRIKIROID)
		if ((typeof(global.devMode) === "Integer" ? !global.devMode : true) && (typeof(global.devMode2) === "Integer" ? !global.devMode2 : true))
		{
			if (global.System.getArgument('-openpatchinfourlonerror') !== "no" && typeof(global.PatchInfoURL) === "String")
			{
				global.System.shellExecute(global.PatchInfoURL);
			}
		}

		global.System.exit(127);
@endif
	};
	global.mount_archive = function(arc_path)
	{
		var archive_path_mapping = global.archive_path_mapping;
		var arc_fullpath = global.Storages.getFullPath(arc_path);
		if (arc_fullpath.length === 0)
		{
			// not valid path
			return "";
		}
		if (typeof(archive_path_mapping[arc_fullpath]) === "String")
		{
			// already mounted
			return "";
		}
		var xp3_res = "";
		if (typeof(global.Storages.mountXP3) === "Object")
		{
			xp3_res = global.Storages.mountXP3(arc_fullpath);
		}
		if (xp3_res.length !== 0)
		{
			archive_path_mapping[arc_fullpath] = xp3_res;
			if (typeof(global.Storages.setEncryptionXP3) === "Object")
			{
				var encryption_to_set = void;
				if (typeof(global.useUnencryptedXP3Archive) !== "Integer" || global.useUnencryptedXP3Archive === false)
				{
@if(GAME_FHAT)
					encryption_to_set = global.cxdec_encryption_list["fha"];
@endif
@if(GAME_WOHN)
					encryption_to_set = global.cxdec_encryption_list["mahoyo"];
@endif
				}
				if (encryption_to_set === void)
				{
					encryption_to_set = "";
				}
				var enc_set_res = global.Storages.setEncryptionXP3(xp3_res, encryption_to_set);
			}
			return xp3_res;
		}
		var zip_res = "";
		if (typeof(global.Storages.mountZIP) === "Object")
		{
			zip_res = global.Storages.mountZIP(arc_fullpath);
		}
		if (zip_res.length !== 0)
		{
			archive_path_mapping[arc_fullpath] = zip_res;
			return zip_res;
		}
		return "";
	};
	global.unmount_archive = function(arc_path)
	{
		var archive_path_mapping = global.archive_path_mapping;
		var arc_fullpath = global.Storages.getFullPath(arc_path);
		if (arc_fullpath.length === 0)
		{
			// not valid path
			return false;
		}
		if (typeof(archive_path_mapping[arc_fullpath]) !== "String")
		{
			// not mounted
			return false;
		}
		if (archive_path_mapping[arc_fullpath].substring(0, 3) === "xp3" && typeof(global.Storages.unmountXP3) === "Object")
		{
			var xp3_res = global.Storages.unmountXP3(archive_path_mapping[arc_fullpath]);
			if (xp3_res)
			{
				delete archive_path_mapping[arc_fullpath];
				return xp3_res;
			}
		}
		if (archive_path_mapping[arc_fullpath].substring(0, 3) === "zip" && typeof(global.Storages.unmountZIP) === "Object")
		{
			var zip_res = global.Storages.unmountZIP(archive_path_mapping[arc_fullpath]);
			if (zip_res)
			{
				delete archive_path_mapping[arc_fullpath];
				return zip_res;
			}
		}
		return false;
	};
	global.translate_archive_path = function(path, check_presence=true)
	{
		var archive_path_mapping = global.archive_path_mapping;
		var arcdelim = global.System.getArgument("-arcdelim");
		if (!arcdelim)
		{
			arcdelim = ">";
		}
		var arcdelim_index = path.indexOf(arcdelim);
		if (arcdelim_index === -1)
		{
			return path;
		}
		var arc_path = path.substring(0, arcdelim_index);
		var archive_path_to_fullpath = global.archive_path_to_fullpath;
		if (archive_path_to_fullpath[arc_path] === void && check_presence === false)
		{
			return path;
		}
		if (archive_path_to_fullpath[arc_path] === void)
		{
			archive_path_to_fullpath[arc_path] = global.Storages.getFullPath(arc_path);
		}
		var arc_mappedpath = archive_path_mapping[archive_path_to_fullpath[arc_path]];
		if (typeof(arc_mappedpath) !== "String")
		{
			var res = "";
			try
			{
				res = global.mount_archive(archive_path_to_fullpath[arc_path]);
			}
			catch (e)
			{
				global.on_corrupt_archive_failure(e, archive_path_to_fullpath[arc_path]);
			}
			if (res === "")
			{
				return path;
			}
			arc_mappedpath = archive_path_mapping[archive_path_to_fullpath[arc_path]];
@if(0)
			throw new Exception("Lazy mounting not implemented");
@endif
		}
		var inarc_path = path.substring(arcdelim_index + 1);
		return arc_mappedpath + "://./" + inarc_path;
	};
}

{
	// TODO: clean out the auto path table
	global.paths_base = [];
	var paths_base = global.paths_base;
	var paths_to_add = [];
	var paths_to_remove = [];
	var paths = [
		"voice",
		"video",
		"others",
		"etc",
		"rule",
		"sound",
		"bgm",
		"fg",
		"fgimage",
		"bg",
		"bgimage",
		"event",
		"scenario",
		"image",
		"system",
		"font",
		"plugin",
		"override",
		"update",
		"patch"
	];
	var arcdelim = global.System.getArgument("-arcdelim");
	if (!arcdelim)
	{
		arcdelim = ">";
	}
	if ((typeof(global.Storages.dirlist) !== "Object") || (typeof(global.Storages.isExistentDirectory) !== "Object"))
	{
		global.Plugins.link("fstat.dll");
	}
	if ((typeof(global.Storages.mountXP3) !== "Object"))
	{
		if (global.get_full_path_of_plugin("krxp3file.dll") !== "")
		{
			global.Plugins.link("krxp3file.dll");
		}
	}
	if ((typeof(global.Storages.mountZIP) !== "Object"))
	{
		if (global.get_full_path_of_plugin("krzipfile.dll") !== "")
		{
			global.Plugins.link("krzipfile.dll");
		}
	}
	{
		if (typeof(global.Storages.loadEncryptionMethodCxdec) === "Object")
		{
			var cxdec_information_path = "patch_cxdec_information.dic";
			try
			{
				if (global.Storages.isExistentStorage(cxdec_information_path))
				{
					var cxdec_encryption_list = global.cxdec_encryption_list;
					var cxdec_information_dic = global.Scripts.evalStorage(cxdec_information_path);
					var ar = [];
					ar.assign(cxdec_information_dic);
					for (var i = 0; i < ar.count; i += 2)
					{
						cxdec_encryption_list[ar[i]] = global.Storages.loadEncryptionMethodCxdec(ar[i+1]);
					}
				}
			}
			catch (e)
			{
				// pass
			}
		}
	}
	var currentpath = global.Storages.getFullPath("./");
	var in_archive = false;
	if (currentpath.indexOf(arcdelim) === -1 && currentpath.indexOf("file:") !== -1)
	{
		var parentpath = global.Storages.getFullPath("../");
		if (parentpath !== "../")
		{
			paths_base.add(parentpath);
		}
	}
	else
	{
		var basepath = global.System.getArgument("-basepath");
		if (basepath !== void)
		{
			paths_base.add(basepath);
		}
		else
		{
			paths_base.add(global.System.exePath);
		}
		in_archive = true;
	}

	global.paths_base_dirlist = %[];
	var paths_base_dirlist = global.paths_base_dirlist;
	var paths_search_append = [
		"data",
		"patch",
		"content-data"
	];

	for (var i = 0, internal_forloop_count = paths_base.count; i < internal_forloop_count; i += 1)
	{
		var path = paths_base[i];
		var dirlist_base = %[];
		paths_base_dirlist[path] = dirlist_base;
		dirlist_base["."] = global.Storages.dirlist(path + "/");
		for (var j = 0, internal_forloop_count = dirlist_base["."].count; j < internal_forloop_count; j += 1)
		{
			dirlist_base["."][j] = dirlist_base["."][j].toLowerCase();
		}
		for (var j = 0, internal_forloop_count = paths_search_append.count; j < internal_forloop_count; j += 1)
		{
			if (dirlist_base["."].find(paths_search_append[j] + "/") !== -1)
			{
				dirlist_base[paths_search_append[j]] = global.Storages.dirlist(path + "/" + paths_search_append[j] + "/");
			}
			else
			{
				dirlist_base[paths_search_append[j]] = [];
			}
			for (var k = 0, internal_forloop_count = dirlist_base[paths_search_append[j]].count; k < internal_forloop_count; k += 1)
			{
				dirlist_base[paths_search_append[j]][k] = dirlist_base[paths_search_append[j]][k].toLowerCase();
			}
		}
	}

	// Gather Mark of the Web contents
	global.paths_base_dirlist_zone_identifier = %[];
	var paths_base_dirlist_zone_identifier = global.paths_base_dirlist_zone_identifier;

	if (global.System.getArgument("-debug_motw") || !(global.devMode || global.devMode2))
	{
		var dirlist_base_arr = [];
		dirlist_base_arr.assign(paths_base_dirlist);
		for (var i = 0; i < dirlist_base_arr.count; i += 2)
		{
			var dirlist_base_arr2 = [];
			dirlist_base_arr2.assign(dirlist_base_arr[i + 1]);

			var dirlist_base_arr2_key = %[];
			paths_base_dirlist_zone_identifier[dirlist_base_arr[i]] = dirlist_base_arr2_key;

			for (var j = 0; j < dirlist_base_arr2.count; j += 2)
			{
				var filelist_ex = %[];
				dirlist_base_arr2_key[dirlist_base_arr2[j]] = filelist_ex;

				var filelist = dirlist_base_arr2[j + 1];
				for (var k = 0; k < filelist.count; k += 1)
				{
					try
					{
						var file = filelist[k];
						var file_zone_identifier = file + ":zone.identifier";
						if (global.Storages.isExistentStorage(file_zone_identifier))
						{
							var file_contents = [];
							file_contents.load(file_zone_identifier);
							filelist_ex[file] = file_contents;
						}
					}
					catch (e)
					{
						// pass
					}
				}
			}

		}
	}

	if (typeof(global.Storages.dirlistEx) === "Object")
	{
		global.paths_base_dirlistex = %[];
		var paths_base_dirlistex = global.paths_base_dirlistex;
		for (var i = 0, internal_forloop_count = paths_base.count; i < internal_forloop_count; i += 1)
		{
			var path = paths_base[i];
			var dirlist_base = %[];
			paths_base_dirlistex[path] = dirlist_base;
			var arr = global.Storages.dirlistEx(path + "/");
			dirlist_base["."] = arr;
			for (var k = 0, internal_forloop_count = arr.count; k < internal_forloop_count; k += 1)
			{
				var item = arr[k];
				if (typeof(item.ctime) === "Object")
				{
					item.ctime = item.ctime.getTime();
				}
				if (typeof(item.mtime) === "Object")
				{
					item.mtime = item.mtime.getTime();
				}
				if (typeof(item.atime) === "Object")
				{
					item.atime = item.atime.getTime();
				}
			}
			for (var j = 0, internal_forloop_count = paths_search_append.count; j < internal_forloop_count; j += 1)
			{
				var arr;
				if (paths_base_dirlist[path]["."].find(paths_search_append[j] + "/") !== -1)
				{
					arr = global.Storages.dirlistEx(path + "/" + paths_search_append[j] + "/");
				}
				else
				{
					arr = [];
				}
				dirlist_base[paths_search_append[j]] = arr;
				for (var k = 0, internal_forloop_count = arr.count; k < internal_forloop_count; k += 1)
				{
					var item = arr[k];
					if (typeof(item.ctime) === "Object")
					{
						item.ctime = item.ctime.getTime();
					}
					if (typeof(item.mtime) === "Object")
					{
						item.mtime = item.mtime.getTime();
					}
					if (typeof(item.atime) === "Object")
					{
						item.atime = item.atime.getTime();
					}
				}
			}
		}
	}

	var paths_to_search_patchnums = [
		"%s.xp3",
		"data",
		".",
		"patch",
		"content-data",
	];
	for (var i = 2; i < 50; i += 1)
	{
		var path = "patch" + i;
		var found = false;
		for (var j = 0, internal_forloop_count = paths_to_search_patchnums.count; j < internal_forloop_count && typeof(paths_to_search_patchnums[j]) === "String"; j += 1)
		{	
			for (var k = 0, internal_forloop_count = paths_base.count; k < internal_forloop_count; k += 1)
			{
				var path = path;
				var path_to_search = paths_to_search_patchnums[j];
				if (path_to_search.indexOf("%s") !== -1)
				{
					path = path_to_search.sprintf(path);
					path_to_search = ".";
				}
				var path_dirlist = paths_base_dirlist[paths_base[k]][path_to_search];
				if (path_dirlist.find(path + "/") !== -1 || path_dirlist.find(path) !== -1)
				{
					found = true;
					break;
				}
			}
			if (found)
			{
				break;
			}
		}
		if (found)
		{
			paths.add(path);
		}
		else
		{
			break;
		}
	}
	var paths_to_search = [
		"data.xp3" + arcdelim + "%s",
		"%s.xp3",
		"data",
		".",
		"patch",
		"content-data",
	];

	if (global.devMode || global.devMode2)
	{
		paths_to_search.add("data");
	}
	if (in_archive || (global.devMode || global.devMode2))
	{
		paths_to_search.add(".");
	}
	if (global.devMode || global.devMode2)
	{
		paths_to_search.add("patch");
		paths_to_search.add("content-data");
	}

	for (var i = 0, internal_forloop_count = paths_to_search.count; i < internal_forloop_count && typeof(paths_to_search[i]) === "String"; i += 1)
	{
		for (var j = 0, internal_forloop_count = paths.count; j < internal_forloop_count; j += 1)
		{
			for (var k = 0, internal_forloop_count = paths_base.count; k < internal_forloop_count; k += 1)
			{
				var path = paths[j];
				var path_to_search = paths_to_search[i];
				if (path_to_search.indexOf("%s") !== -1)
				{
					path = path_to_search.sprintf(paths[j]);
					path_to_search = ".";
				}
				var path_dirlist = paths_base_dirlist[paths_base[k]][path_to_search];
				var spos = path.indexOf(arcdelim);
				var extra_path = "";
				if (path_to_search !== ".")
				{
					extra_path = path_to_search + "/";
				}
				paths_to_remove.add(paths_base[k] + extra_path + path + "/");
				paths_to_remove.add(paths_base[k] + extra_path + path + arcdelim);
				if (spos !== -1)
				{
					if (path_dirlist.find(path.substring(0, spos)) !== -1)
					{
						paths_to_add.add(paths_base[k] + extra_path + path + "/");
					}
				}
				else
				{
					if (path_dirlist.find(path + "/") !== -1)
					{
						paths_to_add.add(paths_base[k] + extra_path + path + "/");
					}
					else if (path_dirlist.find(path) !== -1)
					{
						paths_to_add.add(paths_base[k] + extra_path + path + arcdelim);
					}
				}
			}
		}
	}

	if (global.devMode)
	{
		var commondevpaths = [
			"plugin",
			"pluginpatch",
			"font",
			"imageshistory",
			"patch/k2compat",
		];
		for (var i = 0, internal_forloop_count = commondevpaths.count; i < internal_forloop_count && typeof(commondevpaths[i]) === "String"; i += 1)
		{
			var path = global.typemoon_repo_root + "common/" + commondevpaths[i] + "/";
			paths_to_remove.add(path);
@if(!KIRIKIROID)
			if (global.Storages.isExistentDirectory(path))
			{
				paths_to_add.add(path);
			}
@endif
		}
		var devpaths = [
			"patch",
			"etc",
			"others",
			"voice",
			"rule",
			"sound",
			"se",
			"bgm",
			"fgimage",
			"bgimage",
			"scenario",
			"image",
			"video",
			"system",
			"plugin",
			"pluginpatch",
			"op",
			"ImagesPatch",
			"ImagesConfig",
			"SEPatch",
			"BGM_patch",
@if(GAME_FHAT)
			"voicehanafuda",
			"voicehanafuda2",
			"imagesvita",
			"imageshanafuda",
			"bgm_vita",
@endif
@if(GAME_FATE)
			"ImagesScene",
			"BGM_Classic",
			"BGM_Remixed",
			"BGM_PS2",
			"VoicePatch",
			"SoundPatch",
			"H",
@endif
		];
		for (var i = 0, internal_forloop_count = devpaths.count; i < internal_forloop_count && typeof(devpaths[i]) === "String"; i += 1)
		{
			for (var j = 0, internal_forloop_count = paths_base.count; j < internal_forloop_count; j += 1)
			{
				var path = paths_base[j] + devpaths[i] + "/";
				paths_to_remove.add(path);
@if(!KIRIKIROID)
				if (global.Storages.isExistentDirectory(path))
				{
					paths_to_add.add(path);
				}
@endif
			}
		}
	}

@if(!DEBUG)
	for (var i = 0, internal_forloop_count = paths_base.count; i < internal_forloop_count; i += 1)
	{
		var files = paths_base_dirlist[paths_base[i]]["."];
		var patches = [];
		for (var j = 0, internal_forloop_count = files.count; j < internal_forloop_count; j += 1)
		{
			var fn = files[j];
			if (fn.substr(0, 6) === "patch_" && global.Storages.extractStorageExt(fn) === ".xp3")
			{
				patches.add(fn);
			}
		}
		patches.sort("a");
		for (var j = 0, internal_forloop_count = patches.count; j < internal_forloop_count; j += 1)
		{
			var path = paths_base[i] + patches[j] + arcdelim;
			paths_to_remove.add(path);
			paths_to_add.add(path);
		}
	}
@endif
	for (var i = 0, internal_forloop_count = paths_to_add.count; i < internal_forloop_count; i += 1)
	{
		var failed = false;
		try
		{
			var res = global.Storages.getFullPath(paths_to_add[i]);
			if (res !== "")
			{
				paths_to_add[i] = res;
			}
			else
			{
				failed = true;
			}
		}
		catch (e)
		{
			failed = true;
		}
		if (failed)
		{
			global.Debug.message("Unable to validate " + paths_to_add[i]);
			paths_to_add.erase(i);
			i -= 1;
		}
	}

	for (var i = 0, internal_forloop_count = paths_to_remove.count; i < internal_forloop_count; i += 1)
	{
		global.Storages.removeAutoPath(paths_to_remove[i]);
	}

	for (var i = 0, internal_forloop_count = paths_to_add.count; i < internal_forloop_count; i += 1)
	{
		global.Storages.addAutoPath(global.translate_archive_path(paths_to_add[i]));
	}

	try
	{
		global.Storages.isExistentStorage("__THIS_IS_A_DUMMY_PATH__");
	}
	catch (e)
	{
		global.on_corrupt_archive_failure(e);
	}
}
