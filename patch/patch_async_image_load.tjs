
global.cached_async_images = %[];

global.touched_async_images = [];

global.total_size_async_images = 0;

global.get_async_image = function(storage)
{
	if (storage === void || storage === "")
	{
		return void;
	}
	var cached_async_images = global.cached_async_images;
	var image = cached_async_images[storage];
	if (image === void)
	{
		return void;
	}
	if (image.loading)
	{
		return void;
	}
	image.retrieve_count += 1;
	global.touched_async_images.remove(storage);
	global.touched_async_images.insert(0, storage);
	return image;
};

global.async_image_loaded = function(meta, async, error, message)
{
	this.meta = meta;
	this.async = async;
	this.error = error;
	this.message = message;
	this.total_size = this.bufferPitch * this.height * 4;
	global.total_size_async_images += this.total_size;
	this.retrieve_count = 0;
	if (async)
	{
		global.async_image_ready();
	}
};

global.async_image_wait = function() {};

global.async_image_ready = function() {};

global.async_image_load = function(storage, key, async, source_layer)
{
	var cached_async_images = global.cached_async_images;
	var touched_async_images = global.touched_async_images;
	for (var i = touched_async_images.count - 1; i >= 0; i -= 1)
	{
@if(!NO_ASYNC_CACHE_IMAGE)
		if (global.async_bitmap_cache_value_of_graphicCacheLimit >= global.total_size_async_images)
		{
			break;
		}
@endif
		global.async_image_unload(touched_async_images[i]);
	}
	var bitmap_obj = new Bitmap();
	bitmap_obj.onLoaded = global.async_image_loaded;
	if (source_layer !== void)
	{
		source_layer.copyToBitmapFromMainImage(bitmap_obj);
		(global.async_image_loaded incontextof bitmap_obj)(%[], false, false, "");
	}
	else
	{
		if (async)
		{
			bitmap_obj.loadAsync(storage);
		}
		else
		{
			var res = bitmap_obj.load(storage, key);
			(global.async_image_loaded incontextof bitmap_obj)(res, false, false, "");
		}
	}
	cached_async_images[storage] = bitmap_obj;
	global.touched_async_images.insert(0, storage);
	return bitmap_obj;
};

global.async_image_unload = function(storage)
{
	var cached_async_images = global.cached_async_images;
	var cached_async_image = cached_async_images[storage];
	if (cached_async_image !== void && isvalid(cached_async_image) && !cached_async_image.loading && cached_async_image.retrieve_count)
	{
		global.total_size_async_images -= cached_async_image.total_size;
		invalidate cached_async_image;
		delete cached_async_images[storage];
		global.touched_async_images.remove(storage);
		return true;
	}
	return false;
};

global.async_image_unload_all = function()
{
	if (!isvalid(global.cached_async_images) || !isvalid(global.async_image_unload) || !isvalid(global.touched_async_images))
	{
		return;
	}
	var images = [];
	images.assign(global.cached_async_images);
	for (var i = 0, internal_forloop_count = images.count; i < internal_forloop_count; i += 2)
	{
		global.async_image_unload(images[i]);
	}
};

global.Layer_async_image_load_original = Layer;
class Layer_async_image_load_override extends Layer_async_image_load_original
{
	function Layer_async_image_load_override()
	{
		super.Layer(...);
	}

	function Layer()
	{
		Layer_async_image_load_override(...);
	}

	function loadImages(storage, key)
	{
		var async_image = global.get_async_image(storage);
		if (async_image === void)
		{
			async_image = global.async_image_load(storage, key, false);
			async_image.retrieve_count += 1;
		}
		if (async_image !== void)
		{
			var meta = %[];
			if (typeof(async_image.meta) === "Object" && async_image.meta !== null && meta instanceof "Dictionary")
			{
				(global.Dictionary.assign incontextof meta)(async_image.meta);
			}
			this.copyFromBitmapToMainImage(async_image);
@if(NO_ASYNC_CACHE_IMAGE)
			global.async_image_unload(async_image);
@endif
			return meta;
		}
		return super.loadImages(...);
	}

	function saveLayerImage(storage)
	{
		var cached_async_images = global.cached_async_images;
		global.async_image_unload(storage);
		var ret = super.saveLayerImage(...);
		var async_image = global.async_image_load(storage, void, void, this);
		async_image.retrieve_count += 1;
		return ret;
	}
}
global.Layer = Layer_async_image_load_override;

global.System.clearGraphicCache_patch_async_image_load_orig = global.System.clearGraphicCache;
global.System.clearGraphicCache = function()
{
	global.async_image_unload_all();
	return global.System.clearGraphicCache_patch_async_image_load_orig();
};

global.async_image_garbage_collection_hook = function(level)
{
	if (level >= clDeactivate && isvalid(global) && isvalid(global.async_image_unload_all))
	{
		global.async_image_unload_all();
	}
};

{
	if (typeof(global.System.addGarbageCollectionHook) === "Object")
	{
		global.System.addGarbageCollectionHook(global.async_image_garbage_collection_hook);
	}
}

@if(!NO_ASYNC_CACHE_IMAGE)
global.last_set_value_of_graphicCacheLimit = 0;
class internal_for_patch_async_image_load
{
	property graphicCacheLimit_override
	{
		setter (v)
		{
			if (v == -1)
			{
				v = global.orig_value_of_graphicCacheLimit;
			}
			else if (v == 0)
			{
				global.System.graphicCacheLimit_async_image_load_original = 0;
				global.System.clearGraphicCache();
			}
			if (v > global.orig_value_of_graphicCacheLimit)
			{
				v = global.orig_value_of_graphicCacheLimit;
			}
			global.carveout_value_of_graphicCacheLimit = v / 16;
			global.async_bitmap_cache_value_of_graphicCacheLimit = global.carveout_value_of_graphicCacheLimit * 15;
			global.last_set_value_of_graphicCacheLimit = v;
		}
		getter
		{
			return global.last_set_value_of_graphicCacheLimit;
		}
	}
}

{
	global.System.graphicCacheLimit = global.gcsAuto;
	global.orig_value_of_graphicCacheLimit = global.System.graphicCacheLimit;

	// Property override
	var tmp = &global.System.graphicCacheLimit;
	&global.System.graphicCacheLimit_async_image_load_original = tmp;
	&global.System.graphicCacheLimit = &global.internal_for_patch_async_image_load.graphicCacheLimit_override;

	global.System.graphicCacheLimit = global.orig_value_of_graphicCacheLimit;
}

// Bitmap.bufferPitch * Bitmap.height
@endif

global.System.touchImages_async_image_load_original = global.System.touchImages;
global.System.touchImages = function(storage, limitbytes=0, timeout=0)
{
	var cached_async_images = global.cached_async_images;
	var async_image_load = global.async_image_load;
	var image_already_cached = 0;
	for (var i = 0, internal_forloop_count = storage.count; i < internal_forloop_count; i += 1)
	{
		if (storage[i].indexOf(":") === -1)
		{
			continue;
@if(0)
			throw new Exception("Image path passed in " + storage[i] + " is not absolute path.");
@endif
		}
		if (cached_async_images[storage[i]] !== void)
		{
			if (!cached_async_images[storage[i]].loading)
			{
				image_already_cached += 1;
			}
			continue;
		}
		async_image_load(storage[i], void, true);
		if (!cached_async_images[storage[i]].loading)
		{
			image_already_cached += 1;
		}
	}
	if (image_already_cached === storage.count)
	{
		global.async_image_ready();
		// All images were loaded synchronously
		return true;
	}
	return false;
};

