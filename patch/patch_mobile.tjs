global.is_mobile = false;

global.ssf = %[];

function playMenuOpenSE() {
    //Mobile only.
}

kag.setMessageLayerShadowMode = function(edge, shadow) {
	//Mobile only.
};

kag.setVirtualWideMode = function(value) {
	//Mobile only.
};

kag.tagHandlers.download = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.openflowchart = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.setbgmnonstopmode = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.fixedframemode = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.texturemag = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.setwipemode = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.setignorecinescoautofitmode = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.setnocameraresetmode = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.dflick = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.lflick = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.rflick = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.uflick = function(mp) {
	// Mobile only.
	return 0;
} incontextof kag;

kag.tagHandlers.fillcolor = function(mp) {
	var layer = kag[mp.page].base;
	layer.colorRect(0, 0, +layer.width, +layer.height, +mp.color, +mp.opacity);
	return 0;
} incontextof kag;
