
global.KAGWindow_patch_language_override_original = global.KAGWindow;
class KAGWindow_patch_language_override_override extends global.KAGWindow_patch_language_override_original
{
	function KAGWindow_patch_language_override_override()
	{
		super.KAGWindow(...);

		if (this instanceof "KAGWindow" && this.isMain)
		{
			global.setFontWithLanguage(this.sflags.language, this);
		}

		this.conductor.getPreprocessChCallbacks().add(this.patch_language_override_preprocess_ch);
	}

	function KAGWindow()
	{
		this.KAGWindow_patch_language_override_override(...);
	}

	function onLanguageMenuItemClick(sender, language)
	{
		if (this.sflags.language == language)
		{
			return;
		}
		global.saveFontWithLanguage(this);
		global.unload_language_patch(this.sflags.language, this);
		global.load_language_patch(language, this);
		this.sflags.language = language;
@if(!GAME_WOHN)
		global.setFontWithLanguage(this.sflags.language, this);
@endif
		sender.checked = true;
		this.extraConductor.clear(); // Fix code for AutoPath
@if(GAME_WOHN)
		// Reload the font configuration.
		global.reload_messagelayer_config(this);
		global.setFontWithLanguage(this.sflags.language, this);
@endif
		this.onReloadScenarioMenuItemClick(sender);
		if(typeof(global.flow_tracker_object) === "Object" && typeof(global.flow_tracker_object.flowchart) === "Object" && global.flow_tracker_object.flowchart.filename !== void)
		{
			global.flow_tracker_object.isPlayOK();
			this.currentPageName = global.f.scripttitle;
		}
	}

	function replace_font_for_special_characters(elm)
	{
		var originalFontFace = this.current.lineLayer.font.face;
		var special = global.get_special_characters(this)[originalFontFace];
		if (special !== void && special[0].contains(elm.text))
		{
			var specialCharactersFontFace = special[1];
			this.tagHandlers.font(%["face" => specialCharactersFontFace]);
			var restoreFontFaceTag = %[tagname:"font", face:"user"];
			this.conductor.pendings.insert(0, restoreFontFaceTag);
		}
	}

	var replace_character_regex1 = /~/g;
	var replace_character_regex2 = /　/g;
	function replace_characters_regex(text)
	{
		if (
			!global.get_replace_jp_tilde_disabled((typeof(global.kag) === "Object") ? global.kag : this)
			)
		{
			text = text.replace(this.replace_character_regex1, "〜");
		}
		if (
			!global.get_replace_jp_whitespace_disabled((typeof(global.kag) === "Object") ? global.kag : this)
			&& this.sflags.language == global.englishLanguage
			&& !global.startsWith("花札", this.conductor.curStorage) // Not hanafuda
			)
		{
			text = text.replace(this.replace_character_regex2, global.__s(" ", "replace_ideographic_space"));
		}
		return text;
	}

	function replaceCharacters(obj)
	{
		obj.text = this.replace_characters_regex(obj.text);
	}

	function patch_language_override_preprocess_ch(text, conductor, elm)
	{
		text = this.replace_characters_regex(text);
		return text;
	}
}
global.KAGWindow = global.KAGWindow_patch_language_override_override;
