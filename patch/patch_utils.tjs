
function name_to_patch_basename(name, isFolder=devMode)
{
	if (isFolder)
	{
		return name.toLowerCase();
	}
	else
	{
		var prefix = "patch";
		if (name !== "" && !/^\d+$/.test(name))
		{ // Not empty and not a number
			prefix += "_";
		}

		return (prefix + name + ".xp3").toLowerCase();
	}
}

function name_to_patch(name, isFolder=devMode, basePath=global.paths_base[0])
{
	return basePath + name_to_patch_basename(name, isFolder);
}

function name_to_patch_path(name, isFolder=devMode, basePath=global.paths_base[0]) {
	var result = name_to_patch(name, isFolder, basePath);
	if (isFolder)
	{
		result += "/";
	}
	else
	{
		result += ">";
	}
	return result;
}

function patchExists(name, isFolder=devMode, basePath=global.paths_base[0]) {
	var result = false;
	if (!isFolder)
	{
		result = global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, false)) !== -1;
		if (devMode2)
		{
			result |= global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, true) + "/") !== -1;
		}
	}
	else
	{
		result = global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, true) + "/") !== -1;
	}
	return result;
}

function load_patches(patch_array, should_add_to_auto_path=true)
{
	var patches_to_add = [];
	for (var i = 0; i < patch_array.count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = patch_array[i][0];
		if (typeof(name) !== "String")
		{
			throw new Exception("Expected a string when loading patch");
		}
		var folderName = patch_array[i][1];
		if (typeof(folderName) !== "String")
		{
			folderName = "";
		}
		folderName += "/" if folderName != "";
		var basePath = patch_array[i][2];
		if (typeof(basePath) !== "String")
		{
			basePath = global.paths_base[0];
		}
		if (!devMode)
		{
			if (global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, false)) !== -1)
			{
				patches_to_add.add(name_to_patch_path(name, false, basePath) + folderName);
			}
		}
		if (devMode || devMode2)
		{
			var fpath = name_to_patch_path(name, true, basePath) + folderName;
			if (Storages.isExistentDirectory(fpath))
			{
				patches_to_add.add(fpath);
			}
		}
	}
	for (var i = 0; i < patches_to_add.count; i += 1)
	{
		if (should_add_to_auto_path)
		{
			Storages.removeAutoPath(patches_to_add[i]);
			Storages.addAutoPath(patches_to_add[i]);
		}
	}
	return patches_to_add;
}

function unload_patches(patch_array)
{
	var patches_to_remove = [];
	for (var i = 0; i < patch_array.count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = patch_array[i][0];
		if (typeof(name) !== "String")
		{
			throw new Exception("Expected a string when unloading patch");
		}
		var folderName = patch_array[i][1];
		if (typeof(folderName) !== "String")
		{
			folderName = "";
		}
		folderName += "/" if folderName != "";
		var basePath = patch_array[i][2];
		if (typeof(basePath) !== "String")
		{
			basePath = global.paths_base[0];
		}
		patches_to_remove.add(name_to_patch_path(name, false, basePath) + folderName);
		patches_to_remove.add(name_to_patch_path(name, true, basePath) + folderName);
	}
	for (var i = 0; i < patches_to_remove.count; i += 1)
	{
		Storages.removeAutoPath(patches_to_remove[i]);
	}
}

function getAnchorValue(anchor)
{
	var anchorValue = 0;
	if (anchor == "right") {
		anchorValue = 1;
	} else if (anchor == "center") {
		anchorValue = 0.5;
	} else if (("" + (+anchor)) == anchor) {
		anchorValue = +anchor;
	}
	return anchorValue;
}

Array.contains = function(item) {
	return this.find(item) != -1;
};

function lastIndexOf(obj, str)
{
	var pos = reverseStr(str).indexOf(obj);
	if(pos)
		return str.length - pos - 1;
	else
		return -1;
}

// FHA's exe doesn't have string.reverse
function reverseStr(str)
{
// TODO should also use this method in RN exe.
@if(kirikiriz)
	return str.reverse();
@endif
@if(!kirikiriz)
	var result = "";
	for (var i=str.length-1; i>=0; i--) {
		result += str[i];
	}
	return result;
@endif
}

function startsWith(obj, str)
{
	return str.substr(0, obj.length) === obj;
}

function endsWith(obj, str)
{
	return str.substr(str.length - obj.length, obj.length) === obj;
}

function capitalize(str)
{
	return str.substr(0, 1).toUpperCase() + str.substr(1);
}

function addMaskOverlay(layer, name, l=0, t=0, add=true, horizontalAlignment=void)
{
	var overlay = new global.Layer(layer.window, layer);
	with (overlay) {
		if (horizontalAlignment !== void) {
			.horizontalAlignment = horizontalAlignment;
		}
		if (add) {
			.type = ltPsAdditive;
		}
		.isMask = true;
		.loadImages(name);
		layer.operateRect(l, t, overlay, 0, 0, .imageWidth, .imageHeight);
	}
	invalidate overlay;
}


var defaultScrollbarImages =  [	//	base
	"",//"top_horizontal",
	"",//"base_horizontal",
	"",//"bottom_horizontal",
	"scroll_top_horizontal",
	"scroll_base_horizontal",
	"scroll_bottom_horizontal"
];

function initializeScollbar(x, y, w, h, total, moving, top, scrimgs=defaultScrollbarImages)
{
	mini_layer = new global.FadeLayer(window, this);
	with(mini_layer)
	{
		.setPos(x, y);
		.setSize(w, h);
		.visible = true;
		.hitThreshold = 0;
		.opacity = 255;
		.focusable = true;
		.onMouseDown = function() {
			parent.onMouseDown(...);
		} incontextof mini_layer;
		.onButtonDown = function() {
			parent.onButtonDown(...);
		} incontextof mini_layer;
		.onButtonUp = function() {
			parent.onButtonUp(...);
		} incontextof mini_layer;
	}

	with(scrollbar = new ScrollBarLayer(window, mini_layer, w, 0, 0, false, scrimgs)) //6,6 margin if you use the horizontal background for the scroller
	{
		.top = top; //use top 0 if you use the horizontal background for the scroller
		.total		= total;
		.area		= .width;
		.onscroll	= onScroll;
		.current	= 0;
		.moving		= moving;
	}

	window.org_onMouseWheel	= window.onMouseWheel;
	window.onMouseWheel		= scrollbar.onMouseWheel;
}


/// 停止所有视频图层的播放 ///
function stopAllMovies(kag=global.kag)
{
	for(var i=0; i<kag.movies.count; i++)
	{
		with(kag.movies[i])
		{
			if(.canWaitStop)
				.stop();
		}
	}
}

function isAnyMoviePlaying(kag=global.kag)
{
	for(var i=0; i<kag.movies.count; i++)
	{
		with(kag.movies[i])
		{
			if(.canWaitStop)
				return true;
		}
	}
	return false;
}

function fixAndLoadDictionaryForKrkr2(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	return Scripts.eval(file_as_array.join("\n").replace(/\(const\)/g, ""));
}

global.krkrzDictionaryReplace = function(matcharr)
{
	matcharr.erase(0);
	return matcharr.join("");
};

global.krkrzDictionaryRegex1 = new RegExp("(?:real (0x\\d\\.[A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9]p-?\\d*|[-\+]?0\.0|NaN|[-\+]?Infinity)(?: /\\* (?:.*?) \\*/)?|int ([-\\+]?\\d*)|string (\".*\"))", "g");
global.krkrzDictionaryRegex2 = /(?: )(?=\%?\[\n)/g;

function fixAndLoadDictionaryForKrkrZ(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	var j = file_as_array.join("\n").replace(global.krkrzDictionaryRegex1, global.krkrzDictionaryReplace).replace(global.krkrzDictionaryRegex2, " (const)");
	Debug.message(j);
	return Scripts.eval(("(const)[ (const)%s ]").sprintf(j))[0];
}

// Avoid CVE-2015-5672
function safeEvalStorage(filename, mode)
{
@if(!KIRIKIROID)
	if (typeof(global.Dictionary) === "Object" && typeof(global.Dictionary.loadStruct) === "Object")
	{
		var ret;
		try
		{
			ret = global.Dictionary.loadStruct(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("Invalid argument") !== -1)
			{
				dm("Attempting to fix " + filename + " for Kirikiri Z...");
				return global.fixAndLoadDictionaryForKrkrZ(filename, mode);
			}
			throw e;
		}
		return ret;
	}
	else
@endif
	{
		var ret;
		try
		{
			ret = global.Scripts.evalStorage(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("const") !== -1)
			{
				dm("Attempting to fix " + filename + " for Kirikiri 2...");
				return global.fixAndLoadDictionaryForKrkr2(filename, mode);
			}

			throw e;
		}
		return ret;
	}
}

function build_exec_command_line(exepath, arguments, normalize_exepath=true, normalize_arguments=true)
{
	var all_args = [];
	var exe_path = exepath;
	if (normalize_exepath)
	{
		var exe_path_placed = Storages.getPlacedPath(exe_path);
		if (exe_path_placed !== "")
		{
			var exe_path_local = Storages.getLocalName(exe_path_placed);
			if (exe_path_local !== "")
			{
				exe_path = exe_path_local;
			}
		}
	}
	//exe_path = ('"%s"').sprintf(exe_path);
	for (var i = 0; i < arguments.count; i += 1)
	{
		var arg_path = arguments[i];
		if (normalize_arguments)
		{
			if (typeof(arg_path) === "String")
			{
				var arg_path_placed = Storages.getPlacedPath(arg_path);
				if (arg_path_placed !== "")
				{
					var arg_path_local = Storages.getLocalName(arg_path_placed);
					if (arg_path_local !== "")
					{
						arg_path = arg_path_local;
					}
				}
			}
			else if (typeof(arg_path) === "Object")
			{
				var arg_components = [];
				for (var i = 0; i < arg_path.count; i += 1)
				{
					var arg_component = arg_path[i];
					var arg_path_placed = Storages.getPlacedPath(arg_component);
					if (arg_path_placed !== "")
					{
						var arg_path_local = Storages.getLocalName(arg_path_placed);
						if (arg_path_local !== "")
						{
							arg_component = arg_path_local;
						}
					}
					arg_components.add(arg_component);
				}
				arg_path = arg_components.join("");
			}
		}
		else
		{
			if (typeof(arg_path) === "Object")
			{
				arg_path = arg_path.join("");
			}
		}
		all_args.add(arg_path);
	}
	var args_joined = "";
	if (all_args.count === 1)
	{
		args_joined = ('"%s"').sprintf(all_args[0]);
	}
	else if (all_args.count > 1)
	{
		args_joined = ('"%s"').sprintf(all_args.join('" "'));
	}
	return global.System.shellExecute(exe_path, args_joined);
}

function showAboutKirikiriWindow()
{
	if (typeof(global.System.showVersion) === 'Object')
	{
		global.System.showVersion();
	}
	else
	{
		return global.build_exec_command_line(global.System.exeName, ["-about"]);
	}
}

function showEngineConfigureDialog()
{
	return global.build_exec_command_line(global.System.exeName, ["-userconf"]);
}

function showURLUsingDefaultHandler(url)
{
	return global.build_exec_command_line(url, [], false, false);
}

if (typeof(System.clearGraphicCache) !== "Object")
{
	global.System.clearGraphicCache = function() {
		var ccl = System.graphicCacheLimit;
		System.graphicCacheLimit = 0;
		System.graphicCacheLimit = ccl;
	};
}

global.check_app_lock = function()
{
	if (!System.createAppLock(System.exePath.replace(/[^A-Za-z]/g, '_')))
	{
		System.inform(__t("%sはすでに起動しています").sprintf(System.title));
		System.exit();
	}
};

@if(GAME_FATE)
global.prologue_storage_arr = [
	"プロローグ.ks",
	"プロローグ1日目.ks",
	"プロローグ2日目.ks",
	"プロローグ3日目.ks",
];
@endif

global.open_scenario_using_scenario_tracker = function(kag=global.kag, scenario, flowchart_id, flowchart_name=void)
{
@if(GAME_WOHN)
	if (typeof(kag.conductor) !== "Object")
	{
		throw new Exception("Conductor not found!");
	}
	kag.process("call.ks", "*resetall", false, true, true);
	if (tracer_object.chart_storage !== "main.gc")
	{
		tracer_object.load(tracer_object.chart_storage = "main.gc");
	}
	if (flowchart_id === void)
	{
		var block = tracer_object.getBlockFromScript(scenario);
		if (block === void)
		{
			throw new Exception("Couldn't find reference to script " + scenario + " in chart!");
		}
		global.tracer_object.start(block.id, false);
	}
	else
	{
		global.tracer_object.start(flowchart_id, false);
	}
	
	var save_scene_2nd_skip = cf.scene2ndSkip;
	cf.scene2ndSkip = false;
	tracer_object.exec();
	cf.scene2ndSkip = save_scene_2nd_skip;
	if (typeof(scenario) === "String")
	{
		var scripts = global.tracer_object.scripts;
		if (scripts === void)
		{
			throw new Exception("No scripts in block!");
		}
		var script_index = scripts.find(scenario);
		if (script_index === -1)
		{
			throw new Exception("Could not find specified script in block!");
		}
		global.tracer_object.scriptNo = script_index;
	}
	else
	{
		global.tracer_object.scriptNo = 0;
	}
	global.kag.conductor.clearCallStack();
	kag.process("tracerplugin.ks", "*play2");
@endif
@if(GAME_FATE||GAME_FHAT)
	kag.askOnClose = true;
	kag.setHistoryOptions(%[enabled:true]);
	flowchart_id |= 0;
@if(GAME_FATE)
	if (scenario === "タイトル.ks" || scenario === "体験版ダイジェスト仮組04.ks" || scenario === "ラストエピソード.ks" || scenario === "tiger_dojo_joke.ks" || scenario === "セイバーエピローグ.ks" || scenario === "凛エピローグ.ks" || scenario === "凛エピローグ2.ks" || scenario === "桜エピローグ2.ks" || scenario === "桜エピローグ.ks")
	{
		global.kag.setConductorToMain();
		global.kag.conductor.inProcessing = false;
		global.kag.conductor.interupted = false;
		global.kag.conductor.sleep();
		global.kag.process("FlowTrackerPlugin.ks", "*cleanup", false, true, true);
		global.flow_tracker_object.isScenarioExecution = false;
		global.kag.conductor.clearCallStack();
		if (scenario === "タイトル.ks")
		{
			global.kag.process("suflags_hack.ks", "*wakame");
		}
		else if (scenario === "体験版ダイジェスト仮組04.ks")
		{
			global.kag.process("suflags_hack.ks", "*demoonly");
		}
		else if (scenario === "ラストエピソード.ks")
		{
			global.kag.process("suflags_hack.ks", "*realtanua");
		}
		else if (scenario === "tiger_dojo_joke.ks")
		{
			global.kag.process("endlist.ks", "*tiger_dojo_joke");
		}
		else if (scenario === "セイバーエピローグ.ks")
		{
			global.kag.process("endlist.ks", "*fate_true_end");
		}
		else if (scenario === "凛エピローグ.ks")
		{
			global.kag.process("endlist.ks", "*ubw_good_end");
		}
		else if (scenario === "凛エピローグ2.ks")
		{
			global.kag.process("endlist.ks", "*ubw_true_end");
		}
		else if (scenario === "桜エピローグ2.ks")
		{
			global.kag.process("endlist.ks", "*hf_normal_end");
		}
		else if (scenario === "桜エピローグ.ks")
		{
			global.kag.process("endlist.ks", "*hf_true_end");
		}
		return;
	}
@endif
	if (flowchart_name === void && scenario !== void)
	{
		var arr = global.flow_tracker_object.getIdNameFromScenario(scenario);
		flowchart_name = arr[1];
		flowchart_id = arr[0];
	}
	if (flowchart_name === void)
	{
		throw new Exception("Could not find flowchart name from scenario!");
	}
	global.flow_tracker_object.init(flowchart_name, flowchart_id);
	if (typeof(global.flow_tracker_object.flow) === "Object" && scenario !== void)
	{
		var flow = global.flow_tracker_object.flow;
@if(GAME_FHAT)
		var flowchart = void;
		if (typeof(global.flow_tracker_object.flowchart) === "Object")
		{
			flowchart = global.flow_tracker_object.flowchart;
		}
@endif
		var new_id = 0;
		for (var i = 0; i < flow.count; i += 1)
		{
			if (typeof(flow[i]) !== "Object")
			{
				continue;
			}
			if (typeof(flow[i].type) !== "String")
			{
				continue;
			}
			var t = flow[i].type;
			if (t === "SCENE" || t === "SELECTER")
			{
				var file = void;
@if(GAME_FHAT)
				if (flowchart !== void)
				{
					file = flowchart.getScriptFilename(i);
				}
@endif
@if(GAME_FATE)
				if (typeof(global.flow_tracker_object.flowfile) === "String")
				{
					file = global.flow_tracker_object.getScenarioFileNameFromFcf(global.flow_tracker_object.flowfile, i);
				}
@endif
				if (scenario === file)
				{
					new_id = i;
					break;
				}
			}
		}
		if (new_id !== 0)
		{
			global.flow_tracker_object.init(flowchart_name, new_id);
		}
	}
	if (!global.flow_tracker_object.isPlayOK())
	{
		throw new Exception("Flowchart passed in is invalid");
	}
@if(GAME_FATE)
	global.setSystemMode("scenario");
	if (kag.flags.layer_image === void)
	{
		kag.flags.layer_image = %[];
	}
	kag.flags.layer_image["base"] = "";
	kag.enabledAutoMode = true;
@endif
	kag.process("flowtrackerplugin.ks", "*moveToAnotherScene");
@endif
};

global.initial_scenario_load_ready = function()
{
@if(GAME_FHAT)
	if (System.getArgument("-loadticketatindex") !== void)
	{
		global.kag.askOnClose = true;
		global.loadTicketFile(System.getArgument("-loadticketatindex") | 0);
		(global.initializeTicketFlagsMenu incontextof global.kag)();
		if (System.getArgument("-loadsaveatindex") === void)
		{
			global.kag.setConductorToMain();
			global.kag.conductor.inProcessing = false;
			global.kag.conductor.interupted = false;
			global.kag.conductor.sleep();
			global.kag.process("title.ks", "*prepare", false, true, true);
			global.kag.process("title.ks", "*pretitle");
		}
	}
@endif
@if(GAME_FATE||GAME_FHAT)
	if (System.getArgument("-testmode") !== void)
	{
		global.testmode = true;
	}
@endif
	if (System.getArgument("-loadsaveatindex") !== void)
	{
		global.kag.askOnClose = true;
		global.kag.loadBookMark(System.getArgument("-loadsaveatindex") | 0);
	}
@if(GAME_WOHN)
	else if (System.getArgument("-archiveopenscenario") !== void)
	{
		global.startArchiveWithScenario(System.getArgument("-archiveopenscenario"));
	}
@endif
	else if (System.getArgument("-flowchartopen") !== void || System.getArgument("-flowchartopenbyscenario") !== void)
	{
		global.open_scenario_using_scenario_tracker(global.kag, System.getArgument("-flowchartopenbyscenario"), System.getArgument("-flowchartopenbyid"), System.getArgument("-flowchartopen"));
	}
	if (System.getArgument("-fullscreen") !== void)
	{
		var should_fullscreen = System.getArgument("-fullscreen") === "true";
		if (should_fullscreen)
		{
			global.kag.onFullScreenMenuItemClick();
		}
		else
		{
			global.kag.onWindowedMenuItemClick();
		}
	}
	else if (typeof(global.kag.scflags.fullScreen) === "Integer")
	{
		var should_fullscreen = global.kag.scflags.fullScreen;
		if (should_fullscreen)
		{
			global.kag.onFullScreenMenuItemClick();
		}
		else
		{
			global.kag.onWindowedMenuItemClick();
		}
	}
	if (System.getArgument("-innersizewidth") !== void)
	{
		if (typeof(global.kag.onWindowSizeMenuItemClick) === "Object")
		{
			global.kag.onWindowSizeMenuItemClick(void, System.getArgument("-innersizewidth") | 0);
		}
	}
	else
	{
		if (typeof(global.kag.callResizeHook) === "Object")
		{
			global.kag.callResizeHook();
		}
	}
};

global.full_game_reload = function(extra_args*)
{
	var should_reload_save = true;
	if ((typeof(global.titlemenu_object) === "Object" && typeof(global.titlemenu_object.menulayer) === "Object" && global.titlemenu_object.menulayer.visible) || typeof(global.titlemenu) === "Object" || typeof(global.ticket_menu) === "Object")
	{
		should_reload_save = false;
	}
	var args_arr = [];
	if (should_reload_save)
	{
		global.kag.saveBookMark(1000, true);
		args_arr.add("-loadsaveatindex=1000");
	}
@if(GAME_FHAT)
	args_arr.add("-readencoding=Shift_JIS");
	if (typeof(global.CurrentTicketNo) === "Integer")
	{
		global.saveTicketFile();
		args_arr.add("-loadticketatindex=" + CurrentTicketNo);
	}
@endif
	args_arr.add("-fullscreen=" + (global.kag.fullScreen ? "true" : "false"));
	args_arr.add("-innersizewidth=" + global.kag.innerWidth);
	for (var i = 0; i < extra_args.count; i += 1)
	{
		args_arr.add(extra_args[i]);
	}
	global.kag.saveSystemVariables();
	global.build_exec_command_line(global.System.exeName, args_arr);
	// Possible savedata mutex race condition?
	global.System.exit();
};


function floatEquals(x, y, epsilon=0.0000001) {
	return Math.abs(x - y) < epsilon;
}

// https://stackoverflow.com/a/54137634
global.binary_to_decimal = function(arr)
{
	var decimal = 0;
	var bits = 1;
	for (var i = 0; i < arr.count; i += 1)
	{
		var current_number = (arr[arr.count - i - 1]);
		if (current_number === 1)
		{
			decimal += bits;
		}
		bits *= 2;
	}
	return decimal;
};

// Based on https://gist.github.com/Manouchehri/f4b41c8272db2d6423fa987e844dd9ac
// with modifications to make the output closer to that of TJSRealToHexString
global.real_to_hex_string = function(v)
{
	var ebits = 11;
	var fbits = 52;

	var s, e, f;
	// NaN doesn't equal itself
	if (v !== v)
	{
		return "NaN";
	}
	else if (v === Infinity)
	{
		return "Infinity";
	}
	else if (v === -Infinity)
	{
		return "-Infinity";
	}
	else if (v === 0)
	{
		if (1 / v === -Infinity)
		{
			return "-0.0";
		}
		else
		{
			return "0.0";
		}
	}
	else
	{
		var bias = (1 << (ebits - 1)) - 1;
		s = v < 0;
		v = Math.abs(v);

		if (v >= Math.pow(2, 1 - bias))
		{
			var ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);
			e = ln + bias;
			f = v * Math.pow(2, fbits - ln) - Math.pow(2, fbits);
		}
		else
		{
			e = 0;
			f = v / Math.pow(2, 1 - bias - fbits);
		}
	}

	// Pack sign, exponent, fraction
	var fbits_arr = [];
	for (var i = fbits; i !== 0; i -= 1)
	{
		fbits_arr.insert(0, f % 2 ? 1 : 0);
		f = Math.floor(f / 2);
	}
	var ebits_arr = [];
	for (var i = ebits; i !== 0; i -= 1)
	{
		ebits_arr.insert(0, e % 2 ? 1 : 0);
		e = Math.floor(e / 2);
	}

	// Bits to bytes
	return ("%s0x1.%013Xp%d").sprintf(s ? "-" : "", binary_to_decimal(fbits_arr), binary_to_decimal(ebits_arr) - 1023);
};

function reload_messagelayer_config(window=global.kag)
{
	var ignore_changes_tmp = false;
	if (typeof(window.ignore_font_changes) === "Integer" && window.ignore_font_changes)
	{
		ignore_changes_tmp = true;
		window.ignore_font_changes = false;
	}
	var old_current = window.currentNum;
	var old_chr_count = window.fore.layers.count;
	var old_msg_count = window.fore.messages.count;
	window.allocateCharacterLayers(0);
	window.allocateMessageLayers(0);
	window.allocateCharacterLayers(old_chr_count);
	window.allocateMessageLayers(old_msg_count);
	window.current = (window.currentPage?window.back:window.fore).messages[old_current];
	if (ignore_changes_tmp)
	{
		window.ignore_font_changes = true;
	}
}
