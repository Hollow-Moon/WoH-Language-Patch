
function name_to_patch_basename(name, isFolder=devMode)
{
	if (isFolder)
	{
		return name.toLowerCase();
	}
	else
	{
		var prefix = "patch";
		if (name !== "" && !/^\d+$/.test(name))
		{ // Not empty and not a number
			prefix += "_";
		}

		return (prefix + name + ".xp3").toLowerCase();
	}
}

function name_to_patch(name, isFolder=devMode, basePath=global.paths_base[0])
{
	return basePath + name_to_patch_basename(name, isFolder);
}

function name_to_patch_path(name, isFolder=devMode, basePath=global.paths_base[0]) {
	var result = name_to_patch(name, isFolder, basePath);
	if (isFolder)
	{
		result += "/";
	}
	else
	{
		result += ">";
	}
	return result;
}

function patchExists(name, isFolder=devMode, basePath=global.paths_base[0]) {
	var result = false;
	if (!isFolder)
	{
		result = global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, false)) !== -1;
		if (devMode2)
		{
			result |= global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, true) + "/") !== -1;
		}
	}
	else
	{
		result = global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, true) + "/") !== -1;
	}
	return result;
}

function load_patches(patch_array, should_add_to_auto_path=true)
{
	var patches_to_add = [];
	for (var i = 0; i < patch_array.count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = patch_array[i][0];
		if (typeof(name) !== "String")
		{
			throw new Exception("Expected a string when loading patch");
		}
		var folderName = patch_array[i][1];
		if (typeof(folderName) !== "String")
		{
			folderName = "";
		}
		folderName += "/" if folderName != "";
		var basePath = patch_array[i][2];
		if (typeof(basePath) !== "String")
		{
			basePath = global.paths_base[0];
		}
		if (!devMode)
		{
			if (global.paths_base_dirlist[basePath]["."].find(name_to_patch_basename(name, false)) !== -1)
			{
				patches_to_add.add(name_to_patch_path(name, false, basePath) + folderName);
			}
		}
		if (devMode || devMode2)
		{
			var fpath = name_to_patch_path(name, true, basePath) + folderName;
			if (Storages.isExistentDirectory(fpath))
			{
				patches_to_add.add(fpath);
			}
		}
	}
	for (var i = 0; i < patches_to_add.count; i += 1)
	{
		Storages.removeAutoPath(patches_to_add[i]);
		if (should_add_to_auto_path)
		{
			Storages.addAutoPath(patches_to_add[i]);
		}
	}
	return patches_to_add;
}

function unload_patches(patch_array)
{
	var patches_to_remove = [];
	for (var i = 0; i < patch_array.count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = patch_array[i][0];
		if (typeof(name) !== "String")
		{
			throw new Exception("Expected a string when unloading patch");
		}
		var folderName = patch_array[i][1];
		if (typeof(folderName) !== "String")
		{
			folderName = "";
		}
		folderName += "/" if folderName != "";
		var basePath = patch_array[i][2];
		if (typeof(basePath) !== "String")
		{
			basePath = global.paths_base[0];
		}
		patches_to_remove.add(name_to_patch_path(name, false, basePath) + folderName);
		patches_to_remove.add(name_to_patch_path(name, true, basePath) + folderName);
	}
	for (var i = 0; i < patches_to_remove.count; i += 1)
	{
		Storages.removeAutoPath(patches_to_remove[i]);
	}
}

function getAnchorValue(anchor)
{
	var anchorValue = 0;
	if (anchor == "right") {
		anchorValue = 1;
	} else if (anchor == "center") {
		anchorValue = 0.5;
	} else if (string(+anchor) == anchor) {
		anchorValue = +anchor;
	}
	return anchorValue;
}

Array.contains = function(item) {
	return this.find(item) != -1;
};

function lastIndexOf(obj, str)
{
	var pos = reverseStr(str).indexOf(obj);
	if(pos)
		return str.length - pos - 1;
	else
		return -1;
}

// FHA's exe doesn't have string.reverse
function reverseStr(str)
{
// TODO should also use this method in RN exe.
@if(kirikiriz)
	return str.reverse();
@endif
@if(!kirikiriz)
	var result = "";
	for (var i=str.length-1; i>=0; i--) {
		result += str[i];
	}
	return result;
@endif
}

function startsWith(obj, str)
{
	var regex = new RegExp("^" + obj + ".*");
	return regex.test(str);
}

function endsWith(obj, str)
{
	var regex = new RegExp(".*" + obj + "$");
	return regex.test(str);
}

function capitalize(str)
{
	return str.substr(0, 1).toUpperCase() + str.substr(1);
}

function addMaskOverlay(layer, name, l=0, t=0, add=true, horizontalAlignment=void)
{
	var overlay = new global.Layer(layer.window, layer);
	with (overlay) {
		if (horizontalAlignment !== void) {
			.horizontalAlignment = horizontalAlignment;
		}
		if (add) {
			.type = ltPsAdditive;
		}
		.isMask = true;
		.loadImages(name);
		layer.operateRect(l, t, overlay, 0, 0, .imageWidth, .imageHeight);
	}
	invalidate overlay;
}


var defaultScrollbarImages =  [	//	base
	"",//"top_horizontal",
	"",//"base_horizontal",
	"",//"bottom_horizontal",
	"scroll_top_horizontal",
	"scroll_base_horizontal",
	"scroll_bottom_horizontal"
];

function initializeScollbar(x, y, w, h, total, moving, top, scrimgs=defaultScrollbarImages)
{
	mini_layer = new global.FadeLayer(window, this);
	with(mini_layer)
	{
		.setPos(x, y);
		.setSize(w, h);
		.visible = true;
		.hitThreshold = 0;
		.opacity = 255;
		.focusable = true;
		.onMouseDown = function() {
			parent.onMouseDown(...);
		} incontextof mini_layer;
		.onButtonDown = function() {
			parent.onButtonDown(...);
		} incontextof mini_layer;
		.onButtonUp = function() {
			parent.onButtonUp(...);
		} incontextof mini_layer;
	}

	with(scrollbar = new ScrollBarLayer(window, mini_layer, w, 0, 0, false, scrimgs)) //6,6 margin if you use the horizontal background for the scroller
	{
		.top = top; //use top 0 if you use the horizontal background for the scroller
		.total		= total;
		.area		= .width;
		.onscroll	= onScroll;
		.current	= 0;
		.moving		= moving;
	}

	window.org_onMouseWheel	= window.onMouseWheel;
	window.onMouseWheel		= scrollbar.onMouseWheel;
}


/// 停止所有视频图层的播放 ///
function stopAllMovies(kag=global.kag)
{
	for(var i=0; i<kag.movies.count; i++)
	{
		with(kag.movies[i])
		{
			if(.canWaitStop)
				.stop();
		}
	}
}

function fixAndLoadDictionaryForKrkr2(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	var new_file_as_array = [];
	for (var i = 0; i < file_as_array.count; i += 1)
	{
		new_file_as_array[i] = file_as_array[i].replace(/\(const\)/g, "");
	}
	return Scripts.eval(new_file_as_array.join("\n"));
}

global.krkrzDictionaryReplace = function(matcharr)
{
	return matcharr[1];
};

function fixAndLoadDictionaryForKrkrZ(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	var new_file_as_array = [];
	for (var i = 0; i < file_as_array.count; i += 1)
	{
		new_file_as_array[i] = file_as_array[i].replace(new RegExp("real 0x\\d\\.[A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9]p-?\\d* /\\* (\\d*?\\.?\\d*) \\*/", "g"), global.krkrzDictionaryReplace).replace(new RegExp("real [-\+]?0\.0 /\\* ([-\+]?\\d*?\\.?\\d*) \\*/", "g"), "0.0").replace(/int ([-\+]?\d*)/g, global.krkrzDictionaryReplace).replace(/string (".*")/g, global.krkrzDictionaryReplace).replace(/\%\[$/g, "(const) %[").replace(/[^%"A-Za-z0-9]\[$/g, " (const) [");
	}
	return Scripts.eval("(const) [ " + new_file_as_array.join("\n") + " ]")[0];
}

// Avoid CVE-2015-5672
function safeEvalStorage(filename, mode)
{
@if(!KIRIKIROID)
	if (typeof(global.Dictionary) === "Object" && typeof(global.Dictionary.loadStruct) === "Object")
	{
		var ret;
		try
		{
			ret = global.Dictionary.loadStruct(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("Invalid argument") !== -1)
			{
				dm("Attempting to fix " + filename + " for Kirikiri Z...");
				return global.fixAndLoadDictionaryForKrkrZ(filename, mode);
			}
			throw e;
		}
		return ret;
	}
	else
@endif
	{
		var ret;
		try
		{
			ret = global.Scripts.evalStorage(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("const") !== -1)
			{
				dm("Attempting to fix " + filename + " for Kirikiri 2...");
				return global.fixAndLoadDictionaryForKrkr2(filename, mode);
			}

			throw e;
		}
		return ret;
	}
}

function build_exec_command_line(exepath, arguments, normalize_exepath=true, normalize_arguments=true)
{
	var all_args = [];
	var exe_path = exepath;
	if (normalize_exepath)
	{
		var exe_path_placed = Storages.getPlacedPath(exe_path);
		if (exe_path_placed !== "")
		{
			var exe_path_local = Storages.getLocalName(exe_path_placed);
			if (exe_path_local !== "")
			{
				exe_path = exe_path_local;
			}
		}
	}
	//exe_path = ('"%s"').sprintf(exe_path);
	for (var i = 0; i < arguments.count; i += 1)
	{
		var arg_path = arguments[i];
		if (normalize_arguments)
		{
			if (typeof(arg_path) === "String")
			{
				var arg_path_placed = Storages.getPlacedPath(arg_path);
				if (arg_path_placed !== "")
				{
					var arg_path_local = Storages.getLocalName(arg_path_placed);
					if (arg_path_local !== "")
					{
						arg_path = arg_path_local;
					}
				}
			}
			else if (typeof(arg_path) === "Object")
			{
				var arg_components = [];
				for (var i = 0; i < arg_path.count; i += 1)
				{
					var arg_component = arg_path[i];
					var arg_path_placed = Storages.getPlacedPath(arg_component);
					if (arg_path_placed !== "")
					{
						var arg_path_local = Storages.getLocalName(arg_path_placed);
						if (arg_path_local !== "")
						{
							arg_component = arg_path_local;
						}
					}
					arg_components.add(arg_component);
				}
				arg_path = arg_components.join("");
			}
		}
		else
		{
			if (typeof(arg_path) === "Object")
			{
				arg_path = arg_path.join("");
			}
		}
		all_args.add(arg_path);
	}
	var args_joined = "";
	if (all_args.count === 1)
	{
		args_joined = ('"%s"').sprintf(all_args[0]);
	}
	else if (all_args.count > 1)
	{
		args_joined = ('"%s"').sprintf(all_args.join('" "'));
	}
	return global.System.shellExecute(exe_path, args_joined);
}

function showAboutKirikiriWindow()
{
	if (typeof(global.System.showVersion) === 'Object')
	{
		global.System.showVersion();
	}
	else
	{
		return global.build_exec_command_line(global.System.exeName, ["-about"]);
	}
}

function showEngineConfigureDialog()
{
	return global.build_exec_command_line(global.System.exeName, ["-userconf"]);
}

function showURLUsingDefaultHandler(url)
{
	return global.build_exec_command_line(url, [], false, false);
}

if (typeof(System.clearGraphicCache) !== "Object")
{
	global.System.clearGraphicCache = function() {
		var ccl = System.graphicCacheLimit;
		System.graphicCacheLimit = 0;
		System.graphicCacheLimit = ccl;
	};
}

global.check_app_lock = function()
{
	if (!System.createAppLock(System.exePath.replace(/[^A-Za-z]/g, '_')))
	{
		System.inform(__t("%sはすでに起動しています").sprintf(System.title));
		System.exit();
	}
};
