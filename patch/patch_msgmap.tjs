
// English message map

// Core/common
global.System.assignMessage("TVPVersionInformation", "Kirikiri Z Executable core /%1 (Compiled on %DATE% %TIME%) TJS2/%2 Copyright (C) 1997-2013 W.Dee and contributors All rights reserved.");
global.System.assignMessage("TVPVersionInformation2", "The details of version information can be perused if -about is attached and started. ");
global.System.assignMessage("TVPDownloadPageURL", "http://krkrz.github.io/");
global.System.assignMessage("TVPInternalError", "Internal Error: at %1 line %2");
global.System.assignMessage("TVPInvalidParam", "Invalid Parameter");
global.System.assignMessage("TVPWarnDebugOptionEnabled", "Debug option enabled");
global.System.assignMessage("TVPCommandLineParamIgnoredAndDefaultUsed", "Command line parameter %1 = %2 is invalid. It's used default.");
global.System.assignMessage("TVPInvalidCommandLineParam", "Command line parameter %1 = %2 is invalid.");
global.System.assignMessage("TVPNotImplemented", "Not implemented");
global.System.assignMessage("TVPCannotOpenStorage", "Cannot open storage %1");
global.System.assignMessage("TVPCannotFindStorage", "Cannot find storage %1");
global.System.assignMessage("TVPCannotOpenStorageForWrite", "Cannot open storage %1 for writing");
global.System.assignMessage("TVPStorageInArchiveNotFound", "Cannot find storage %1 in archive %2");
global.System.assignMessage("TVPInvalidPathName", "Invalid path name %1");
global.System.assignMessage("TVPUnsupportedMediaName", "Not supported media type \"%1\"");
global.System.assignMessage("TVPCannotUnbindXP3EXE", "Cannot unbind XP3 exe %1");
global.System.assignMessage("TVPCannotFindXP3Mark", "%1 is not XP3 archive or unsupported");
global.System.assignMessage("TVPMissingPathDelimiterAtLast", "Use path delimiter '>' or '/'");
global.System.assignMessage("TVPFilenameContainsSharpWarn", "(Attention) Filename \"%1\" contains '#'");
global.System.assignMessage("TVPCannotGetLocalName", "Cannot get local name from %1");
global.System.assignMessage("TVPReadError", "Read error");
global.System.assignMessage("TVPWriteError", "Write error");
global.System.assignMessage("TVPSeekError", "Seek error");
global.System.assignMessage("TVPTruncateError", "Truncate error");
global.System.assignMessage("TVPInsufficientMemory", "Cannot allocate memory");
global.System.assignMessage("TVPUncompressionFailed", "Unpompression failed");
global.System.assignMessage("TVPCompressionFailed", "Compression failed");
global.System.assignMessage("TVPCannotWriteToArchive", "Cannot write to archive");
global.System.assignMessage("TVPUnsupportedCipherMode", "%1 is unsupported cipger mode");
global.System.assignMessage("TVPUnsupportedEncoding", "%1 is unsupported encoding");
global.System.assignMessage("TVPUnsupportedModeString", "%1 is unsupported mode string");
global.System.assignMessage("TVPUnknownGraphicFormat", "Unknown graphic format %1");
global.System.assignMessage("TVPCannotSuggestGraphicExtension", "Cannot suggest graphics extension for %1");
global.System.assignMessage("TVPMaskSizeMismatch", "Mask size mismath");
global.System.assignMessage("TVPProvinceSizeMismatch", "Province image %1 size mismatch");
global.System.assignMessage("TVPImageLoadError", "Image Load Error /%1");
global.System.assignMessage("TVPJPEGLoadError", "JPEG Read Error /%1");
global.System.assignMessage("TVPPNGLoadError", "PNG Read Error /%1");
global.System.assignMessage("TVPERILoadError", "ERI Read Error /%1");
global.System.assignMessage("TVPTLGLoadError", "TLG Read Error /%1");
global.System.assignMessage("TVPInvalidImageSaveType", "Invalid image save type (%1)");
global.System.assignMessage("TVPInvalidOperationFor8BPP", "Invalid operation for 8bpp");
global.System.assignMessage("TVPInvalidOperationFor32BPP", "Invalid operation for 32bpp");
global.System.assignMessage("TVPSpecifyWindow", "Specify Window class object");
global.System.assignMessage("TVPSpecifyLayer", "Specify Layer class object");
global.System.assignMessage("TVPSpecifyLayerOrBitmap", "Specify Layer or Bitmap class object");
global.System.assignMessage("TVPCannotAcceptModeAuto", "Cannot accept omAuto mode");
global.System.assignMessage("TVPCannotCreateEmptyLayerImage", "Cannot create empty layer image");
global.System.assignMessage("TVPCannotSetPrimaryInvisible", "Cannot set primary layer invisible");
global.System.assignMessage("TVPCannotMovePrimary", "Cannot move primary layer");
global.System.assignMessage("TVPCannotSetParentSelf", "Cannot set parent self");
global.System.assignMessage("TVPCannotMoveNextToSelfOrNotSiblings", "Cannot move next to self or not siblings");
global.System.assignMessage("TVPCannotMovePrimaryOrSiblingless", "Cannot move primary or siblingless");
global.System.assignMessage("TVPCannotMoveToUnderOtherPrimaryLayer", "Cannot move to under Other primary layer");
global.System.assignMessage("TVPInvalidImagePosition", "Invalid Image position");
global.System.assignMessage("TVPCannotSetModeToDisabledOrModal", "Cannot set Mode to disabled or modal");
global.System.assignMessage("TVPNotDrawableLayerType", "Not drawable layer type");
global.System.assignMessage("TVPSourceLayerHasNoImage", "Source layer has no image");
global.System.assignMessage("TVPUnsupportedLayerType", "Unsupported layer type %1");
global.System.assignMessage("TVPNotDrawableFaceType", "Not drawble face type %1");
global.System.assignMessage("TVPCannotConvertLayerTypeUsingGivenDirection", "Cannot convert layer type using given direction");
global.System.assignMessage("TVPNegativeOpacityNotSupportedOnThisFace", "Negative opacity not supported on this face");
global.System.assignMessage("TVPSrcRectOutOfBitmap", "Source rectangle out of bitmap");
global.System.assignMessage("TVPBoxBlurAreaMustContainCenterPixel", "Box blur area must contain center pixel");
global.System.assignMessage("TVPBoxBlurAreaMustBeSmallerThan16Million", "Box blur area must be smaller than 16 million");
global.System.assignMessage("TVPCannotChangeFocusInProcessingFocus", "Cannot change focus in processing focus");
global.System.assignMessage("TVPWindowHasNoLayer", "Window has no layer");
global.System.assignMessage("TVPWindowHasAlreadyPrimaryLayer", "Window has already primary layer");
global.System.assignMessage("TVPSpecifiedEventNeedsParameter", "Specified event %1 needs parameter");
global.System.assignMessage("TVPSpecifiedEventNeedsParameter2", "Specified event %1 needs parameter %2");
global.System.assignMessage("TVPSpecifiedEventNameIsUnknown", "Specified event name %1 is unknown");
global.System.assignMessage("TVPOutOfRectangle", "Out of Rectangle");
global.System.assignMessage("TVPInvalidMethodInUpdating", "Invalid method in updating");
global.System.assignMessage("TVPCannotCreateInstance", "Cannot create instance");
global.System.assignMessage("TVPUnknownWaveFormat", "Unknown wave format %1");
global.System.assignMessage("TVPCurrentTransitionMustBeStopping", "Current transition must be stopping");
global.System.assignMessage("TVPTransHandlerError", "Transition handler error %1");
global.System.assignMessage("TVPTransAlreadyRegistered", "Transition %1 already registerd");
global.System.assignMessage("TVPCannotFindTransHander", "Cannot find transition handler %1");
global.System.assignMessage("TVPSpecifyTransitionSource", "Specify transition source");
global.System.assignMessage("TVPLayerCannotHaveImage", "This layer cannot have image");
global.System.assignMessage("TVPTransitionSourceAndDestinationMustHaveImage", "Transition source and destination must have image");
global.System.assignMessage("TVPCannotLoadRuleGraphic", "Cannot load rule graphics %1");
global.System.assignMessage("TVPSpecifyOption", "Specify option %1");
global.System.assignMessage("TVPTransitionLayerSizeMismatch", "Transition layer size mismatch %1 and %2");
global.System.assignMessage("TVPTransitionMutualSource", "Transition mutual source");
global.System.assignMessage("TVPHoldDestinationAlphaParameterIsNowDeprecated", "Warring : Method %1 %2th parameter had is ignore. Hold destination alpha parameter is now deprecated.");
global.System.assignMessage("TVPCannotConnectMultipleWaveSoundBufferAtOnce", "Cannot connect multiple wave sound buffer at once");
global.System.assignMessage("TVPInvalidWindowSizeMustBeIn64to32768", "Invalid window size must be in 64 to 32768");
global.System.assignMessage("TVPInvalidOverlapCountMustBeIn2to32", "Invalid overlap count must be in 2 to 32");
global.System.assignMessage("TVPCurrentlyAsyncLoadBitmap", "Currently async load bitmap");
global.System.assignMessage("TVPFaildClipboardCopy", "copying to clipboard failed.");
global.System.assignMessage("TVPInvalidUTF16ToUTF8", "Invalid UTF-16 to UTF-8");
global.System.assignMessage("TVPInfoLoadingStartupScript", "(info) Loading startup script : ");
global.System.assignMessage("TVPInfoStartupScriptEnded", "(info) Startup script ended.");
global.System.assignMessage("TVPTjsCharMustBeTwoOrFour", "sizeof(tjs_char) must be 2 or 4.");
global.System.assignMessage("TVPMediaNameHadAlreadyBeenRegistered", "Media name \"%1\" had already been registered");
global.System.assignMessage("TVPMediaNameIsNotRegistered", "Media name \"%1\" is not registered");
global.System.assignMessage("TVPInfoRebuildingAutoPath", "(info) Rebuilding Auto Path Table ...");
global.System.assignMessage("TVPInfoTotalFileFoundAndActivated", "(info) Total %1 file(s) found, %2 file(s) activated. (%3ms)");
global.System.assignMessage("TVPErrorInRetrievingSystemOnActivateOnDeactivate", "Error in retrieving System.onActivate/onDeactivate : %1");
global.System.assignMessage("TVPTheHostIsNotA16BitUnicodeSystem", "The host is not a 16-bit unicode system.");
global.System.assignMessage("TVPInfoTryingToReadXp3VirtualFileSystemInformationFrom", "(info) Trying to read XP3 virtual file system information from : %1");
global.System.assignMessage("TVPSpecifiedStorageHadBeenProtected", "Specified storage had been protected!");
global.System.assignMessage("TVPInfoFailed", "(info) Failed.");
global.System.assignMessage("TVPInfoDoneWithContains", "(info) Done. (contains %1 file(s), %2 segment(s))");
global.System.assignMessage("TVPSeparatorCRLF", "\r\n\r\n\r\n==============================================================================\r\n==============================================================================\r\n");
global.System.assignMessage("TVPSeparatorCR", "\n\n\n==============================================================================\n==============================================================================\n");
global.System.assignMessage("TVPDefaultFontName", "DEFAULT_GUI_FONT");
global.System.assignMessage("TVPCannotOpenFontFile", "Can't open font file '%1$s'");
global.System.assignMessage("TVPFontCannotBeUsed", "Font '%1$s' cannot be used");
global.System.assignMessage("TVPFontRasterizeError", "Font Rasterize error.");
global.System.assignMessage("TVPBitFieldsNotSupported", "BITFIELDS not supported.");
global.System.assignMessage("TVPCompressedBmpNotSupported", "Compressed BMP not supported.");
global.System.assignMessage("TVPUnsupportedColorModeForPalettImage", "Unsupported color mode for palettized image.");
global.System.assignMessage("TVPNotWindowsBmp", "This is not a Windows BMP file or an OS/2 BMP file.");
global.System.assignMessage("TVPUnsupportedHeaderVersion", "Non-supported header version.");
global.System.assignMessage("TVPInfoTouching", "(info) Touching ");
global.System.assignMessage("TVPAbortedTimeOut", " ... aborted [timed out]");
global.System.assignMessage("TVPAbortedLimitByte", " ... aborted [limit bytes exceeded]");
global.System.assignMessage("TVPFaildGlyphForDrawGlyph", "Faild glyph for DrawGlyph.");
global.System.assignMessage("TVPLayerObjectIsNotProperlyConstructed", "Panic! Layer object is not properly constructed. The constructor was not called??");
global.System.assignMessage("TVPUnknownUpdateType", "Unknown update type");
global.System.assignMessage("TVPUnknownTransitionType", "Unknown transition type");
global.System.assignMessage("TVPUnsupportedUpdateTypeTutGiveUpdate", "Update type of tutGiveUpdate is not yet supported");
global.System.assignMessage("TVPErrorCode", "error code : ");
global.System.assignMessage("TVPUnsupportedJpegPalette", "JPEG does not support palettized image");
global.System.assignMessage("TVPLibpngError", "libpng error.");
global.System.assignMessage("TVPUnsupportedColorTypePalette", "Unsupported color type for palattized image");
global.System.assignMessage("TVPUnsupportedColorType", "Unsupported color type");
global.System.assignMessage("TVPTooLargeImage", "Too large image");
global.System.assignMessage("TVPPngSaveError", "PNG save error.");
global.System.assignMessage("TVPTlgUnsupportedUniversalTransitionRule", "TLG cannot be used as universal transition rule, province(_p) or mask(_m) images.");
global.System.assignMessage("TVPUnsupportedColorCount", "Unsupported color count : ");
global.System.assignMessage("TVPDataFlagMustBeZero", "Data flag must be 0 (any flags are not yet supported)");
global.System.assignMessage("TVPUnsupportedColorTypeColon", "Unsupported color type : ");
global.System.assignMessage("TVPUnsupportedExternalGolombBitLengthTable", "External golomb bit length table is not yet supported.");
global.System.assignMessage("TVPUnsupportedEntropyCodingMethod", "Unsupported entropy coding method");
global.System.assignMessage("TVPInvalidTlgHeaderOrVersion", "Invalid TLG header or unsupported TLG version.");
global.System.assignMessage("TVPTlgMalformedTagMissionColonAfterNameLength", "Malformed TLG SDS tag structure, missing colon after name length");
global.System.assignMessage("TVPTlgMalformedTagMissionEqualsAfterName", "Malformed TLG SDS tag structure, missing equals after name");
global.System.assignMessage("TVPTlgMalformedTagMissionColonAfterVaueLength", "Malformed TLG SDS tag structure, missing colon after value length");
global.System.assignMessage("TVPTlgMalformedTagMissionCommaAfterTag", "Malformed TLG SDS tag structure, missing comma after a tag");
global.System.assignMessage("TVPFileSizeIsZero", "File size is zero.");
global.System.assignMessage("TVPMemoryAllocationError", "Memory allocation error.");
global.System.assignMessage("TVPFileReadError", "File read error.");
global.System.assignMessage("TVPInvalidPrerenderedFontFile", "Signature not found or invalid pre-rendered font file.");
global.System.assignMessage("TVPNot16BitUnicodeFontFile", "Not a 16-bit UNICODE font file.");
global.System.assignMessage("TVPInvalidHeaderVersion", "Invalid header version.");
global.System.assignMessage("TVPTlgInsufficientMemory", "SaveTLG6: Insufficient memory");
global.System.assignMessage("TVPTlgTooLargeBitLength", "SaveTLG6: Too large bit length (given image may be too large)");
global.System.assignMessage("TVPCannotRetriveInterfaceFromDrawDevice", "Could not retrive interface from given draw device");
global.System.assignMessage("TVPIllegalCharacterConversionUTF16toUTF8", "Illegal character conversion. UTF-16 to UTF-8.");
global.System.assignMessage("TVPRequireLayerTreeOwnerInterfaceInterface", "require layerTreeOwnerInterface interface");
// Core/win32
global.System.assignMessage("TVPScriptExceptionRaised", "Script exception raised");
global.System.assignMessage("TVPHardwareExceptionRaised", "Hardware exception raised");
global.System.assignMessage("TVPMainCDPName", "Script Editor (Main)");
global.System.assignMessage("TVPExceptionCDPName", "Script Editor (Exception)");
global.System.assignMessage("TVPCannnotLocateUIDLLForFolderSelection", "Not found krdevui.dll");
global.System.assignMessage("TVPInvalidUIDLL", "Invalid krdevui.dll");
global.System.assignMessage("TVPInvalidBPP", "Invalid bpp");
global.System.assignMessage("TVPCannotLoadPlugin", "Cannot load Plugin %1");
global.System.assignMessage("TVPNotValidPlugin", "Not valid plugin %1");
global.System.assignMessage("TVPPluginUninitFailed", "Faild to release plugin");
global.System.assignMessage("TVPCannnotLinkPluginWhilePluginLinking", "Cannot link plugin while plugin linking");
global.System.assignMessage("TVPNotSusiePlugin", "Not Susie Plugin");
global.System.assignMessage("TVPSusiePluginError", "Susie Plugin error : %1");
global.System.assignMessage("TVPCannotReleasePlugin", "Cannot release plugin");
global.System.assignMessage("TVPNotLoadedPlugin", "Not loaded plugin %1");
global.System.assignMessage("TVPCannotAllocateBitmapBits", "Cannot allocate memory for Bitmap : %1 (size=%2)");
global.System.assignMessage("TVPScanLineRangeOver", "Scan line %1 is range over (0 to %2)");
global.System.assignMessage("TVPPluginError", "Plugin Error : %1");
global.System.assignMessage("TVPInvalidCDDADrive", "Invalid CD-DA Drive");
global.System.assignMessage("TVPCDDADriveNotFound", "CD-DA Drive not found");
global.System.assignMessage("TVPMCIError", "MCI Error : %1");
global.System.assignMessage("TVPInvalidSMF", "Invalid SMF : %1");
global.System.assignMessage("TVPMalformedMIDIMessage", "Malformed MIDI Message");
global.System.assignMessage("TVPCannotInitDirectSound", "DirectSound Initialize file : %1");
global.System.assignMessage("TVPCannotCreateDSSecondaryBuffer", "Cannot create DirectSound secondary buffer : %1/%2");
global.System.assignMessage("TVPInvalidLoopInformation", "Invalid loop information %1");
global.System.assignMessage("TVPNotChildMenuItem", "Not child menu Item");
global.System.assignMessage("TVPCannotInitDirect3D", "Cannot initialize Direct3D : %1");
global.System.assignMessage("TVPCannotFindDisplayMode", "Cannot find display mode : %1");
global.System.assignMessage("TVPCannotSwitchToFullScreen", "Cannot switch to fullscreen : %1");
global.System.assignMessage("TVPInvalidPropertyInFullScreen", "Invalid property in fullscreen : %1");
global.System.assignMessage("TVPInvalidMethodInFullScreen", "Invalid method in fullscreen : %1");
global.System.assignMessage("TVPCannotLoadCursor", "Cannot load mouse cursor : %1");
global.System.assignMessage("TVPCannotLoadKrMovieDLL", "Cannot load krmovie.dll");
global.System.assignMessage("TVPInvalidKrMovieDLL", "Invalid krmovie.dll");
global.System.assignMessage("TVPErrorInKrMovieDLL", "Error in krmovie.dll : %1");
global.System.assignMessage("TVPWindowAlreadyMissing", "Window already missing");
global.System.assignMessage("TVPPrerenderedFontMappingFailed", "Prerendered font mapping failed : %1");
global.System.assignMessage("TVPConfigFailOriginalFileCannotBeRewritten", "Cannot write %1.");
global.System.assignMessage("TVPConfigFailTempExeNotErased", "Did not exit %1. Cannot delete file.");
global.System.assignMessage("TVPExecutionFail", "Cannot execute %1.");
global.System.assignMessage("TVPPluginUnboundFunctionError", "Plugin require %1 funcion. Bat not found function in this file.");
global.System.assignMessage("TVPExceptionHadBeenOccured", " = (Exception)");
global.System.assignMessage("TVPConsoleResult", "Console : ");
global.System.assignMessage("TVPInfoListingFiles", "(info) Listing files in %1 …");
global.System.assignMessage("TVPInfoTotalPhysicalMemory", "(info) Total physical memory : %1");
global.System.assignMessage("TVPInfoSelectedProjectDirectory", "(info) Selected project directory : %1");
global.System.assignMessage("TVPTooSmallExecutableSize", "too small executable size.");
global.System.assignMessage("TVPInfoLoadingExecutableEmbeddedOptionsFailed", "(info) Loading executable embedded options failed (ignoring) : %1");
global.System.assignMessage("TVPInfoLoadingExecutableEmbeddedOptionsSucceeded", "(info) Loading executable embedded options succeeded.");
global.System.assignMessage("TVPFileNotFound", "file not found.");
global.System.assignMessage("TVPInfoLoadingConfigurationFileFailed", "(info) Loading configuration file \"%1\" failed (ignoring) : %2");
global.System.assignMessage("TVPInfoLoadingConfigurationFileSucceeded", "(info) Loading configuration file \"%1\" succeeded.");
global.System.assignMessage("TVPInfoDataPathDoesNotExistTryingToMakeIt", "(info) Data path does not exist, trying to make it ... %1");
global.System.assignMessage("TVPOk", "ok.");
global.System.assignMessage("TVPFaild", "failed.");
global.System.assignMessage("TVPInfoDataPath", "(info) Data path : %1");
global.System.assignMessage("TVPInfoSpecifiedOptionEarlierItemHasMorePriority", "(info) Specified option(s) (earlier item has more priority) :");
global.System.assignMessage("TVPNone", " (none)");
global.System.assignMessage("TVPInfoCpuClockRoughly", "(info) CPU clock (roughly) : %dMHz");
global.System.assignMessage("TVPProgramStartedOn", "Program started on %1 (%2)");
global.System.assignMessage("TVPKirikiri", "Kirikiri");
global.System.assignMessage("TVPUnknownError", "Unknown error!");
global.System.assignMessage("TVPExitCode", "Exit code: %d\n");
global.System.assignMessage("TVPFatalError", "Fatal Error");
global.System.assignMessage("TVPEnableDigitizer", "Enable Digitizer");
global.System.assignMessage("TVPTouchIntegratedTouch", "The device has an integrated touch digitizer. ");
global.System.assignMessage("TVPTouchExternalTouch", "The device has an external touch digitizer. ");
global.System.assignMessage("TVPTouchIntegratedPen", "The device has an integrated pen digitizer.");
global.System.assignMessage("TVPTouchExternalPen", "The device has an external pen digitizer.");
global.System.assignMessage("TVPTouchMultiInput", "The device supports multiple sources of digitizer input. ");
global.System.assignMessage("TVPTouchReady", "The device is ready to receive digitizer input.");
global.System.assignMessage("TVPCpuCheckFailure", "CPU check failure.");
global.System.assignMessage("TVPCpuCheckFailureCpuFamilyOrLesserIsNotSupported", "CPU check failure: CPU family 4 or lesser is not supported\r\n%1");
global.System.assignMessage("TVPInfoCpuNumber", "(info) CPU #%1 : ");
global.System.assignMessage("TVPCpuCheckFailureNotSupprtedCpu", "CPU check failure: Not supported CPU\r\n%1");
global.System.assignMessage("TVPInfoFinallyDetectedCpuFeatures", "(info) finally detected CPU features : %1");
global.System.assignMessage("TVPCpuCheckFailureNotSupportedCpu", "CPU check failure: Not supported CPU\r\n%1");
global.System.assignMessage("TVPInfoCpuClock", "(info) CPU clock : %.1fMHz");
global.System.assignMessage("TVPLayerBitmapBufferUnderrunDetectedCheckYourDrawingCode", "Layer bitmap: Buffer underrun detected. Check your drawing code!");
global.System.assignMessage("TVPLayerBitmapBufferOverrunDetectedCheckYourDrawingCode", "Layer bitmap: Buffer overrun detected. Check your drawing code!");
global.System.assignMessage("TVPFaildToCreateDirect3D", "Faild to create Direct3D9.");
global.System.assignMessage("TVPFaildToDecideBackbufferFormat", "Faild to decide backbuffer format.");
global.System.assignMessage("TVPFaildToCreateDirect3DDevice", "Faild to create Direct3D9 Device.");
global.System.assignMessage("TVPFaildToSetViewport", "Faild to set viewport.");
global.System.assignMessage("TVPFaildToSetRenderState", "Faild to set render state.");
global.System.assignMessage("TVPWarningImageSizeTooLargeMayBeCannotCreateTexture", "warning : Image size too large. May be cannot create texture.");
global.System.assignMessage("TVPUsePowerOfTwoSurface", "Use power of two surface.");
global.System.assignMessage("TVPCannotAllocateD3DOffScreenSurface", "Cannot allocate D3D off-screen surface/HR=%1");
global.System.assignMessage("TVPBasicDrawDeviceFailedToCreateDirect3DDevices", "BasicDrawDevice: Failed to create Direct3D devices: %1");
global.System.assignMessage("TVPBasicDrawDeviceFailedToCreateDirect3DDevicesUnknownReason", "BasicDrawDevice: Failed to create Direct3D devices: unknown reason");
global.System.assignMessage("TVPBasicDrawDeviceTextureHasAlreadyBeenLocked", "BasicDrawDevice: Texture has already been locked (StartBitmapCompletion() has been called twice without EndBitmapCompletion()), unlocking the texture.");
global.System.assignMessage("TVPInternalErrorResult", "Internal error/HR=%1");
global.System.assignMessage("TVPBasicDrawDeviceInfPolygonDrawingFailed", "BasicDrawDevice: (inf) Polygon drawing failed/HR=%1");
global.System.assignMessage("TVPBasicDrawDeviceInfDirect3DDevicePresentFailed", "BasicDrawDevice: (inf) IDirect3DDevice::Present failed/HR=%1");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeRestart", "ChangeDisplaySettings failed: DISP_CHANGE_RESTART");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeBadFlags", "ChangeDisplaySettings failed: DISP_CHANGE_BADFLAGS");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeBadParam", "ChangeDisplaySettings failed: DISP_CHANGE_BADPARAM");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeFailed", "ChangeDisplaySettings failed: DISP_CHANGE_FAILED");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeBadMode", "ChangeDisplaySettings failed: DISP_CHANGE_BADMODE");
global.System.assignMessage("TVPChangeDisplaySettingsFailedDispChangeNotUpdated", "ChangeDisplaySettings failed: DISP_CHANGE_NOTUPDATED");
global.System.assignMessage("TVPChangeDisplaySettingsFailedUnknownReason", "ChangeDisplaySettings failed: unknown reason (%1)");
global.System.assignMessage("TVPFailedToCreateScreenDC", "Failed to create screen DC");
global.System.assignMessage("TVPFailedToCreateOffscreenBitmap", "Failed to create offscreen bitmap");
global.System.assignMessage("TVPFailedToCreateOffscreenDC", "Failed to create offscreen DC");
global.System.assignMessage("TVPInfoSusiePluginInfo", "(info) Susie plugin info : %1");
global.System.assignMessage("TVPSusiePluginUnsupportedBitmapHeader", "Non-supported bitmap header was given from susie plug-in.");
global.System.assignMessage("TVPBasicDrawDeviceFailedToCreateDirect3DDevice", "BasicDrawDevice: Failed to create Direct3D Device: %1");
global.System.assignMessage("TVPBasicDrawDeviceFailedToCreateDirect3DDeviceUnknownReason", "BasicDrawDevice: Failed to create Direct3D Device: unknown reason");
global.System.assignMessage("TVPCouldNotCreateAnyDrawDevice", "Fatal: Could not create any drawer objects.");
global.System.assignMessage("TVPBasicDrawDeviceDoesNotSupporteLayerManagerMoreThanOne", "\"basic draw\" device does not support layer manager more than 1");
global.System.assignMessage("TVPInvalidVideoSize", "Invalid video size");
global.System.assignMessage("TVPRoughVsyncIntervalReadFromApi", "Rough VSync interval read from API : %1");
global.System.assignMessage("TVPRoughVsyncIntervalStillSeemsWrong", "Rough VSync interval still seems wrong, assuming default value (16)");
global.System.assignMessage("TVPInfoFoundDirect3DInterface", "(info) IDirect3D9 or higher detected. Retrieving current Direct3D driver information...");
global.System.assignMessage("TVPInfoFaild", "(info) Failed.");
global.System.assignMessage("TVPInfoDirect3D", "(info) Loading Direct3D ...");
global.System.assignMessage("TVPCannotLoadD3DDLL", "Cannot load d3d9.dll");
global.System.assignMessage("TVPNotFoundDirect3DCreate", "Missing Direct3DCreate9 in d3d9.dll");
global.System.assignMessage("TVPInfoEnvironmentUsing", "(info) environment: using %1");
global.System.assignMessage("TVPInfoSearchBestFullscreenResolution", "(info) Searching best fullscreen resolution ...");
global.System.assignMessage("TVPInfoConditionPreferredScreenMode", "(info) condition: preferred screen mode: %1");
global.System.assignMessage("TVPInfoConditionMode", "(info) condition: mode: %1");
global.System.assignMessage("TVPInfoConditionZoomMode", "(info) condition: zoom mode: %1");
global.System.assignMessage("TVPInfoEnvironmentDefaultScreenMode", "(info) environment: default screen mode: %1");
global.System.assignMessage("TVPInfoEnvironmentDefaultScreenAspectRatio", "(info) environment: default screen aspect ratio: %1 : %2");
global.System.assignMessage("TVPInfoEnvironmentAvailableDisplayModes", "(info) environment: available display modes:");
global.System.assignMessage("TVPInfoNotFoundScreenModeFromDriver", "(info) Panic! There is no reasonable candidate screen mode provided from the driver ... trying to use the default screen size and color depth ...");
global.System.assignMessage("TVPInfoResultCandidates", "(info) result: candidates:");
global.System.assignMessage("TVPInfoTryScreenMode", "(info) Trying screen mode: %1");
global.System.assignMessage("TVPAllScreenModeError", "All screen mode has been tested, but no modes available at all.");
global.System.assignMessage("TVPInfoChangeScreenModeSuccess", "(info) Changing screen mode succeeded");
global.System.assignMessage("TVPSelectXP3FileOrFolder", "Select XP3 file or folder");
global.System.assignMessage("TVPD3dErrDeviceLost", "D3D : The device has been lost but cannot be reset at this time.");
global.System.assignMessage("TVPD3dErrDriverIinternalError", "D3D : Internal driver error. Applications should destroy and recreate the device when receiving this error. ");
global.System.assignMessage("TVPD3dErrInvalidCall", "D3D : The method call is invalid. For example, a method's parameter may not be a valid pointer.");
global.System.assignMessage("TVPD3dErrOutOfVideoMemory", "D3D : Direct3D does not have enough display memory to perform the operation. ");
global.System.assignMessage("TVPD3dErrOutOfMemory", "D3D : Direct3D could not allocate sufficient memory to complete the call.");
global.System.assignMessage("TVPD3dErrWrongTextureFormat", "D3D : The pixel format of the texture surface is not valid.");
global.System.assignMessage("TVPD3dErrUnsuportedColorOperation", "D3D : The device does not support a specified texture-blending operation for color values.");
global.System.assignMessage("TVPD3dErrUnsuportedColorArg", "D3D : The device does not support a specified texture-blending argument for color values.");
global.System.assignMessage("TVPD3dErrUnsuportedAalphtOperation", "D3D : The device does not support a specified texture-blending operation for the alpha channel.");
global.System.assignMessage("TVPD3dErrUnsuportedAlphaArg", "D3D : The device does not support a specified texture-blending argument for the alpha channel.");
global.System.assignMessage("TVPD3dErrTooManyOperations", "D3D : The application is requesting more texture-filtering operations than the device supports.");
global.System.assignMessage("TVPD3dErrConflictioningTextureFilter", "D3D : The current texture filters cannot be used together.");
global.System.assignMessage("TVPD3dErrUnsuportedFactorValue", "D3D : The device does not support the specified texture factor value. Not used; provided only to support older drivers.");
global.System.assignMessage("TVPD3dErrConflictioningRenderState", "D3D : The currently set render states cannot be used together.");
global.System.assignMessage("TVPD3dErrUnsupportedTextureFilter", "D3D : The device does not support the specified texture filter.");
global.System.assignMessage("TVPD3dErrConflictioningTexturePalette", "D3D : The current textures cannot be used simultaneously.");
global.System.assignMessage("TVPD3dErrNotFound", "D3D : The requested item was not found.");
global.System.assignMessage("TVPD3dErrMoreData", "D3D : There is more data available than the specified buffer size can hold.");
global.System.assignMessage("TVPD3dErrDeviceNotReset", "D3D : The device has been lost but can be reset at this time.");
global.System.assignMessage("TVPD3dErrNotAvailable", "D3D : This device does not support the queried technique.");
global.System.assignMessage("TVPD3dErrInvalidDevice", "D3D : The requested device type is not valid.");
global.System.assignMessage("TVPD3dErrDriverInvalidCall", "D3D : Not used.");
global.System.assignMessage("TVPD3dErrWasStillDrawing", "D3D : The previous blit operation that is transferring information to or from this surface is incomplete.");
global.System.assignMessage("TVPD3dErrDeviceHung", "D3D : The device that returned this code caused the hardware adapter to be reset by the OS.");
global.System.assignMessage("TVPD3dErrUnsupportedOverlay", "D3D : The device does not support overlay for the specified size or display mode. ");
global.System.assignMessage("TVPD3dErrUnsupportedOverlayFormat", "D3D : The device does not support overlay for the specified surface format. ");
global.System.assignMessage("TVPD3dErrCannotProtectContent", "D3D : The specified content cannot be protected.");
global.System.assignMessage("TVPD3dErrUnsupportedCrypto", "D3D : The specified cryptographic algorithm is not supported.");
global.System.assignMessage("TVPD3dErrPresentStatisticsDisJoint", "D3D : The present statistics have no orderly sequence.");
global.System.assignMessage("TVPD3dErrDeviceRemoved", "D3D : The hardware adapter has been removed.");
global.System.assignMessage("TVPD3dOkNoAutoGen", "D3D : This is a success code. However, the autogeneration of mipmaps is not supported for this format.");
global.System.assignMessage("TVPD3dErrFail", "D3D : An undetermined error occurred inside the Direct3D subsystem.");
global.System.assignMessage("TVPD3dErrInvalidArg", "D3D : An invalid parameter was passed to the returning function.");
global.System.assignMessage("TVPD3dUnknownError", "D3D : Unknown error.");
global.System.assignMessage("TVPExceptionAccessViolation", "Access Violation: The thread attempts to read from or write to a virtual address for which it does not have access.");
global.System.assignMessage("TVPExceptionBreakpoint", "Break Point: A breakpoint is encountered.");
global.System.assignMessage("TVPExceptionDatatypeMisalignment", "Data Type Misalignment: The thread attempts to read or write data that is misaligned on hardware that does not provide alignment. For example, 16-bit values must be aligned on 2-byte boundaries, 32-bit values on 4-byte boundaries, and so on.");
global.System.assignMessage("TVPExceptionSingleStep", "Single Step: A trace trap or other single instruction mechanism signals that one instruction is executed.");
global.System.assignMessage("TVPExceptionArrayBoundsExceeded", "Array Bounds Exceede: The thread attempts to access an array element that is out of bounds, and the underlying hardware supports bounds checking.");
global.System.assignMessage("TVPExceptionFltDenormalOperand", "Denormal Operand: One of the operands in a floating point operation is denormal. A denormal value is one that is too small to represent as a standard floating point value.");
global.System.assignMessage("TVPExceptionFltDivideByZero", "Divide By Zero: The thread attempts to divide a floating point value by a floating point divisor of 0 (zero).");
global.System.assignMessage("TVPExceptionFltInexactResult", "Inexact Result: The result of a floating point operation cannot be represented exactly as a decimal fraction.");
global.System.assignMessage("TVPExceptionFltInvalidOperation", "Invalid Operation: A floating point exception that is not included in this list.");
global.System.assignMessage("TVPExceptionFltOverflow", "Overflow: The exponent of a floating point operation is greater than the magnitude allowed by the corresponding type.");
global.System.assignMessage("TVPExceptionFltStackCheck", "Stack Check: The stack has overflowed or underflowed, because of a floating point operation.");
global.System.assignMessage("TVPExceptionFltUnderflow", "Underflow: The exponent of a floating point operation is less than the magnitude allowed by the corresponding type.");
global.System.assignMessage("TVPExceptionIntDivideByZero", "Divide By Zero: The thread attempts to divide an integer value by an integer divisor of 0 (zero).");
global.System.assignMessage("TVPExceptionIntOverflow", "Overflow: The result of an integer operation creates a value that is too large to be held by the destination register. In some cases, this will result in a carry out of the most significant bit of the result. Some operations do not set the carry flag.");
global.System.assignMessage("TVPExceptionPrivInstruction", "Priv Instruction: The thread attempts to execute an instruction with an operation that is not allowed in the current computer mode.");
global.System.assignMessage("TVPExceptionNoncontinuableException", "Noncontinuable Exception: The thread attempts to continue execution after a non-continuable exception occurs.");
global.System.assignMessage("TVPExceptionGuardPage", "Guard Page: The thread accessed memory allocated with the PAGE_GUARD modifier.");
global.System.assignMessage("TVPExceptionIllegalInstruction", "Illegal Instruction: The thread tries to execute an invalid instruction.");
global.System.assignMessage("TVPExceptionInPageError", "In Page Error: The thread tries to access a page that is not present, and the system is unable to load the page. For example, this exception might occur if a network connection is lost while running a program over a network.");
global.System.assignMessage("TVPExceptionInvalidDisposition", "Invalid Disposition: An exception handler returns an invalid disposition to the exception dispatcher. Programmers using a high-level language such as C should never encounter this exception.");
global.System.assignMessage("TVPExceptionInvalidHandle", "Invalid Handle: The thread used a handle to a kernel object that was invalid (probably because it had been closed.)");
global.System.assignMessage("TVPExceptionStackOverflow", "Stack Overflow: The thread uses up its stack.");
global.System.assignMessage("TVPExceptionUnwindCconsolidate", "Unwind Consolidate: A frame consolidation has been executed.");
global.System.assignMessage("TVPCannotShowModalAreadyShowed", "Cannot Show Modal.");
global.System.assignMessage("TVPCannotShowModalSingleWindow", "Cannot Show Modal. When it is single window.");
// TJS2
global.System.assignMessage("TJSInternalError", "Internal error");
global.System.assignMessage("TJSWarning", "Warning: ");
global.System.assignMessage("TJSWarnEvalOperator", "Non-global post-! operator is used (note that the post-! operator behavior is changed on TJS2 version 2.4.1)");
global.System.assignMessage("TJSNarrowToWideConversionError", "Cannot convert given narrow string to wide string");
global.System.assignMessage("TJSVariantConvertError", "Cannot convert the variable type (%1 to %2)");
global.System.assignMessage("TJSVariantConvertErrorToObject", "Cannot convert the variable type (%1 to Object)");
global.System.assignMessage("TJSIDExpected", "Specify an ID");
global.System.assignMessage("TJSSubstitutionInBooleanContext", "Substitution in boolean context (use form of '(A=B)!=0' to compare to zero)");
global.System.assignMessage("TJSCannotModifyLHS", "This expression cannot be used as a lvalue");
global.System.assignMessage("TJSInsufficientMem", "Insufficient memory");
global.System.assignMessage("TJSCannotGetResult", "Cannot get the value of this expression");
global.System.assignMessage("TJSNullAccess", "Accessing to null object");
global.System.assignMessage("TJSMemberNotFound", "Member \"%1\" does not exist");
global.System.assignMessage("TJSMemberNotFoundNoNameGiven", "Member does not exist");
global.System.assignMessage("TJSNotImplemented", "Called method is not implemented");
global.System.assignMessage("TJSInvalidParam", "Invalid argument");
global.System.assignMessage("TJSBadParamCount", "Invalid argument count");
global.System.assignMessage("TJSInvalidType", "Not a function or invalid method/property type");
global.System.assignMessage("TJSSpecifyDicOrArray", "Specify a Dictionary object or an Array object");
global.System.assignMessage("TJSSpecifyArray", "Specify an Array object");
global.System.assignMessage("TJSStringDeallocError", "Cannot free the string memory block");
global.System.assignMessage("TJSStringAllocError", "Cannot allocate the string memory block");
global.System.assignMessage("TJSMisplacedBreakContinue", "Cannot place \"break\" or \"continue\" here");
global.System.assignMessage("TJSMisplacedCase", "Cannot place \"case\" here");
global.System.assignMessage("TJSMisplacedReturn", "Cannot place \"return\" here");
global.System.assignMessage("TJSStringParseError", "Un-terminated string/regexp/octet literal");
global.System.assignMessage("TJSNumberError", "Cannot be parsed as a number");
global.System.assignMessage("TJSUnclosedComment", "Un-terminated comment");
global.System.assignMessage("TJSInvalidChar", "Invalid character '%1'");
global.System.assignMessage("TJSExpected", "Expected %1");
global.System.assignMessage("TJSSyntaxError", "Syntax error (%1)");
global.System.assignMessage("TJSPPError", "Error in conditional compiling expression");
global.System.assignMessage("TJSCannotGetSuper", "Super class does not exist or cannot specify the super class");
global.System.assignMessage("TJSInvalidOpecode", "Invalid VM code");
global.System.assignMessage("TJSRangeError", "The value is out of the range");
global.System.assignMessage("TJSAccessDenyed", "Invalid operation for Read-only or Write-only property");
global.System.assignMessage("TJSNativeClassCrash", "Invalid object context");
global.System.assignMessage("TJSInvalidObject", "The object is already invalidated");
global.System.assignMessage("TJSCannotOmit", "\"...\" is used out of functions");
global.System.assignMessage("TJSCannotParseDate", "Invalid date format");
global.System.assignMessage("TJSInvalidValueForTimestamp", "Invalid value for date/time");
global.System.assignMessage("TJSExceptionNotFound", "Cannot convert exception because \"Exception\" does not exist");
global.System.assignMessage("TJSInvalidFormatString", "Invalid format string");
global.System.assignMessage("TJSDivideByZero", "Division by zero");
global.System.assignMessage("TJSNotReconstructiveRandomizeData", "Cannot reconstruct random seeds");
global.System.assignMessage("TJSSymbol", "ID");
global.System.assignMessage("TJSCallHistoryIsFromOutOfTJS2Script", "[out of TJS2 script]");
global.System.assignMessage("TJSNObjectsWasNotFreed", "Total %1 Object(s) was not freed");
global.System.assignMessage("TJSObjectCreationHistoryDelimiter", " <-- ");
global.System.assignMessage("TJSObjectCreationHistoryDelimiter", " <-- ");
global.System.assignMessage("TJSObjectWasNotFreed", "Object %1 [%2] wes not freed / The object was created at : %2");
global.System.assignMessage("TJSObjectWasNotFreed", "Object %1 [%2] wes not freed / The object was created at : %2");
global.System.assignMessage("TJSGroupByObjectTypeAndHistory", "Group by object type and location where the object was created");
global.System.assignMessage("TJSGroupByObjectType", "Group by object type");
global.System.assignMessage("TJSObjectCountingMessageGroupByObjectTypeAndHistory", "%1 time(s) : [%2] %3");
global.System.assignMessage("TJSObjectCountingMessageGroupByObjectTypeAndHistory", "%1 time(s) : [%2] %3");
global.System.assignMessage("TJSObjectCountingMessageTJSGroupByObjectType", "%1 time(s) : [%2]");
global.System.assignMessage("TJSWarnRunningCodeOnDeletingObject", "%4: Running code on deleting-in-progress object %1[%2] / The object was created at : %3");
global.System.assignMessage("TJSWarnRunningCodeOnDeletingObject", "%4: Running code on deleting-in-progress object %1[%2] / The object was created at : %3");
global.System.assignMessage("TJSWriteError", "Write error");
global.System.assignMessage("TJSReadError", "Read error");
global.System.assignMessage("TJSSeekError", "Seek error");
global.System.assignMessage("TJSByteCodeBroken", "Bytecode read error. File is broken or it's not bytecode file.");
global.System.assignMessage("TJSObjectHashMapLogVersionMismatch", "Object Hash Map log version mismatch");
global.System.assignMessage("TJSCurruptedObjectHashMapLog", "Currupted Object Hash Map log");
global.System.assignMessage("TJSUnknownFailure", "Unknown failure : %08X");
global.System.assignMessage("TJSUnknownPackUnpackTemplateCharcter", "Unknown pack/unpack TEMPLATE charcter");
global.System.assignMessage("TJSUnknownBitStringCharacter", "Unknown bit string charcter");
global.System.assignMessage("TJSUnknownHexStringCharacter", "Unknown Hex string charcter");
global.System.assignMessage("TJSNotSupportedUuencode", "Not supported uuencode");
global.System.assignMessage("TJSNotSupportedBER", "Not supported BER");
global.System.assignMessage("TJSNotSupportedUnpackLP", "Not supported unpack 'p'");
global.System.assignMessage("TJSNotSupportedUnpackP", "Not supported unpack 'P'");
// Kirikiri 2 specific
global.System.assignMessage("TVPCannotInitDirectDraw", "Unable to initialize DirectDraw: %1");
global.System.assignMessage("TVPKAGCallStackUnderflow", "The return tag does not correspond to the call tag (many return tags)");
global.System.assignMessage("TVPKAGCannotOmmitFirstLabelName", "The first label name of the scenario file cannot be omitted");
global.System.assignMessage("TVPKAGInlineScriptNotEnd", "[endscript] or @endscript not found");
global.System.assignMessage("TVPKAGLabelNotFound", "Label %2 not found in scenario file %1");
global.System.assignMessage("TVPKAGMacroEntityNotAvailable", "Macro entity cannot be used outside a macro");
global.System.assignMessage("TVPKAGMalformedSaveData", "Bookmark data is abnormal. Data may be corrupted");
global.System.assignMessage("TVPKAGNoLine", "Attempt to load scenario file %1 is empty");
global.System.assignMessage("TVPKAGReturnLostSync", "The return location of return cannot be specified because the scenario file has changed");
global.System.assignMessage("TVPKAGSpecifyKAGParser", "Please specify an object of KAGParser class");
global.System.assignMessage("TVPKAGSyntaxError", "Tag syntax error. Check for \'[\' and \']\' balance, \" and \" balance, missing spaces, extra line breaks, macro-endmacro balance, missing required attributes, etc.");
global.System.assignMessage("TVPLabelOrScriptInMacro", "Labels and iscript cannot be written in macros");
global.System.assignMessage("TVPSpecifyMenuItem", "Please specify an object of MenuItem class");
global.System.assignMessage("TVPUnknownMacroName", "Macro \"%1\" is not registered");
