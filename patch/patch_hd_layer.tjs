global.imagesHdDict = Scripts.evalStorage("images_hd.dic");


global.messageLayerImages = ["tw_ノーマル(薄い)", "tw_ノーマル(通常)", "tw_ノーマル(濃い)", "tw_たいがー(通常)", "tw_たいがー(模様)"];
global.messageBreakImages = ["linebreak_a", "pagebreak_a"];

global.fixedBgImages = [ // TODO remove after testing
	// Sometimes used for letter-boxing, in which case it needs a special treatment.
	"black"
];
global.movingBgImages = [ // TODO remove after testing
	"c_cs16(03落石)", "cs29アンリマユ崩壊(01落石大)",
	"csラストep04(雲01)", "csラストep04(雲02)", "csラストep04(雲03)", "csラストep04(雲04)"
];
global.bottomImages = [ // TODO remove after testing
	// A bottom aligned image moving from negative to positive top position, in which case it needs a special treatment.
	"rogo_ai",
	"rogo_bi2",
	"cs29アンリマユ崩壊(04手前岩盤・右)"
];


global.Layer_patch_hd_layer_original	= Layer;
class Layer_patch_hd_layer_override extends Layer_patch_hd_layer_original
{
	var imageStorage = void;

	var _left = 0;
	var _top = 0;
	var _imageLeft = 0;
	var _imageTop = 0;
	var _width = 32;
	var _height = 32;
	var _imageWidth = 32;
	var _imageHeight = 32;
	var _clipLeft = 0;
	var _clipTop = 0;
	var _clipWidth = void;
	var _clipHeight = void;
	var _attentionLeft = 0;
	var _attentionTop = 0;

@if(WIDE_MODE)
	var _isbg = false; // bg images are scaled to be larger than the window
	var _stretch = void; // used to stretch the message window (optional)
	var _topScroll = 0; // used to position the layer according to the scroll
	var unstretchLeft = false;
@endif

	var isMask = false;
	var isThumbnail = false;
	var isTicketThumbnail = false;

	var _isFixedPosition = void;
	var _horizontalAlignment = 0.5;
	var _verticalAlignment = 0;
	var _imageHorizontalAlignment = 0;
	var _imageVerticalAlignment = 0;

	var numberOfImages = 1;

	var absoluteMode = 0;

	property horizontalAlignment
	{
		getter { return this._horizontalAlignment; }
		setter(v) { this._horizontalAlignment = v; left = left; }
	}

	property verticalAlignment
	{
		getter { return this._verticalAlignment; }
		setter(v) { this._verticalAlignment = v; top = top; }
	}

	property imageHorizontalAlignment
	{
		getter { return this._imageHorizontalAlignment; }
		setter(v) { this._imageHorizontalAlignment = v; imageLeft = imageLeft; }
	}

	property imageVerticalAlignment
	{
		getter { return this._imageVerticalAlignment; }
		setter(v) { this._imageVerticalAlignment = v; imageTop = imageTop; }
	}

	property isbg {
		getter { return this._isbg; }
		setter(v) { this._isbg = v; updateTopScroll(); setPos(_left, _top); }
	}

	property topScroll {
		getter { return this._topScroll; }
		setter(v) { this._topScroll = v; top = top; }
	}

	property stretch
	{
		getter
		{
			return this._stretch;
		}
		setter(v) {
			this._stretch = v;
			if (v) {
				this.isbg = false;
			}
		}
	}

	function Layer_patch_hd_layer_override()
	{
		super.Layer(...);
		fontWrapper = new FontWrapperHD(this._font, this);
		this.resetClip();
		this.patch_hd_layer_setup_event_shims();
	}

	function Layer()
	{
		Layer_patch_hd_layer_override(...);
	}

	// TODO find some other check than 32 (i.e. store some variable if setImageSize or LoadImages are called)
	property widthForScale {
		getter {
			var w = this._width != 32? this._width : this._imageWidth;
			if (["Integer", "Real"].find(typeof(this.correctleft)) !== -1) {
				w -= 2 * this.correctleft;
			}
			return w;
		}
	}
	property widthForScaleOriginal { getter { return scaleWidth(this.widthForScale); } }
	property heightForScale { getter { return this._height != 32? this._height : this._imageHeight;  }}
	property heightForScaleOriginal { getter { return scaleHeight(this.heightForScale); } }

	property widthForScaleInside { getter { return this.hasImage && this._imageWidth != 32? this._imageWidth : (this._width != 32? this._width : originalResWidth); } }
	property widthForScaleInsideOriginal { getter { return this.hasImage && this._imageWidth != 32? this.imageWidthOriginal : (this.widthOriginal != 32? this.widthOriginal : this.window.scaleWidth(originalResWidth)); } }
	property heightForScaleInside { getter { return this.hasImage && this._imageHeight != 32? this._imageHeight : (this._height != 32? this._height : originalResHeight);  }}
	property heightForScaleInsideOriginal { getter { return this.hasImage && this._imageHeight != 32? this.imageHeightOriginal : (this.heightOriginal != 32? this.heightOriginal : this.window.scaleHeight(originalResHeight)); } }

	function scaleLeft(x)
    {
		if (this.absoluteMode || this.parent == null) {
			return x;
		}
        return scalePosition(x, widthForScale, widthForScaleOriginal, this.parent.widthForScale, this.parent.widthForScaleOriginal, horizontalAlignment) / (this.unstretchLeft? wideFactor : 1);
    }

    function scaleTop(y)
    {
		if (this.absoluteMode || this.parent == null) {
			return y;
		}

		var parentHeightOriginal = this.parent.isbg && !this.isbg? this.parent.heightForScaleOriginal / wideFactor : this.parent.heightForScaleOriginal;
		var topScroll = this.window.wideScreen? this.topScroll : 0;

        return scalePosition(y, this.heightForScale, this.heightForScaleOriginal, this.parent.heightForScale, parentHeightOriginal, verticalAlignment) + topScroll * global.get_wideScaleFactor();
    }

	function scaleImageLeft(x)
	{
		return scalePosition(x, _width, widthOriginal, _imageWidth, imageWidthOriginal, imageHorizontalAlignment);
	}

	function scaleImageTop(y)
	{
		return scalePosition(y, _height, heightOriginal, _imageHeight, imageHeightOriginal, imageVerticalAlignment);
	}

    function scaleCursorLeft(x)
    {
        return this.window.unscaleWidth(x);
    }

    function scaleCursorTop(y)
    {
		var topOffset = this.window.wideScreen? this.window.scrollYOffset : 0;
        return this.window.unscaleHeight(y - topOffset * global.get_wideScaleFactor());
    }

	function scaleCursorX(x)
	{
		return scaleWidth(x);
	}

	function scaleCursorY(y)
	{
		var topOffset = this.window.wideScreen? this.window.scrollYOffset : 0;
		return scaleHeight(y / wideFactor) + topOffset * global.get_wideScaleFactor();
	}

    function scaleWidth(w)
    {
		if (this.numberOfImages > 1) {
			var imageWidthScaleFactor = this.imageWidthOriginal / this._imageWidth;
			return (w * imageWidthScaleFactor) | 0;
		} else {
			return this.scaleImageWidth(w);
		}
    }

    function scaleHeight(h)
    {
		return this.scaleImageHeight(h);
    }

	function scaleSingleImageWidth(singleImageWidth) {
		if (this.isbg || this.stretch) {
			return this.window.scaleWidth(singleImageWidth);
		}
		return this.window.scaleHeight(singleImageWidth); // height on purpose
	}

	function scaleImageWidth(w)
	{
		var singleImageWidth = w / this.numberOfImages;
		return scaleSingleImageWidth(singleImageWidth) * numberOfImages;
	}

	function scaleImageHeight(h)
	{
		if (this.isbg && !this.stretch) {
			return this.window.scaleWidth(h); // width on purpose
		}
		return this.window.scaleHeight(h);
	}

	function scaleInsideImageWidth(w)
	{
		return (w * this.widthForScaleInsideOriginal / this.widthForScaleInside) | 0; // order of operations is important to avoid floating point errors causing visual glitch
	}

	function scaleInsideImageHeight(h)
	{
		return (h * this.heightForScaleInsideOriginal / this.heightForScaleInside) | 0; // order of operations is important to avoid floating point errors causing visual glitch
	}

	function scaleInsideImageLeft(x, w, wOriginal)
	{
		return scalePosition(x, w, wOriginal, this.widthForScaleInside, this.widthForScaleInsideOriginal);
	}

	function scaleInsideImageTop(y, h, hOriginal)
	{
		return scalePosition(y, h, hOriginal, this.heightForScaleInside, this.heightForScaleInsideOriginal);
	}

	function scaleInsideLeft(x, w, wOriginal, horizontalAlignment)
	{
		return scalePosition(x, w, wOriginal, this.widthForScale, this.widthForScaleOriginal, horizontalAlignment);
	}

	function scaleInsideTop(y, h, hOriginal, verticalAlignment)
	{
		var topScroll = this.window.wideScreen? (this.isbg? window.scrollYOffset : 0) : 0;
		var heightForScaleOriginal = this.isbg? this.heightForScaleOriginal / wideFactor : this.heightForScaleOriginal;
		return scalePosition(y, h, hOriginal, this.heightForScale, heightForScaleOriginal, verticalAlignment) + topScroll * global.get_wideScaleFactor();
	}

    property left
	{
		getter { return this.absoluteMode? this.leftOriginal : this._left; }
		setter(v) { this._left = v; this.leftOriginal = scaleLeft(v); }
	}

    property top
    {
        getter { return this.absoluteMode? this.topOriginal : this._top; }
        setter(v) { this._top = v; this.topOriginal = scaleTop(v); }
    }

	property imageLeft
	{
		getter { return this.absoluteMode? this.imageLeftOriginal : this._imageLeft; }
		setter(v) { this._imageLeft = v; this.imageLeftOriginal = scaleImageLeft(v); }
	}

    property imageTop
    {
        getter { return this.absoluteMode? this.imageTopOriginal : this._imageTop; }
        setter(v) { this._imageTop = v; this.imageTopOriginal = scaleImageTop(v); }
    }

	property clipLeft
	{
		getter { return this.absoluteMode? this.clipLeftOriginal : this._clipLeft; }
		setter(v) { this._clipLeft = v; this.clipLeftOriginal = scaleInsideImageLeft(v, _clipWidth, clipWidthOriginal); updateClipSize(); }
	}

    property clipTop
    {
        getter { return this.absoluteMode? this.clipTopOriginal : this._clipTop; }
        setter(v) { this._clipTop = v; this.clipTopOriginal = scaleInsideImageTop(v, _clipHeight, clipHeightOriginal); updateClipSize(); }
    }

    property attentionLeft
	{
		getter { return this.absoluteMode? this.attentionLeftOriginal : this._attentionLeft; }
		setter(v) { this._attentionLeft = v; this.attentionLeftOriginal = scaleInsideImageWidth(v); }
	}

    property attentionTop
    {
        getter { return this.absoluteMode? this.attentionTopOriginal : this._attentionTop; }
        setter(v) { this._attentionTop = v; this.attentionTopOriginal = scaleInsideImageHeight(v); }
    }

    property cursorX
	{
		getter { return this.absoluteMode? this.cursorXOriginal : scaleCursorLeft(this.cursorXOriginal); }
		setter(v) { this.cursorXOriginal = scaleCursorX(v); }
	}

    property cursorY
    {
        getter { return this.absoluteMode? this.cursorYOriginal : scaleCursorTop(this.cursorYOriginal); }
        setter(v) { this.cursorYOriginal = scaleCursorY(v); }
    }

	property width
	{
		getter { return this.absoluteMode? this.widthOriginal : this._width; }
		setter(v) { this._width = v; this.widthOriginal = scaleWidth(v); updateImageSize(); left = _left; }
	}

	property height
	{
		getter { return this.absoluteMode? this.heightOriginal : this._height; }
		setter(v) { this._height = v; this.heightOriginal = scaleHeight(v); updateImageSize(); top = _top; }
	}

	property imageWidth
	{
		getter { return this.absoluteMode? this.imageWidthOriginal : this._imageWidth; }
		setter(v) { this._imageWidth = v; this.imageWidthOriginal = scaleImageWidth(v); updateSize(); }
	}

	property imageHeight
	{
		getter { return this.absoluteMode? this.imageHeightOriginal : this._imageHeight; }
		setter(v) { this._imageHeight = v; this.imageHeightOriginal = scaleImageHeight(v); updateSize(); }
	}

	property clipWidth
	{
		getter { return this.absoluteMode? this.clipWidthOriginal : this._clipWidth; }
		setter(v) { this._clipWidth = v; this.clipWidthOriginal = scaleInsideImageWidth(v); }
	}

	property clipHeight
	{
		getter { return this.absoluteMode? this.clipHeightOriginal : this._clipHeight; }
		setter(v) { this._clipHeight = v; this.clipHeightOriginal = scaleInsideImageHeight(v); }
	}

	function setPos_patch_hd_layer(left, top, width, height)
	{
		this._left = left;
		this._top = top;
		var scaledWidth = width;
		var scaledHeight = height;
		if (width !== void) {
			this._width = width;
			scaledWidth = scaleWidth(width);
		}
		if (height !== void) {
			this._height = height;
			scaledHeight = scaleHeight(height);
		}
		(global.Layer_patch_hd_layer_original.setPos incontextof this)(scaleLeft(left), scaleTop(top), scaledWidth, scaledHeight);
		if (width !== void || height !== void)
		{
			this.updateImageSize();
		}
	}
	
	function setPos()
	{
		return this.setPos_patch_hd_layer(...);
	}

	function setImagePos_patch_hd_layer(imageLeft, imageTop)
	{
		this._imageLeft = imageLeft;
		this._imageTop = imageTop;
		(global.Layer_patch_hd_layer_original.setImagePos incontextof this)(scaleImageLeft(imageLeft), scaleImageTop(imageTop));
	}

	function setImagePos()
	{
		return this.setImagePos_patch_hd_layer(...);
	}
	
	function setAttentionPos_patch_hd_layer(attentionLeft, attentionTop)
	{
		this._attentionLeft = attentionLeft;
		this._attentionTop = attentionTop;
		(global.Layer_patch_hd_layer_original.setAttentionPos incontextof this)(scaleInsideImageWidth(attentionLeft), scaleInsideImageHeight(attentionTop));
	}

	function setAttentionPos()
	{
		return this.setAttentionPos_patch_hd_layer(...);
	}

	function setCursorPos(cursorX, cursorY)
	{
		(global.Layer_patch_hd_layer_original.setCursorPos incontextof this)(scaleCursorX(cursorX), scaleCursorY(cursorY));
	}

	function setImageSize_patch_hd_layer(imageWidth, imageHeight)
	{
		this._imageWidth = imageWidth;
		this._imageHeight = imageHeight;
		this.updateBg(imageWidth, imageHeight);
		this.updateSize();
		(global.Layer_patch_hd_layer_original.setImageSize incontextof this)(scaleImageWidth(imageWidth), scaleImageHeight(imageHeight));
	}

	function setImageSize()
	{
		return this.setImageSize_patch_hd_layer(...);
	}
	
	function setClip_patch_hd_layer(clipLeft, clipTop, clipWidth, clipHeight)
	{
		this._clipLeft = clipLeft;
		this._clipTop = clipTop;
		this._clipWidth = clipWidth;
		this._clipHeight = clipHeight;
		this.updateClipSize();

		var clipWidthOriginal = scaleInsideImageWidth(clipWidth);
		var clipHeightOriginal = scaleInsideImageHeight(clipHeight);
		var clipLeftOriginal = scaleInsideImageLeft(clipLeft, clipWidth, clipWidthOriginal);
		var clipTopOriginal = scaleInsideImageTop(clipTop, clipHeight, clipHeightOriginal);

		(global.Layer_patch_hd_layer_original.setClip incontextof this)(clipLeftOriginal, clipTopOriginal, clipWidthOriginal, clipHeightOriginal);
	}

	function setClip()
	{
		return this.setClip_patch_hd_layer(...);
	}
	
	function setSize_patch_hd_layer(width, height)
	{
		this._width = width;
		this._height = height;
		(global.Layer_patch_hd_layer_original.setSize incontextof this)(scaleWidth(width), scaleHeight(height));
		this.updateImageSize();
		this.setPos(_left, _top);
	}

	function setSize(width, height)
	{
		this.updateBg(width, height);
		return this.setSize_patch_hd_layer(width, height);
	}

	function setSizeToImageSize()
	{
		this.setSize_patch_hd_layer(this._imageWidth, this._imageHeight);
	}

	function resetClip()
	{
		this._clipLeft = 0;
		this._clipTop = 0;
		this._clipWidth = this._imageWidth;
		this._clipHeight = this._imageHeight;
	}

	function updateClipSize()
	{
		if (this._clipLeft < 0) {
			this._clipLeft = 0;
		}
		if (this._clipTop < 0) {
			this._clipTop = 0;
		}
	}

	function updateImageSize()
	{
		if (this.hasImage) {
			if (this._imageWidth < this._width) {
				this._imageWidth = this._width;
			}
			if (this._imageWidth + this._imageLeft < this._width) {
				this._imageLeft = this._width - this._imageWidth;
			}
			if (this._imageHeight < this._height) {
				this._imageHeight = this._height;
			}
			if (this._imageHeight + this._imageTop < this._height) {
				this._imageTop = this._height - this._imageHeight;
			}
			this.resetClip();
		}
	}

	function updateSize()
	{
		if (this._imageWidth < this._width)
		{
			this._imageLeft = 0;
			this._width = this._imageWidth;
		}
		if (this._imageWidth + this._imageLeft < this._width)
		{
			this._imageLeft = this._width - this._imageWidth;
		}

		if (this._imageHeight < this._height)
		{
			this._imageTop = 0;
			this._height = this._imageHeight;
		}
		if (this._imageHeight + this._imageTop < this._height)
		{
			this._imageTop = this._height - this._imageHeight;
		}

		if (this.hasImage)
		{
			this.resetClip();
		}
	}

	function setInitialImageProperties()
	{
		if (!this.hasImageOriginal)
		{
			this._imageLeft = 0;
			this._imageTop = 0;
			this._imageWidth = this._width;
			this._imageHeight = this._height;
		}
		this.resetClip();
	}

	function updateTopScroll() {
		if (!this.window.wideScreen) {
			return;
		}
		if (this.isbg) {
			if (this.parent === this.window.primaryLayer) {
				this.topScroll = -this.window.scrollYOffset;
			} else {
				this.topScroll = 0;
			}
		} else if (this.parent !== null && this.parent !== this.window.primaryLayer && this.parent.isbg) {
			this.topScroll = this.window.scrollYOffset;
		} else {
			this.topScroll = 0;
		}
	}

	function updateBg(w, h) {
		if (!this.isYesNoLayer && !this.isMessageLayer && !this.isHistoryLayer) {
			this.isbg |= w == originalResWidth && h == originalResHeight;
		}
	}

	property hasImage
	{
		getter
		{
			return this.hasImageOriginal;
		}
		setter(v)
		{
			if (v)
			{
				this.setInitialImageProperties();
			}
			this.hasImageOriginal = v;
		}
	}

	property type
	{
		getter
		{
			return this.typeOriginal;
		}
		setter(v)
		{
			if (this.typeOriginal != v)
			{
				switch (this.typeOriginal)
				{
					case ltOpaque:
					case ltAlpha:
					case ltAdditive:
					case ltSubtractive:
					case ltMultiplicative:
					case ltDodge:
					case ltDarken:
					case ltLighten:
					case ltScreen:
					case ltAddAlpha:
					case ltPsNormal:
					case ltPsAdditive:
					case ltPsSubtractive:
					case ltPsMultiplicative:
					case ltPsScreen:
					case ltPsOverlay:
					case ltPsHardLight:
					case ltPsSoftLight:
					case ltPsColorDodge:
					case ltPsColorDodge5:
					case ltPsColorBurn:
					case ltPsLighten:
					case ltPsDarken:
					case ltPsDifference:
					case ltPsDifference5:
					case ltPsExclusion:
						this.setInitialImageProperties();
						break;
					default:
						break;
				}
			}
			this.typeOriginal = v;
		}
	}

	property scaleAlgorithm
	{
		getter
		{
			if (this.isExButtonLayer) {
				return stLinear;
			}
			return stCubic;
		}
	}

	property isHistoryLayer { getter {
		return this instanceof "HistoryLayer";
	} }

	property isMessageLayer { getter {
		return this instanceof "MessageLayer";
	} }

	property isLineLayer { getter {
		return parent instanceof "MessageLayer" && !this.isClickGlyphLayer;
	} }

	property isGameMenuLayer { getter {
		return this instanceof "GameMenuLayer";
	} }

	property isShortcutBaseLayer { getter {
		return this instanceof "ShortcutBaseLayer";
	} }

	property isCharacterLayer { getter {
		return this instanceof "CharacterLayer";
	} }

	property isBaseLayer { getter {
		return this instanceof "BaseLayer" || parent === null;
	} }

	property isExButtonLayer { getter {
		return this instanceof "ExButtonLayer";
	} }

	property isPopupLayer { getter {
		return this instanceof "PopUpLayer";
	} }

	property isClickGlyphLayer { getter {
		return this instanceof "ClickGlyphLayer";
	} }

	property isCinescoLayer { getter {
		return name !== void && name.substr(0,7) == "Cinesco";
	} }

	property isDateTitleLayer { getter {
		return name == "DateTitle用テンポラリ";
	} }

	property isYesNoLayer { getter {
		return this instanceof "YesNoLayer" || name == "Yes/No 問い合わせ(裏)";
	} }

	property isYesNoBackground { getter {
		return this.imageStorage !== void && ["汎用左", "汎用中", "汎用右"].contains(this.imageStorage);
	} }

	property isFlowChartLayer { getter {
		return this instanceof "FlowChartLayer";
	} }

	property isFlagListLayer { getter {
		return this instanceof "FlagListLayer";
	} }

	property isSceneDetailLayer { getter {
		return this instanceof "SceneDetailLayer";
	} }

	property isPushButtonLayer { getter {
		return this instanceof "PushButtonLayer";
	} }

	property isFixedPosition {
		getter {
			if (this._isFixedPosition !== void) {
				return this._isFixedPosition;
			}
			// Only message this.layer and not its children.
			return this.isCharacterLayer || this instanceof "MessageLayer" || this.isHistoryLayer || this.isGameMenuLayer || this.isShortcutBaseLayer || this.isPopupLayer || this.isCinescoLayer || this.isDateTitleLayer || this.isFlowChartLayer || this.isFlagListLayer || this.isYesNoLayer || this.isSceneDetailLayer || this.isPushButtonLayer;
		}
		setter(v) {
			this._isFixedPosition = v;
		}
	}

	property isSysBase {
		getter {
			return name == "トップレイヤ";
		}
	}

	function updateMessageLayerMobile() {
		if (this.isMessageLayer && messageLayerImages.contains(this.imageStorage) && this.window.sflags === "Object") {
			if (this.window.sflags.mobileWindow) {
				type = ltAlpha;
				lineLayer.type = ltTransparent;
			} else {
				type = ltAddAlpha;
				lineLayer.type = ltAddAlpha;
			}
		}
	}

	function update_bounds_hd_layer()
	{
		var _left_tmp = this._left;
		var _top_tmp = this._top;
		var _width_tmp = this._width;
		var _height_tmp = this._height;
		var _imageLeft_tmp = this._imageLeft;
		var _imageTop_tmp = this._imageTop;
		var _imageWidth_tmp = this._imageWidth;
		var _imageHeight_tmp = this._imageHeight;
		var _clipLeft_tmp = this._clipLeft;
		var _clipTop_tmp = this._clipTop;
		var _clipWidth_tmp = this._clipWidth;
		var _clipHeight_tmp = this._clipHeight;
		var _attentionLeft_tmp = this._attentionLeft;
		var _attentionTop_tmp = this._attentionTop;
@if(0)
		if (this.hasImageOriginal)
		{
			super.fillRect(0, 0, this.imageWidthOriginal, this.imageHeightOriginal, 0x000000);
		}
@endif
		this.setPos_patch_hd_layer(_left_tmp, _top_tmp, _width_tmp, _height_tmp);
		if (this.hasImageOriginal)
		{
			this.setImageSize_patch_hd_layer(_imageWidth_tmp, _imageHeight_tmp);
			this.setImagePos_patch_hd_layer(_imageLeft_tmp, _imageTop_tmp);
			this.setClip_patch_hd_layer(_clipLeft_tmp, _clipTop_tmp, _clipWidth_tmp, _clipHeight_tmp);
		}
		this.setAttentionPos_patch_hd_layer(_attentionLeft_tmp, _attentionTop_tmp);
		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].update_bounds_hd_layer();
		}
	}

	function get_all_image_list(arr)
	{
		if (!this.visible)
		{
			return;
		}
		if ((typeof(this.imageStorage) === "String") && (arr.find(this.imageStorage) === -1))
		{
			arr.add(this.imageStorage);
		}
		for (var i = 0, internal_forloop_count = this.children.count; i < internal_forloop_count; i += 1)
		{
			this.children[i].get_all_image_list(arr);
		}
	}

	function loadImages(storage, key)
	{
		storage = storage.toLowerCase();
		var storageName = Storages.chopStorageExt(storage);
		var storageExt = Storages.extractStorageExt(storage);

		if (this.isThumbnail || endsWith("_thumb", storageName)) {
			this.imageStorage = storageName;
			this._imageWidth = 120;
			this._imageHeight = 90;
		} else if (this.isTicketThumbnail) {
			this.imageStorage = storageName;
			this._imageWidth = 128;
			this._imageHeight = 96;
		} else {
			var imageKey = Storages.extractStorageName(storageName);
			if (imagesHdDict[imageKey] === void) {
				throw new Exception("Missing image in images_hd.dic: " + storage);
			}

			if (imagesHdDict[imageKey]["hd_name"] !== void || imagesHdDict[imageKey]["number_of_images_hd"] !== void) {
				var flag = true;
				if (messageLayerImages.contains(imageKey)) {
					flag = this.window.sflags.mobileWindow;
				} else if (messageBreakImages.contains(imageKey)) {
					flag = this.window.sflags.mobileBreakGlyphs;
				} else {
					flag = this.window.isHd;
				}
				this.imageStorage = (imagesHdDict[imageKey]["hd_name"] !== void && flag)? imagesHdDict[imageKey]["hd_name"] : storageName;
				this.numberOfImages = (imagesHdDict[imageKey]["number_of_images_hd"] !== void && flag)? imagesHdDict[imageKey]["number_of_images_hd"] : (imagesHdDict[imageKey]["number_of_images"] !== void? imagesHdDict[imageKey]["number_of_images"] : 1);
			} else {
				this.imageStorage = storageName;
				this.numberOfImages = imagesHdDict[imageKey]["number_of_images"] !== void? imagesHdDict[imageKey]["number_of_images"] : 1;
			}
			
			this._imageWidth = imagesHdDict[imageKey]["width"];
			this._imageHeight = imagesHdDict[imageKey]["height"];

			if (messageLayerImages.contains(imageKey) && this.window.sflags.wideWindow) {
				this._imageWidth = (this._imageWidth * wideFactor) | 0;
			}

			this._imageWidth *= this.numberOfImages;
			
			this.isbg = imagesHdDict[imageKey]["bg"] !== void? imagesHdDict[imageKey]["bg"] : false;
		}

@if(GAME_FATE||GAME_FHAT)
		this.updateMessageLayerMobile();
@endif

		var taginfo = (global.Layer_patch_hd_layer_original.loadImages incontextof this)(this.imageStorage+storageExt, key);

@if(GAME_FATE||GAME_FHAT)
		// Mainly used for 藤02a腕b(中) and 藤02g腕b(中) since the HD version's width is larger than expected because of redundant transparent padding, but there might be other cases so the condition is generic.
		if (this.isCharacterLayer && !this.isbg) {
			var w = scaleWidth(this._imageWidth);
			var h = scaleHeight(this._imageHeight);
			var leftDiff = (this.imageWidthOriginal - w) \ 2;
			if (leftDiff > 0) {
				var tmp = new global.Layer(this.window, this);
				(global.Layer_patch_hd_layer_original.loadImages incontextof tmp)(this.imageStorage+storageExt, key);

				try
				{
					this.absoluteMode += 1;
					this.fillRect_patch_hd_layer(0, 0, w, h, 0x00000000);
					this.operateRect_patch_hd_layer(0, 0, tmp, leftDiff, 0, w, h);
					this.absoluteMode -= 1;
				}
				catch(e)
				{
					this.absoluteMode -= 1;
					throw e;
				}

				(global.Layer_patch_hd_layer_original.setImageSize incontextof this)(w, h);

				invalidate tmp;
			}
		}
@endif

		this.upscale();
		this.updateSize();

		return taginfo;
	}

	function loadProvinceImage(image)
	{
		throw new Exception("Function loadProvinceImage not implemented");
	}

	function getMainPixel(x, y)
	{
		return (global.Layer_patch_hd_layer_original.getMainPixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y));
	}

	function setMainPixel(x, y, color)
	{
		(global.Layer_patch_hd_layer_original.setMainPixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y), color);
	}

	function getMaskPixel(x, y)
	{
		return (global.Layer_patch_hd_layer_original.getMaskPixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y));
	}

	function setMaskPixel(x, y, value)
	{
		(global.Layer_patch_hd_layer_original.setMaskPixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y), value);
	}

	function getProvincePixel(x, y)
	{
		return (global.Layer_patch_hd_layer_original.getProvincePixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y));
	}

	function setProvincePixel(x, y, value)
	{
		(global.Layer_patch_hd_layer_original.setProvincePixel incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y), value);
	}

	function getLayerAt(x, y, exclude_self, get_disabled)
	{
		return (global.Layer_patch_hd_layer_original.getLayerAt incontextof this)(scaleInsideImageWidth(x), scaleInsideImageHeight(y), exclude_self, get_disabled);
	}

	function upscale()
	{
		var scaledImageWidth = scaleImageWidth(this._imageWidth);
		var scaledImageHeight = scaleImageHeight(this._imageHeight);
		if (this.imageWidthOriginal == scaledImageWidth && this.imageHeightOriginal == scaledImageHeight) return;

@if(SCALE_USING_FLOATING_POINT)
		var scale = scaledImageWidth / this.imageWidthOriginal;
@endif
@if(!SCALE_USING_FLOATING_POINT)
		var scale = scaledImageWidth \ this.imageWidthOriginal;
@endif
		var singleImageWidth = this.imageWidthOriginal \ this.numberOfImages;
		var scaledSingleImageWidth = (singleImageWidth * scale) | 0;
		scaledImageWidth = scaledSingleImageWidth * this.numberOfImages;

@if(SCALE_ROUND_TOWARDS_NEAREST)
		scaledImageWidth = global.Math.round(scaledImageWidth) | 0;
		scaledImageHeight = global.Math.round(scaledImageHeight) | 0;
		singleImageWidth = global.Math.round(singleImageWidth) | 0;
		scaledSingleImageWidth = global.Math.round(scaledSingleImageWidth) | 0;
@endif

		var tmp = new global.Layer(this.window, this);
		tmp.absoluteMode += 1;
		tmp.setImageSize_patch_hd_layer(scaledImageWidth, scaledImageHeight);

		try
		{
			this.absoluteMode += 1;
			for (var i = 0, internal_forloop_count = this.numberOfImages; i < internal_forloop_count; i += 1)
			{
				(global.Layer_patch_hd_layer_original.stretchCopy incontextof tmp)(scaledSingleImageWidth*i, 0, scaledSingleImageWidth, scaledImageHeight, this, singleImageWidth*i, 0, singleImageWidth, this.imageHeightOriginal, this.scaleAlgorithm);
			}
			this.absoluteMode -= 1;
		}
		catch(e)
		{
			this.absoluteMode -= 1;
			throw e;
		}

		(global.Layer_patch_hd_layer_original.setImageSize incontextof this)(scaledImageWidth, scaledImageHeight);
		try
		{
			this.absoluteMode += 1;
			this.fillRect_patch_hd_layer(0, 0, this.imageWidthOriginal, this.imageHeightOriginal, 0x00000000);

			if (face == dfProvince)
			{
				(global.Layer_patch_hd_layer_original.operateRect incontextof this)(0, 0, tmp, 0, 0, scaledImageWidth, scaledImageHeight, face);
			}
			else
			{
				(global.Layer_patch_hd_layer_original.operateRect incontextof this)(0, 0, tmp, 0, 0, scaledImageWidth, scaledImageHeight);
			}
			this.absoluteMode -= 1;
		}
		catch(e)
		{
			this.absoluteMode -= 1;
			throw e;
		}

		invalidate tmp;
	}

	function updateBgFromSource(src, swidth, sheight)
	{
		if (this.isThumbnail) {
			return;
		}
		// When copying a background image, set this this.layer to be background as well
		if (src.isbg && src.imageWidth == swidth && src.imageHeight == sheight) {
			this.isbg = src.isbg;
			if (src.imageWidth > imageWidth && src.imageHeight > imageHeight) {
				this.setSize_patch_hd_layer(src.imageWidth, src.imageHeight);
			}
		}
		this.stretch |= src._stretch;
	}

	function assignImages(src)
	{
		(global.Layer_patch_hd_layer_original.assignImages incontextof this)(src);
		this._imageWidth = src._imageWidth;
		this._imageHeight = src._imageHeight;
		this.imageStorage = src.imageStorage;
		this.isbg = src.isbg;
		this.stretch |= src._stretch;
		this.updateSize();
	}

	function beginTransition(name, withchildren=true, transsrc, options=%[])
	{
@if(0)
		this.update_bounds_hd_layer();
		if (typeof(transsrc) === "Object" && transsrc !== null && isvalid(transsrc) && transsrc instanceof "Layer")
		{
			transsrc.update_bounds_hd_layer();
		}
@endif
		var srcwidth = void;
		var srcheight = void;
		var destwidth = void;
		var destheight = void;
		if (withchildren)
		{
			destwidth = this._width;
			destheight = this._height;
		}
		else
		{
			destwidth = this._imageWidth;
			destheight = this._imageHeight;
		}
		destwidth = ((destwidth < 0 ? -destwidth : destwidth) & 0x7fffffff) * (destwidth < 0 ? -1 : 1);
		destheight = ((destheight < 0 ? -destheight : destheight) & 0x7fffffff) * (destheight < 0 ? -1 : 1);
		if (typeof(transsrc) === "Object" && transsrc !== null && isvalid(transsrc) && transsrc instanceof "Layer")
		{
			if (withchildren)
			{
				srcwidth = transsrc._width;
				srcheight = transsrc._height;
			}
			else
			{
				srcwidth = transsrc._imageWidth;
				srcheight = transsrc._imageHeight;
			}
			srcwidth = ((srcwidth < 0 ? -srcwidth : srcwidth) & 0x7fffffff) * (srcwidth < 0 ? -1 : 1);
			srcheight = ((srcheight < 0 ? -srcheight : srcheight) & 0x7fffffff) * (srcheight < 0 ? -1 : 1);
		}
		if ((name === "crossfade" || name === "scroll" || name === "universal") && (srcwidth !== destwidth || srcheight !== destheight))
		{
			Debug.message("Ignored transition start due to size mismatch");
			var trace_string = Scripts.getTraceString();
			if (trace_string !== "")
			{
				Debug.message("Trace: " + trace_string);
			}
			if (typeof(this.onTransitionCompleted) === "Object")
			{
				this.onTransitionCompleted(this, transsrc);
			}
			return;
		}
		try
		{
			return (global.Layer_patch_hd_layer_original.beginTransition incontextof this)(...);
		}
		catch (e)
		{
			var msg = "";
			if (typeof(e) === "Object" && isvalid(e) && typeof(e.message) === "String")
			{
				msg = e.message;
			}
			Debug.message("Couldn't start transition: " + e.message);
			var trace_string = Scripts.getTraceString();
			if (trace_string !== "")
			{
				Debug.message("Trace: " + trace_string);
			}
			try
			{
				if (typeof(this.onTransitionCompleted) === "Object")
				{
					this.onTransitionCompleted(this, transsrc);
				}
			}
			catch (ee)
			{
				var msg = "";
				if (typeof(e) === "Object" && isvalid(e) && typeof(e.message) === "String")
				{
					msg = e.message;
				}
				Debug.message("Couldn't call onTransitionCompleted: " + e.message);
				var trace_string = Scripts.getTraceString();
				if (trace_string !== "")
				{
					Debug.message("Trace: " + trace_string);
				}
			}
		}
	}

@if(0)
	property mainImageBuffer
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.mainImageBuffer while not in this.absoluteMode");
			}
			return super.mainImageBuffer;
		}
	}

	property mainImageBufferForWrite
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.mainImageBufferForWrite while not in this.absoluteMode");
			}
			return super.mainImageBufferForWrite;
		}
	}

	property mainImageBufferPitch
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.mainImageBufferPitch while not in this.absoluteMode");
			}
			return super.mainImageBufferPitch;
		}
	}

	property provinceImageBuffer
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.provinceImageBuffer while not in this.absoluteMode");
			}
			return super.provinceImageBuffer;
		}
	}

	property provinceImageBufferForWrite
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.provinceImageBufferForWrite while not in this.absoluteMode");
			}
			return super.provinceImageBufferForWrite;
		}
	}

	property provinceImageBufferPitch
	{
		getter
		{
			if (!this.absoluteMode)
			{
				dm("trace: " + Scripts.getTraceString());
				throw new Exception("Attempted to get this.provinceImageBufferPitch while not in this.absoluteMode");
			}
			return super.provinceImageBufferPitch;
		}
	}
@endif

	function update_patch_hd_layer(args*)
	{
		if (args.count < 1)
		{
			(global.Layer_patch_hd_layer_original.update incontextof this)();
			return;
		}
		if (args.count < 4)
		{
			throw new Exception("expected 4 args");
		}
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.update incontextof this)(...);
		}
		var left = args[0];
		var top = args[1];
		var width = args[2];
		var height = args[3];

		(global.Layer_patch_hd_layer_original.update incontextof this)(scaleLeft(left), scaleTop(top), scaleWidth(width), scaleHeight(height));
	}
	
	function update()
	{
		return this.update_patch_hd_layer(...);
	}

	/*
	function redraw(left, top)
	{
		super.redraw(scaleLeft(left), scaleTop(top));
	}*/

	// Image functions.
	function operateRect_patch_hd_layer(left, top, src, sleft, stop, swidth, sheight, mode, opacity)
	{
		if (!swidth || !sheight)
		{
			// Nothing to do.
			return;
		}

		this.updateBgFromSource(src, swidth, sheight);

		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.operateRect incontextof this)(...);
		}

		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);

		var leftOriginal;
		var topOriginal;
		if (src.isbg) {
			leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
			topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);
		} else {
			leftOriginal = scaleInsideLeft(left, swidth, swidthOriginal, src.horizontalAlignment);
			topOriginal = scaleInsideTop(top, sheight, sheightOriginal, src.verticalAlignment);
		}

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.operateRect incontextof this)(leftOriginal, topOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal, mode, opacity);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function operateRect()
	{
		return this.operateRect_patch_hd_layer(...);
	}

	function copyRect_patch_hd_layer(left, top, src, sleft, stop, swidth, sheight)
	{
		if (!swidth || !sheight)
		{
			// Nothing to do.
			return;
		}

		this.updateBgFromSource(src, swidth, sheight);

		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.copyRect incontextof this)(...);
		}

		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.copyRect incontextof this)(leftOriginal, topOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function copyRect()
	{
		return this.copyRect_patch_hd_layer(...);
	}

	function copy9Patch_patch_hd_layer(src)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.copy9Patch incontextof this)(...);
		}
		var ret;
		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			ret = (global.Layer_patch_hd_layer_original.copy9Patch incontextof this)(src);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
		if (ret !== void)
		{
			ret.left = scaleInsideImageWidth(ret.left);
			ret.top = scaleInsideImageHeight(rer.top);
			ret.right = scaleInsideImageWidth(ret.right);
			ret.bottom = scaleInsideImageHeight(ret.bottom);
		}
		return ret;
	}
	
	function copy9Patch()
	{
		return this.copy9Patch_patch_hd_layer(...);
	}

	function flipLR_patch_hd_layer()
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.flipLR incontextof this)(...);
		}
		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.flipLR incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function flipLR()
	{
		return this.flipLR_patch_hd_layer(...);
	}

	function flipUD_patch_hd_layer()
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.flipUD incontextof this)(...);
		}
		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.flipUD incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}
		
	function flipUD()
	{
		return this.flipUD_patch_hd_layer(...);
	}

	function adjustGamma_patch_hd_layer()
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.adjustGamma incontextof this)(...);
		}
		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.adjustGamma incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}
	
	function adjustGamma()
	{
		return this.adjustGamma_patch_hd_layer(...);
	}

	function doGrayScale_patch_hd_layer()
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.doGrayScale incontextof this)(...);
		}
		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.doGrayScale incontextof this)(...);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}
	
	function doGrayScale()
	{
		return this.doGrayScale_patch_hd_layer(...);
	}

	function operateStretch_patch_hd_layer(left, top, width, height, src, sleft, stop, swidth, sheight, mode, opacity, type, option)
	{
		if (!width || !height || !swidth || !sheight)
		{
			// Nothing to do.
			return;
		}

		this.updateBgFromSource(src, swidth, sheight);

		if (this.isbg && src.isbg) {
		 	top /= wideFactor;
		}

		// Pass through to operateRect if width/height are same
		if (width == swidth && height == sheight)
		{
			return this.operateRect_patch_hd_layer(left, top, src, sleft, stop, swidth, sheight, mode, opacity);
		}
		// Pass through to operateAffine for stNearest and stFastLinear
		if (type < stLinear)
		{
			var right = left + width;
			var bottom = top + height;
			if (right < left)
			{
				var tmp = right;
				right = left;
				left = tmp;
			}
			if (bottom < top)
			{
				var tmp = bottom;
				bottom = top;
				top = tmp;
			}
			var width_offset = 0.5;
			var height_offset = 0.5;
			var left_offset = left - width_offset;
			var top_offset = top - height_offset;
			var right_offset = right - width_offset;
			var bottom_offset = bottom - height_offset;
			return this.operateAffine_patch_hd_layer(src, sleft, stop, swidth, sheight, false, left_offset, top_offset, right_offset, top_offset, left_offset, bottom_offset, mode, opacity, type);
		}
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.operateStretch incontextof this)(...);
		}

		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.operateStretch incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal, mode, opacity, type, option);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function operateStretch()
	{
		return this.operateStretch_patch_hd_layer(...);
	}

	function stretchCopy_patch_hd_layer(left, top, width, height, src, sleft, stop, swidth, sheight, type, option)
	{
		if (!width || !height || !swidth || !sheight)
		{
			// Nothing to do.
			return;
		}

		this.updateBgFromSource(src, swidth, sheight);

		// Pass through to copyRect if width/height are same
		if (width == swidth && height == sheight)
		{
			return this.copyRect_patch_hd_layer(left, top, src, sleft, stop, swidth, sheight);
		}
		// Pass through to affineCopy for stNearest and stFastLinear
		if (type < stLinear)
		{
			var right = left + width;
			var bottom = top + height;
			if (right < left)
			{
				var tmp = right;
				right = left;
				left = tmp;
			}
			if (bottom < top)
			{
				var tmp = bottom;
				bottom = top;
				top = tmp;
			}
			var width_offset = 0.5;
			var height_offset = 0.5;
			var left_offset = left - width_offset;
			var top_offset = top - height_offset;
			var right_offset = right - width_offset;
			var bottom_offset = bottom - height_offset;
			return this.affineCopy_patch_hd_layer(src, sleft, stop, swidth, sheight, false, left_offset, top_offset, right_offset, top_offset, left_offset, bottom_offset, type, false);
		}
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.stretchCopy incontextof this)(...);
		}

		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.stretchCopy incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal, type, option);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function stretchCopy()
	{
		return this.stretchCopy_patch_hd_layer(...);
	}

	function piledCopy_patch_hd_layer(left, top, src, sleft, stop, swidth, sheight)
	{
		if (!swidth || !sheight)
		{
			// Nothing to do.
			return;
		}

		this.updateBgFromSource(src, swidth, sheight);

		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.piledCopy incontextof this)(...);
		}

		var swidthOriginal = src.scaleInsideImageWidth(swidth);
		var sheightOriginal = src.scaleInsideImageHeight(sheight);
		var sleftOriginal = src.scaleInsideImageLeft(sleft, swidth, swidthOriginal);
		var stopOriginal = src.scaleInsideImageTop(stop, sheight, sheightOriginal);
		var leftOriginal = scaleInsideImageLeft(left, swidth, swidthOriginal);
		var topOriginal = scaleInsideImageTop(top, sheight, sheightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.piledCopy incontextof this)(leftOriginal, topOriginal, src, sleftOriginal, stopOriginal, swidthOriginal, sheightOriginal);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function piledCopy()
	{
		return this.piledCopy_patch_hd_layer(...);
	}

	function affineCopy_patch_hd_layer(src, sx, sy, sw, sh, affine, a, b, c, d, tx, ty, type, clear)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.affineCopy incontextof this)(...);
		}

		var swOriginal = src.scaleInsideImageWidth(sw);
		var shOriginal = src.scaleInsideImageHeight(sh);
		var sxOriginal = src.scaleInsideImageLeft(sx, sw, swOriginal);
		var syOriginal = src.scaleInsideImageTop(sy, sh, shOriginal);
		if (!affine)
		{
			a = scaleInsideImageWidth(a+0.5)-0.5;
			b = scaleInsideImageHeight(b+0.5)-0.5;
			c = scaleInsideImageWidth(c+0.5)-0.5;
			d = scaleInsideImageHeight(d+0.5)-0.5;
		}
		var txOriginal = scaleInsideImageLeft(tx+0.5, sw, swOriginal)-0.5;
		var tyOriginal = scaleInsideImageTop(ty+0.5, sh, shOriginal)-0.5;

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.affineCopy incontextof this)(src, sxOriginal, syOriginal, swOriginal, shOriginal, affine, a, b, c, d, txOriginal, tyOriginal, type, clear);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function affineCopy()
	{
		return this.affineCopy_patch_hd_layer(...);
	}

	function operateAffine_patch_hd_layer(src, sx, sy, sw, sh, affine, a, b, c, d, tx, ty, mode, opa, type)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.operateAffine incontextof this)(...);
		}

		var swOriginal = src.scaleInsideImageWidth(sw);
		var shOriginal = src.scaleInsideImageHeight(sh);
		var sxOriginal = src.scaleInsideImageLeft(sx, sw, swOriginal);
		var syOriginal = src.scaleInsideImageTop(sy, sh, shOriginal);
		if (!affine)
		{
			a = scaleImageWidth(a+0.5)-0.5;
			b = scaleImageHeight(b+0.5)-0.5;
			c = scaleImageWidth(c+0.5)-0.5;
			d = scaleImageHeight(d+0.5)-0.5;
		}

		var txOriginal = scaleInsideImageLeft(tx+0.5, sw, swOriginal)-0.5;
		var tyOriginal = scaleInsideImageTop(ty+0.5, sh, shOriginal)-0.5;

		var ie;
		try
		{
			this.absoluteMode += 1;
			src.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.operateAffine incontextof this)(src, sxOriginal, syOriginal, swOriginal, shOriginal, affine, a, b, c, d, txOriginal, tyOriginal, mode, opa, type);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		src.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function operateAffine()
	{
		return this.operateAffine_patch_hd_layer(...);
	}

	function doBoxBlur_patch_hd_layer(xblur=1, yblur=1)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.doBoxBlur incontextof this)(...);
		}

@if(GAME_WOHN)
		// Attempted workaround for overflow
		if ((xblur + 1) * (yblur + 1) >= 16777216)
		{
			return;
		}
@endif
		xblur = scaleInsideImageWidth(xblur);
		yblur = scaleInsideImageHeight(yblur);

		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.doBoxBlur incontextof this)(xblur, yblur);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function doBoxBlur()
	{
		return this.doBoxBlur_patch_hd_layer(...);
	}

	function fillRect_patch_hd_layer(left, top, width, height, color)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.fillRect incontextof this)(...);
		}

		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, width, widthOriginal);
		var topOriginal = scaleInsideImageTop(top, height, heightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.fillRect incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, color);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function fillRect()
	{
		return this.fillRect_patch_hd_layer(...);
	}

	function colorRect_patch_hd_layer(left, top, width, height, color, opacity)
	{
		if (!width || !height)
		{
			// Nothing to do.
			return;
		}
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.colorRect incontextof this)(...);
		}

		var widthOriginal = scaleInsideImageWidth(width);
		var heightOriginal = scaleInsideImageHeight(height);
		var leftOriginal = scaleInsideImageLeft(left, width, widthOriginal);
		var topOriginal = scaleInsideImageTop(top, height, heightOriginal);

		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.colorRect incontextof this)(leftOriginal, topOriginal, widthOriginal, heightOriginal, color, opacity);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function colorRect()
	{
		return this.colorRect_patch_hd_layer(...);
	}

	function drawText_patch_hd_layer(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.drawText incontextof this)(...);
		}

		left = scaleInsideImageWidth(left);
		top = scaleInsideImageHeight(top);
		swidth = scaleInsideImageWidth(swidth);
		sofsx = scaleInsideImageWidth(sofsx);
		sofsy = scaleInsideImageHeight(sofsy);

		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.drawText incontextof this)(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function drawText()
	{
		return this.drawText_patch_hd_layer(...);
	}

	function drawGlyph_patch_hd_layer(left, top, glyph, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy)
	{
		// Optimization for 1x size.
		if (!this.window.isHd)
		{
			return (global.Layer_patch_hd_layer_original.drawGlyph incontextof this)(...);
		}

		left = scaleInsideImageWidth(left);
		top = scaleInsideImageHeight(top);
		swidth = scaleInsideImageWidth(swidth);
		sofsx = scaleInsideImageWidth(sofsx);
		sofsy = scaleInsideImageHeight(sofsy);

		var ie;
		try
		{
			this.absoluteMode += 1;
			(global.Layer_patch_hd_layer_original.drawGlyph incontextof this)(left, top, glyph, color, opacity, aa, slevel, scolor, swidth, sofsx, sofsy);
		}
		catch (e)
		{
			ie = e;
		}
		this.absoluteMode -= 1;
		if (ie !== void)
		{
			throw ie;
		}
	}

	function drawGlyph()
	{
		return this.drawGlyph_patch_hd_layer(...);
	}

	property leftOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).left) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).left) incontextof this) = v; }
	}
	property topOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).top) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).top) incontextof this) = v; }
	}
	property widthOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).width) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).width) incontextof this) = v; }
	}
	property heightOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).height) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).height) incontextof this) = v; }
	}
	property imageLeftOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).imageLeft) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).imageLeft) incontextof this) = v; }
	}
	property imageTopOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).imageTop) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).imageTop) incontextof this) = v; }
	}
	property imageWidthOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).imageWidth) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).imageWidth) incontextof this) = v; }
	}
	property imageHeightOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).imageHeight) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).imageHeight) incontextof this) = v; }
	}
	property clipLeftOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).clipLeft) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).clipLeft) incontextof this) = v; }
	}
	property clipTopOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).clipTop) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).clipTop) incontextof this) = v; }
	}
	property clipWidthOriginal {
		getter { return *((&(global.Layer_patch_hd_layer_original).clipWidth) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).clipWidth) incontextof this) = v; }
	}
	property clipHeightOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).clipHeight) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).clipHeight) incontextof this) = v; }
	}
	property attentionLeftOriginal {
		getter { return *((&(global.Layer_patch_hd_layer_original).attentionLeft) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).attentionLeft) incontextof this) = v; }
	}
	property attentionTopOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).attentionTop) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).attentionTop) incontextof this) = v; }
	}
	property cursorXOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).cursorX) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).cursorX) incontextof this) = v; }
	}
	property cursorYOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).cursorY) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).cursorY) incontextof this) = v; }
	}
	property hasImageOriginal
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).hasImage) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).hasImage) incontextof this) = v; }
	}
	property typeOriginal 
	{
		getter { return *((&(global.Layer_patch_hd_layer_original).type) incontextof this); }
		setter(v) { *((&(global.Layer_patch_hd_layer_original).type) incontextof this) = v; }
	}

	function onClick_patch_hd_layer_override(x, y)
	{
		this.onClick_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y));
	}

	property onClick_patch_hd_layer_property_shim
	{
		getter { return this.onClick_patch_hd_layer_override; }
		setter(v) { this.onClick_patch_hd_layer_original = v; }
	}

	function onDoubleClick_patch_hd_layer_override(x, y)
	{
		this.onDoubleClick_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y));
	}

	property onDoubleClick_patch_hd_layer_property_shim
	{
		getter { return this.onDoubleClick_patch_hd_layer_override; }
		setter(v) { this.onDoubleClick_patch_hd_layer_original = v; }
	}

	function onMouseDown_patch_hd_layer_override(x, y, button, shift)
	{
		this.onMouseDown_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), button, shift);
	}

	property onMouseDown_patch_hd_layer_property_shim
	{
		getter { return this.onMouseDown_patch_hd_layer_override; }
		setter(v) { this.onMouseDown_patch_hd_layer_original = v; }
	}

	function onMouseUp_patch_hd_layer_override(x, y, button, shift)
	{
		this.onMouseUp_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), button, shift);
	}

	property onMouseUp_patch_hd_layer_property_shim
	{
		getter { return this.onMouseUp_patch_hd_layer_override; }
		setter(v) { this.onMouseUp_patch_hd_layer_original = v; }
	}

	function onMouseMove_patch_hd_layer_override(x, y, shift)
	{
		this.onMouseMove_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), shift);
	}

	property onMouseMove_patch_hd_layer_property_shim
	{
		getter { return this.onMouseMove_patch_hd_layer_override; }
		setter(v) { this.onMouseMove_patch_hd_layer_original = v; }
	}

	function onMouseWheel_patch_hd_layer_override(shift, delta, x, y)
	{
		this.onMouseWheel_patch_hd_layer_original(shift, delta, scaleCursorLeft(x), scaleCursorTop(y));
	}

	property onMouseWheel_patch_hd_layer_property_shim
	{
		getter { return this.onMouseWheel_patch_hd_layer_override; }
		setter(v) { this.onMouseWheel_patch_hd_layer_original = v; }
	}

	function onHitTest_patch_hd_layer_override(x, y, hit)
	{
		this.onHitTest_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), hit);
	}

	property onHitTest_patch_hd_layer_property_shim
	{
		getter { return this.onHitTest_patch_hd_layer_override; }
		setter(v) { this.onHitTest_patch_hd_layer_original = v; }
	}

	function onTouchDown_patch_hd_layer_override(x, y, cx, cy, id)
	{
		this.onTouchDown_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), scaleCursorLeft(cx), scaleCursorTop(cy), id);
	}

	property onTouchDown_patch_hd_layer_property_shim
	{
		getter { return this.onTouchDown_patch_hd_layer_override; }
		setter(v) { this.onTouchDown_patch_hd_layer_original = v; }
	}

	function onTouchUp_patch_hd_layer_override(x, y, cx, cy, id)
	{
		this.onTouchUp_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), scaleCursorLeft(cx), scaleCursorTop(cy), id);
	}

	property onTouchUp_patch_hd_layer_property_shim
	{
		getter { return this.onTouchUp_patch_hd_layer_override; }
		setter(v) { this.onTouchUp_patch_hd_layer_original = v; }
	}

	function onTouchMove_patch_hd_layer_override(x, y, cx, cy, id)
	{
		this.onTouchMove_patch_hd_layer_original(scaleCursorLeft(x), scaleCursorTop(y), scaleCursorLeft(cx), scaleCursorTop(cy), id);
	}

	property onTouchMove_patch_hd_layer_property_shim
	{
		getter { return this.onTouchMove_patch_hd_layer_override; }
		setter(v) { this.onTouchMove_patch_hd_layer_original = v; }
	}

	function onTouchScaling_patch_hd_layer_override(startdistance, currentdistance, cx, cy, flag)
	{
		// XXX: startdistance and currentdistance need to be interpolated
		this.onTouchScaling_patch_hd_layer_original(startdistance, currentdistance, scaleCursorLeft(cx), scaleCursorTop(cy), flag);
	}

	property onTouchScaling_patch_hd_layer_property_shim
	{
		getter { return this.onTouchScaling_patch_hd_layer_override; }
		setter(v) { this.onTouchScaling_patch_hd_layer_original = v; }
	}

	function onTouchRotate_patch_hd_layer_override(startangle, currentangle, distance, cx, cy, flag)
	{
		// XXX: distance need to be interpolated
		this.onTouchRotate_patch_hd_layer_original(startangle, currentangle, distance, scaleCursorLeft(cx), scaleCursorTop(cy), flag);
	}

	property onTouchRotate_patch_hd_layer_property_shim
	{
		getter { return this.onTouchRotate_patch_hd_layer_override; }
		setter(v) { this.onTouchRotate_patch_hd_layer_original = v; }
	}

	function patch_hd_layer_setup_event_shims()
	{
		if (typeof(this.onClick) === "Object")
		{
			this.onClick_patch_hd_layer_original = this.onClick;
		}
		else
		{
			this.onClick_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onDoubleClick) === "Object")
		{
			this.onDoubleClick_patch_hd_layer_original = this.onDoubleClick;
		}
		else
		{
			this.onDoubleClick_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onMouseDown) === "Object")
		{
			this.onMouseDown_patch_hd_layer_original = this.onMouseDown;
		}
		else
		{
			this.onMouseDown_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onMouseUp) === "Object")
		{
			this.onMouseUp_patch_hd_layer_original = this.onMouseUp;
		}
		else
		{
			this.onMouseUp_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onMouseMove) === "Object")
		{
			this.onMouseMove_patch_hd_layer_original = this.onMouseMove;
		}
		else
		{
			this.onMouseMove_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onMouseWheel) === "Object")
		{
			this.onMouseWheel_patch_hd_layer_original = this.onMouseWheel;
		}
		else
		{
			this.onMouseWheel_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onHitTest) === "Object")
		{
			this.onHitTest_patch_hd_layer_original = this.onHitTest;
		}
		else
		{
			this.onHitTest_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onTouchDown) === "Object")
		{
			this.onTouchDown_patch_hd_layer_original = this.onTouchDown;
		}
		else
		{
			this.onTouchDown_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onTouchUp) === "Object")
		{
			this.onTouchUp_patch_hd_layer_original = this.onTouchUp;
		}
		else
		{
			this.onTouchUp_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onTouchMove) === "Object")
		{
			this.onTouchMove_patch_hd_layer_original = this.onTouchMove;
		}
		else
		{
			this.onTouchMove_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onTouchScaling) === "Object")
		{
			this.onTouchScaling_patch_hd_layer_original = this.onTouchScaling;
		}
		else
		{
			this.onTouchScaling_patch_hd_layer_original = function() {};
		}
		if (typeof(this.onTouchRotate) === "Object")
		{
			this.onTouchRotate_patch_hd_layer_original = this.onTouchRotate;
		}
		else
		{
			this.onTouchRotate_patch_hd_layer_original = function() {};
		}
		&this.onClick = &this.onClick_patch_hd_layer_property_shim;
		&this.onDoubleClick = &this.onDoubleClick_patch_hd_layer_property_shim;
		&this.onMouseDown = &this.onMouseDown_patch_hd_layer_property_shim;
		&this.onMouseUp = &this.onMouseUp_patch_hd_layer_property_shim;
		&this.onMouseMove = &this.onMouseMove_patch_hd_layer_property_shim;
		&this.onMouseWheel = &this.onMouseWheel_patch_hd_layer_property_shim;
		&this.onHitTest = &this.onHitTest_patch_hd_layer_property_shim;
		&this.onTouchDown = &this.onTouchDown_patch_hd_layer_property_shim;
		&this.onTouchUp = &this.onTouchUp_patch_hd_layer_property_shim;
		&this.onTouchMove = &this.onTouchMove_patch_hd_layer_property_shim;
		&this.onTouchScaling = &this.onTouchScaling_patch_hd_layer_property_shim;
		&this.onTouchRotate = &this.onTouchRotate_patch_hd_layer_property_shim;
	}
}
global.Layer = Layer_patch_hd_layer_override;
