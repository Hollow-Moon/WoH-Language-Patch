
// Implementation of the Unicode Line Breaking Algorithm (UAX #14).
// Heavily based on https://github.com/foliojs/linebreak

// classes
// The following break classes are handled by the pair table
global.linebreaker_classes = [
	"OP", // Opening punctuation
	"CL", // Closing punctuation
	"CP", // Closing parenthesis
	"QU", // Ambiguous quotation
	"GL", // Glue
	"NS", // Non-starters
	"EX", // Exclamation/Interrogation
	"SY", // Symbols allowing break after
	"IS", // Infix separator
	"PR", // Prefix
	"PO", // Postfix
	"NU", // Numeric
	"AL", // Alphabetic
	"HL", // Hebrew Letter
	"ID", // Ideographic
	"IN", // Inseparable characters
	"HY", // Hyphen
	"BA", // Break after
	"BB", // Break before
	"B2", // Break on either side (but not pair)
	"ZW", // Zero-width space
	"CM", // Combining marks
	"WJ", // Word joiner
	"H2", // Hangul LV
	"H3", // Hangul LVT
	"JL", // Hangul L Jamo
	"JV", // Hangul V Jamo
	"JT", // Hangul T Jamo
	"RI", // Regional Indicator
	"EB", // Emoji Base
	"EM", // Emoji Modifier
	"ZWJ", // Zero Width Joiner
	"CB", // Contingent break

	// The following break classes are not handled by the pair table
	"AI", // Ambiguous (Alphabetic or Ideograph)
	"BK", // Break (mandatory)
	"CJ", // Conditional Japanese Starter
	"CR", // Carriage return
	"LF", // Line feed
	"NL", // Next line
	"SA", // South-East Asian
	"SG", // Surrogates
	"SP", // Space
	"XX", // Unknown
];

// pairs

global.linebreaker_pairs = [
	"DI_BRK", // Direct break opportunity
	"IN_BRK", // Indirect break opportunity
	"CI_BRK", // Indirect break opportunity for combining marks
	"CP_BRK", // Prohibited break for combining marks
	"PR_BRK", // Prohibited break
];

// Based on example pair table from https://www.unicode.org/reports/tr14/tr14-37.html#Table2
// - ZWJ special processing for LB8a of Revision 41
// - CB manually added as per Rule LB20
// - CL, CP, NS, SY, IS, PR, PO, HY, BA, B2 and RI manually adjusted as per LB22 of Revision 45
global.linebreaker_pair_table = [
	//OP     , CL      , CP      , QU      , GL      , NS      , EX      , SY      , IS      , PR      , PO      , NU      , AL      , HL      , ID      , IN      , HY      , BA      , BB      , B2      , ZW      , CM      , WJ      , H2      , H3      , JL      , JV      , JT      , RI      , EB      , EM      , ZWJ     , CB
	["PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "CP_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK"], // OP
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // CL
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // CP
	["PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK"], // QU
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK"], // GL
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // NS
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // EX
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // SY
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // IS
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK"], // PR
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // PO
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // NU
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // AL
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // HL
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // ID
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // IN
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // HY
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // BA
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK"], // BB
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "PR_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // B2
	["DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK"], // ZW
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // CM
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK"], // WJ
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // H2
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // H3
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // JL
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // JV
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // JT
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // RI
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "DI_BRK"], // EB
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // EM
	["IN_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "IN_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"], // ZWJ
	["DI_BRK", "PR_BRK", "PR_BRK", "IN_BRK", "IN_BRK", "DI_BRK", "PR_BRK", "PR_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "PR_BRK", "CI_BRK", "PR_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "DI_BRK", "IN_BRK", "DI_BRK"]  // CB
];

// linebreaker

global.mapClass = function(c)
{
	switch(c)
	{
		case "AI":
		case "SA":
		case "SG":
		case "XX":
			return "AL";
		case "CJ":
			return "NS";
		default:
			return c;
	}
};

global.mapFirst = function(c)
{
	switch(c)
	{
		case "LF":
		case "NL":
			return "BK";

		case "SP":
			return "WJ";
		default:
			return c;
	}
};

global.classTrie = new UnicodeTrie(Scripts.evalStorage("patch_unicode_linebreak_data.ksc"));

class Break
{
	function Break(position, required = false)
	{
		this.position = position;
		this.required = required;
	}
}

class LineBreaker
{
	function LineBreaker(str)
	{
		this.str = str;
		this.pos = 0;
		this.lastPos = 0;
		this.curClass = null;
		this.nextClass = null;
		this.LB8a = false;
		this.LB21a = false;
		this.LB30a = 0;

	}

	function nextCodePoint()
	{
		var code = #(this.str[this.pos++]);
		var next = #(this.str[this.pos]);
		// If a surrogate pair
		if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff))
		{
			this.pos += 1;
			return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;
		}
		return code;
	}

	function nextCharClass()
	{
		var x = global.classTrie.get(this.nextCodePoint());
		return mapClass(linebreaker_classes[x]);
	}

	function getSimpleBreak()
	{
		// handle classes not handled by the pair table
		switch (this.nextClass)
		{
			case "SP":
				return false;
			case "BK":
			case "LF":
			case "NL":
				this.curClass = "BK";
				return false;
			case "CR":
				this.curClass = "CR";
				return false;
		}

		return null;
	}

	function getPairTableBreak(lastClass)
	{
		// if not handled already, use the pair table
		var shouldBreak = false;
		switch (linebreaker_pair_table[linebreaker_classes.find(this.curClass)][linebreaker_classes.find(this.nextClass)])
		{
			case "DI_BRK": // Direct break
				shouldBreak = true;
				break;

			case "IN_BRK": // possible indirect break
				shouldBreak = lastClass === "SP";
				break;

			case "CI_BRK":
				shouldBreak = lastClass === "SP";
				if (!shouldBreak) {
					shouldBreak = false;
					return shouldBreak;
				}
				break;

			case "CP_BRK": // prohibited for combining marks
				if (lastClass !== "SP")
				{
					return shouldBreak;
				}
				break;

			case "PR_BRK":
			default:
				break;
		}

		if (this.LB8a)
		{
			shouldBreak = false;
		}

		// Rule LB21a
		if (this.LB21a && (this.curClass === "HY" || this.curClass === "BA"))
		{
			shouldBreak = false;
			this.LB21a = false;
		}
		else
		{
			this.LB21a = (this.curClass === "HL");
		}

		// Rule LB30a
		if (this.curClass === "RI")
		{
			this.LB30a++;
			if (this.LB30a == 2 && (this.nextClass === "RI"))
			{
				shouldBreak = true;
				this.LB30a = 0;
			}
		}
		else
		{
			this.LB30a = 0;
		}

		this.curClass = this.nextClass;

		return shouldBreak;
	}

	function nextBreak()
	{
		// get the first char if we're at the beginning of the string
		if (this.curClass == null)
		{
			var firstClass = this.nextCharClass();
			this.curClass = mapFirst(firstClass);
			this.nextClass = firstClass;
			this.LB8a = (firstClass === "ZWJ");
			this.LB30a = 0;
		}

		while (this.pos < this.str.length)
		{
			this.lastPos = this.pos;
			var lastClass = this.nextClass;
			this.nextClass = this.nextCharClass();

			// explicit newline
			if ((this.curClass === "BK") || ((this.curClass === "CR") && (this.nextClass !== "LF")))
			{
				this.curClass = mapFirst(mapClass(this.nextClass));
				return new Break(this.lastPos, true);
			}

			var shouldBreak = this.getSimpleBreak();

			if (shouldBreak == null)
			{
				shouldBreak = this.getPairTableBreak(lastClass);
			}

			// Rule LB8a
			this.LB8a = (this.nextClass === "ZWJ");

			if (shouldBreak)
			{
				return new Break(this.lastPos);
			}
		}

		if (this.lastPos < this.str.length)
		{
			this.lastPos = this.str.length;
			return new Break(this.str.length);
		}
		return null;
	}
}

@if(0)
// Test code.
global.codePointToString = function(code_point)
{
	var MAX_SIZE = 0x4000;
	var highSurrogate;
	var lowSurrogate;
	var result = '';
	{
		var codePoint = code_point;//ToNumber(arguments[index]);
		if (
			//!IsInteger(codePoint) ||
			codePoint < 0 || codePoint > 0x10FFFF // not a valid Unicode code point
		) {
			throw Exception('Invalid code point: ' + codePoint);
		}
		if (codePoint <= 0xFFFF) { // BMP code point
			result = $codePoint;
		} else { // Astral code point; split in surrogate halves
			// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
			codePoint -= 0x10000;
			highSurrogate = (codePoint >> 10) + 0xD800;
			lowSurrogate = (codePoint % 0x400) + 0xDC00;
			result += $highSurrogate;
			result += $lowSurrogate;
		}
	}
	return result;
};

{
	var x = [];
	// https://github.com/foliojs/linebreak/blob/50e9b4dbccecb3d5e28746cb06f994275204232b/test/LineBreakTest.txt
	x.load("LineBreakTest.txt");
	var skip = [
		125, 127, 815, 1161, 1163, 1165, 1167, 1331, 2189, 2191, 2873, 2875, 3567, 3739, 4081, 4083,
		4425, 4427, 4473, 4475, 4597, 4599, 4645, 4647, 4943, 5109, 5111, 5459, 6149, 6151, 6153, 6155,
		6489, 6491, 6663, 6833, 6835, 7005, 7007, 7177, 7179, 7477, 7486, 7491, 7576, 7577, 7578, 7579,
		7580, 7581, 7583, 7584, 7585, 7586, 7587, 7604, 7610, 7611
	];
	for (var i = 0; i < x.count; i += 1)
	{
		var line = x[i];
		var rowNumber = i + 1;

		if (skip.find(rowNumber) !== -1 || line == "")
		{
			continue;
		}
		
		if (line.substring(0, 1) === "#")
		{
			continue;
		}

		var surgate_pairs;
		var cols_comment = /#/.split(line);
		var cols = cols_comment[0];
		var comment = cols_comment[1];
		var str = "";
		{
			var codePoints = [];
			var tmp = /\s*[×÷]\s*/.split(cols);
			for (var ii = 1; ii < tmp.count - 1; ii += 1)
			{
				var hex = ("0x" + tmp[ii]) | 0;
				str += global.codePointToString(hex);
			}
		}

		var breaker = new LineBreaker(str);
		var breaks = [];
		var last = 0;
		var bk;
		while (bk = breaker.nextBreak())
		{
			var len2pos = bk.position - last;
			breaks.add(str.substring(last, len2pos));
			last = bk.position;
		}

		var expected = [];
		{
			var tmp = /\s*÷\s*/.split(cols);
			for (var ii = 0; ii < tmp.count - 1; ii += 1)
			{
				var codes = /\s*×\s*/.split(tmp[ii]);
				var codes_str = "";
				for (var iii = 0; iii < codes.count; iii += 1)
				{
					var c = codes[iii];
					if (iii === 0 && c === "")
					{
						continue;
					}

					c = ("0x" + c) | 0;
					codes_str += global.codePointToString(c);
				}
				expected.add(codes_str);
			}
		}

		if (breaks.join(",") != expected.join(","))
		{
			Debug.message(rowNumber + " fail: " + cols);
		}
	}
}
@endif
