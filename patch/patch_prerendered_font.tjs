
if (typeof(System.savePreRenderedFont) !== "Object" && System.getArgument('-createprerenderedfonts') === "true")
{
	if (Storages.isExistentStorage("tftSave.dll"))
	{
		Plugins.link("tftSave.dll");
	}
}

if (typeof(System.addFont) !== "Object")
{
	if (Storages.isExistentStorage("addFont.dll"))
	{
		Plugins.link("addFont.dll");
	}
}

if (typeof(Storages.createDirectory) !== "Object")
{
	if (Storages.isExistentStorage("fstat.dll"))
	{
		Plugins.link("fstat.dll");
	}
}

{
	global.prerenderedFontInfo = %[];
	global.prerenderedFontDirectory = ("%s/%s/").sprintf(global.paths_base[0], "fonts");

	global.prerenderedFontTable = [
		// Face, height, angle, bold, italic, strikeout, underline
		["Bernhard Modern Std Roman", 12, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 17, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 20, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 27, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 30, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 30, 0, true, false, false, false],
		["Bernhard Modern Std Roman", 32, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 42, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 48, 0, false, false, false, false],
		["Bernhard Modern Std Roman", 48, 0, true, false, false, false],
		["Bernhard Modern Std Roman", 67, 0, false, false, false, false],
		["Calibri", 12, 0, false, false, false, false],
		["Calibri", 12, 0, true, false, false, false],
		["Calibri", 15, 0, false, false, false, false],
		["Calibri", 16, 0, false, false, false, false],
		["Calibri", 19, 0, false, false, false, false],
		["Calibri", 19, 0, true, false, false, false],
		["Calibri", 20, 0, false, false, false, false],
		["Calibri", 20, 0, true, false, false, false],
		["Calibri", 21, 0, false, false, false, false],
		["Calibri", 24, 0, false, false, false, false],
		["Calibri", 24, 0, true, false, false, false],
		["Calibri", 25, 0, false, false, false, false],
		["Calibri", 27, 0, false, false, false, false],
		["Calibri", 27, 0, true, false, false, false],
		["Calibri", 32, 0, false, false, false, false],
		["Calibri", 32, 0, true, false, false, false],
		["Calibri", 33, 0, false, false, false, false],
		["Calibri", 38, 0, false, false, false, false],
		["Calibri", 43, 0, false, false, false, false],
		["Calibri", 43, 0, true, false, false, false],
		["FZShuTi", 11, 0, false, false, false, false],
		["FZShuTi", 12, 0, false, false, false, false],
		["FZShuTi", 13, 0, false, false, false, false],
		["FZShuTi", 15, 0, false, false, false, false],
		["FZShuTi", 17, 0, false, false, false, false],
		["FZShuTi", 18, 0, false, false, false, false],
		["FZShuTi", 19, 0, false, false, false, false],
		["FZShuTi", 20, 0, false, false, false, false],
		["FZShuTi", 24, 0, false, false, false, false],
		["FZShuTi", 28, 0, false, false, false, false],
		["FZShuTi", 30, 0, false, false, false, false],
		["MS UI Gothic", 14, 0, false, false, false, false],
		["MS UI Gothic", 16, 0, false, false, false, false],
		["MS UI Gothic", 20, 0, false, false, false, false],
		["MS UI Gothic", 25, 0, false, false, false, false],
		["MS UI Gothic", 32, 0, false, false, false, false],
		["MS UI Gothic", 9, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 10, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 11, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 12, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 13, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 14, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 14, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 15, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 16, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 17, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 17, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 18, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 19, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 19, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 20, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 22, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 22, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 23, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 23, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 24, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 25, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 25, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 27, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 27, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 28, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 29, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 30, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 30, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 32, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 36, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 36, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 38, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 40, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 40, 0, true, false, false, false],
		["Sabon Next LT Pro Display", 46, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 8, 0, false, false, false, false],
		["Sabon Next LT Pro Display", 9, 0, false, false, false, false],
		["ＭＳ ゴシック", 12, 0, false, false, false, false],
		["ＭＳ ゴシック", 12, 0, true, false, false, false],
		["ＭＳ ゴシック", 16, 0, false, false, false, false],
		["ＭＳ ゴシック", 19, 0, true, false, false, false],
		["ＭＳ ゴシック", 24, 0, false, false, false, false],
		["ＭＳ ゴシック", 25, 0, false, false, false, false],
		["ＭＳ ゴシック", 27, 0, false, false, false, false],
		["ＭＳ ゴシック", 27, 0, true, false, false, false],
		["ＭＳ ゴシック", 38, 0, false, false, false, false],
		["ＭＳ ゴシック", 43, 0, false, false, false, false],
		["ＭＳ ゴシック", 43, 0, true, false, false, false],
		["ＭＳ 明朝", 12, 0, false, false, false, false],
		["ＭＳ 明朝", 19, 0, false, false, false, false],
		["ＭＳ 明朝", 27, 0, false, false, false, false],
		["ＭＳ 明朝", 43, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 12, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 14, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 15, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 16, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 19, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 20, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 21, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 22, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 24, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 25, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 27, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 32, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 33, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 43, 0, false, false, false, false],
		["ＭＳ Ｐゴシック", 9, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 10, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 11, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 12, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 13, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 14, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 14, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 15, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 16, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 17, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 17, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 18, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 19, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 19, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 20, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 20, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 21, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 22, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 22, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 23, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 23, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 24, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 24, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 25, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 25, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 27, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 27, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 28, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 29, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 30, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 30, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 32, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 32, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 33, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 36, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 36, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 38, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 38, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 40, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 40, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 42, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 43, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 43, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 46, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 48, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 48, 0, true, false, false, false],
		["ＭＳ Ｐ明朝", 67, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 8, 0, false, false, false, false],
		["ＭＳ Ｐ明朝", 9, 0, false, false, false, false],
	];

	global.fontNameReplace = function(matcharr)
	{
		return ('%x').sprintf(#(matcharr[0]));
	};

	global.getPrerenderedFontNameTemplate = function(orig_font)
	{
		return ("%s__%s_%s_%s%s%s%s.tft").sprintf(orig_font.face.replace(/[^A-Za-z]/g, global.fontNameReplace), orig_font.height, orig_font.angle, orig_font.bold ? "b" : "", orig_font.italic ? "i" : "", orig_font.strikeout ? "s" : "", orig_font.underline ? "u" : "");
	};

	global.automapPrerenderedFont = function(orig_font)
	{
		if (orig_font.height < 0)
		{
			// Negative height is not supported (see LayerIntf.cpp)
			orig_font.height = -orig_font.height;
		}

		// Normalize the angle between 0-3600 (in tenths of degrees)
		if (orig_font.angle > 3600)
		{
			orig_font.angle = orig_font.angle % 3600;
		}
		if (orig_font.angle < 0)
		{
			orig_font.angle += 3600;
		}

		if (orig_font.face.charAt(0) === ",")
		{
			// Get rid of the comma (tftSave doesn't support automatic font selection)
			orig_font.face = orig_font.face.substring(1);
		}
		var font_path_1 = global.getPrerenderedFontNameTemplate(orig_font);
		if (global.prerenderedFontInfo[font_path_1] === true)
		{
			// We already handled this font, so return here to avoid unnecessary cache clears
			return;
		}
		var font_path_2 = ("%s/%s").sprintf(global.prerenderedFontDirectory, font_path_1);
		var fontobj = orig_font;
		if (typeof(global.Font) === "Object")
		{
			fontobj = new Font();
			fontobj.face = orig_font.face;
			fontobj.height = orig_font.height;
			fontobj.angle = orig_font.angle;
			fontobj.bold = orig_font.bold;
			fontobj.italic = orig_font.italic;
			fontobj.strikeout = orig_font.strikeout;
			fontobj.underline = orig_font.underline;
		}
@if(0)
		if (typeof(global.createPrerenderedFont) === "Object" && !Storages.isExistentStorage(font_path_1) && !Storages.isExistentStorage(font_path_2))
		{
			global.createPrerenderedFont(fontobj);
		}
@endif
		if (Storages.isExistentStorage(font_path_1))
		{
			fontobj.mapPrerenderedFont(font_path_1);
		}
		else if (Storages.isExistentStorage(font_path_2))
		{
			fontobj.mapPrerenderedFont(font_path_2);
		}
		else
		{
			Debug.message(("No prerendered font exists for \"%s\" with height %s, angle %s, %s bold, %s italic, %s strikeout, %s underline").sprintf(fontobj.face, fontobj.height, fontobj.angle, fontobj.bold ? "" : "not", fontobj.italic ? "" : "not", fontobj.strikeout ? "" : "not", fontobj.underline ? "" : "not"));
			fontobj.unmapPrerenderedFont();
		}
		if (typeof(global.Font) === "Object")
		{
			invalidate fontobj;
			fontobj = void;
		}
		global.prerenderedFontInfo[font_path_1] = true;
	};
}

{
	if (typeof(System.savePreRenderedFont) === "Object" && typeof(Storages.createDirectory) === "Object" && typeof(System.addFont) === "Object")
	{
		var codepoint_ranges = [
			[0x0000, 0x007F], // Basic Latin (Lower half of ISO/IEC 8859-1: ISO/IEC 646:1991-IRV aka ASCII)
			[0x0080, 0x00FF], // Latin-1 Supplement (Upper half of ISO/IEC 8859-1)
			[0x0100, 0x017F], // Latin Extended-A
			[0x0180, 0x024F], // Latin Extended-B
			[0x0250, 0x02AF], // IPA Extensions
			[0x02B0, 0x02FF], // Spacing Modifier Letters
			[0x0300, 0x036F], // Combining Diacritical Marks
			[0x0370, 0x03FF], // Greek and Coptic
			[0x0400, 0x04FF], // Cyrillic
			[0x0500, 0x052F], // Cyrillic Supplement
			[0x0530, 0x058F], // Armenian
			[0x0590, 0x05FF], // Hebrew
			[0x0600, 0x06FF], // Arabic
			[0x0700, 0x074F], // Syriac
			[0x0750, 0x077F], // Arabic Supplement
			[0x0780, 0x07BF], // Thaana
			[0x07C0, 0x07FF], // N'Ko
			[0x0800, 0x083F], // Samaritan
			[0x0840, 0x085F], // Mandaic
			[0x0860, 0x086F], // Syriac Supplement
			[0x08A0, 0x08FF], // Arabic Extended-A
			[0x0900, 0x097F], // Devanagari
			[0x0980, 0x09FF], // Bengali
			[0x0A00, 0x0A7F], // Gurmukhi
			[0x0A80, 0x0AFF], // Gujarati
			[0x0B00, 0x0B7F], // Oriya
			[0x0B80, 0x0BFF], // Tamil
			[0x0C00, 0x0C7F], // Telugu
			[0x0C80, 0x0CFF], // Kannada
			[0x0D00, 0x0D7F], // Malayalam
			[0x0D80, 0x0DFF], // Sinhala
			[0x0E00, 0x0E7F], // Thai
			[0x0E80, 0x0EFF], // Lao
			[0x0F00, 0x0FFF], // Tibetan
			[0x1000, 0x109F], // Myanmar
			[0x10A0, 0x10FF], // Georgian
			[0x1100, 0x11FF], // Hangul Jamo
			[0x1200, 0x137F], // Ethiopic
			[0x1380, 0x139F], // Ethiopic Supplement
			[0x13A0, 0x13FF], // Cherokee
			[0x1400, 0x167F], // Unified Canadian Aboriginal Syllabics
			[0x1680, 0x169F], // Ogham
			[0x16A0, 0x16FF], // Runic
			[0x1700, 0x171F], // Tagalog
			[0x1720, 0x173F], // Hanunoo
			[0x1740, 0x175F], // Buhid
			[0x1760, 0x177F], // Tagbanwa
			[0x1780, 0x17FF], // Khmer
			[0x1800, 0x18AF], // Mongolian
			[0x18B0, 0x18FF], // Unified Canadian Aboriginal Syllabics Extended
			[0x1900, 0x194F], // Limbu
			[0x1950, 0x197F], // Tai Le
			[0x1980, 0x19DF], // New Tai Lue
			[0x19E0, 0x19FF], // Khmer Symbols
			[0x1A00, 0x1A1F], // Buginese
			[0x1A20, 0x1AAF], // Tai Tham
			[0x1AB0, 0x1AFF], // Combining Diacritical Marks Extended
			[0x1B00, 0x1B7F], // Balinese
			[0x1B80, 0x1BBF], // Sundanese
			[0x1BC0, 0x1BFF], // Batak
			[0x1C00, 0x1C4F], // Lepcha
			[0x1C50, 0x1C7F], // Ol Chiki
			[0x1C80, 0x1C8F], // Cyrillic Extended-C
			[0x1C90, 0x1CBF], // Georgian Extended
			[0x1CC0, 0x1CCF], // Sundanese Supplement
			[0x1CD0, 0x1CFF], // Vedic Extensions
			[0x1D00, 0x1D7F], // Phonetic Extensions
			[0x1D80, 0x1DBF], // Phonetic Extensions Supplement
			[0x1DC0, 0x1DFF], // Combining Diacritical Marks Supplement
			[0x1E00, 0x1EFF], // Latin Extended Additional
			[0x1F00, 0x1FFF], // Greek Extended
			[0x2000, 0x206F], // General Punctuation
			[0x2070, 0x209F], // Superscripts and Subscripts
			[0x20A0, 0x20CF], // Currency Symbols
			[0x20D0, 0x20FF], // Combining Diacritical Marks for Symbols
			[0x2100, 0x214F], // Letterlike Symbols
			[0x2150, 0x218F], // Number Forms
			[0x2190, 0x21FF], // Arrows
			[0x2200, 0x22FF], // Mathematical Operators
			[0x2300, 0x23FF], // Miscellaneous Technical
			[0x2400, 0x243F], // Control Pictures
			[0x2440, 0x245F], // Optical Character Recognition
			[0x2460, 0x24FF], // Enclosed Alphanumerics
			[0x2500, 0x257F], // Box Drawing
			[0x2580, 0x259F], // Block Elements
			[0x25A0, 0x25FF], // Geometric Shapes
			[0x2600, 0x26FF], // Miscellaneous Symbols
			[0x2700, 0x27BF], // Dingbats
			[0x27C0, 0x27EF], // Miscellaneous Mathematical Symbols-A
			[0x27F0, 0x27FF], // Supplemental Arrows-A
			[0x2800, 0x28FF], // Braille Patterns
			[0x2900, 0x297F], // Supplemental Arrows-B
			[0x2980, 0x29FF], // Miscellaneous Mathematical Symbols-B
			[0x2A00, 0x2AFF], // Supplemental Mathematical Operators
			[0x2B00, 0x2BFF], // Miscellaneous Symbols and Arrows
			[0x2C00, 0x2C5F], // Glagolitic
			[0x2C60, 0x2C7F], // Latin Extended-C
			[0x2C80, 0x2CFF], // Coptic
			[0x2D00, 0x2D2F], // Georgian Supplement
			[0x2D30, 0x2D7F], // Tifinagh
			[0x2D80, 0x2DDF], // Ethiopic Extended
			[0x2DE0, 0x2DFF], // Cyrillic Extended-A
			[0x2E00, 0x2E7F], // Supplemental Punctuation
			[0x2E80, 0x2EFF], // CJK Radicals Supplement
			[0x2F00, 0x2FDF], // Kangxi Radicals
			[0x2FF0, 0x2FFF], // Ideographic Description Characters
			[0x3000, 0x303F], // CJK Symbols and Punctuation
			[0x3040, 0x309F], // Hiragana
			[0x30A0, 0x30FF], // Katakana
			[0x3100, 0x312F], // Bopomofo
			[0x3130, 0x318F], // Hangul Compatibility Jamo
			[0x3190, 0x319F], // Kanbun
			[0x31A0, 0x31BF], // Bopomofo Extended
			[0x31C0, 0x31EF], // CJK Strokes
			[0x31F0, 0x31FF], // Katakana Phonetic Extensions
			[0x3200, 0x32FF], // Enclosed CJK Letters and Months
			[0x3300, 0x33FF], // CJK Compatibility
			[0x3400, 0x4DBF], // CJK Unified Ideographs Extension A
			[0x4DC0, 0x4DFF], // Yijing Hexagram Symbols
			[0x4E00, 0x9FFF], // CJK Unified Ideographs
			[0xA000, 0xA48F], // Yi Syllables
			[0xA490, 0xA4CF], // Yi Radicals
			[0xA4D0, 0xA4FF], // Lisu
			[0xA500, 0xA63F], // Vai
			[0xA640, 0xA69F], // Cyrillic Extended-B
			[0xA6A0, 0xA6FF], // Bamum
			[0xA700, 0xA71F], // Modifier Tone Letters
			[0xA720, 0xA7FF], // Latin Extended-D
			[0xA800, 0xA82F], // Syloti Nagri
			[0xA830, 0xA83F], // Common Indic Number Forms
			[0xA840, 0xA87F], // Phags-pa
			[0xA880, 0xA8DF], // Saurashtra
			[0xA8E0, 0xA8FF], // Devanagari Extended
			[0xA900, 0xA92F], // Kayah Li
			[0xA930, 0xA95F], // Rejang
			[0xA960, 0xA97F], // Hangul Jamo Extended-A
			[0xA980, 0xA9DF], // Javanese
			[0xA9E0, 0xA9FF], // Myanmar Extended-B
			[0xAA00, 0xAA5F], // Cham
			[0xAA60, 0xAA7F], // Myanmar Extended-A
			[0xAA80, 0xAADF], // Tai Viet
			[0xAAE0, 0xAAFF], // Meetei Mayek Extensions
			[0xAB00, 0xAB2F], // Ethiopic Extended-A
			[0xAB30, 0xAB6F], // Latin Extended-E
			[0xAB70, 0xABBF], // Cherokee Supplement
			[0xABC0, 0xABFF], // Meetei Mayek
			[0xAC00, 0xD7AF], // Hangul Syllables
			[0xD7B0, 0xD7FF], // Hangul Jamo Extended-B
			[0xD800, 0xDB7F], // High Surrogates
			[0xDB80, 0xDBFF], // High Private Use Surrogates
			[0xDC00, 0xDFFF], // Low Surrogates
			[0xE000, 0xF8FF], // Private Use Area
			[0xF900, 0xFAFF], // CJK Compatibility Ideographs
			[0xFB00, 0xFB4F], // Alphabetic Presentation Forms
			[0xFB50, 0xFDFF], // Arabic Presentation Forms-A
			[0xFE00, 0xFE0F], // Variation Selectors
			[0xFE10, 0xFE1F], // Vertical Forms
			[0xFE20, 0xFE2F], // Combining Half Marks
			[0xFE30, 0xFE4F], // CJK Compatibility Forms
			[0xFE50, 0xFE6F], // Small Form Variants
			[0xFE70, 0xFEFF], // Arabic Presentation Forms-B
			[0xFF00, 0xFFEF], // Halfwidth and Fullwidth Forms
			[0xFFF0, 0xFFFF], // Specials
		];

		global.codepointsForFont = [];

		for (var i = 0; (i < codepoint_ranges.count) && (codepoint_ranges[i] !== void); i += 1)
		{
			for (var codepoint = codepoint_ranges[i][0]; codepoint <= codepoint_ranges[i][1]; codepoint += 1)
			{
				global.codepointsForFont.add(codepoint);
			}
		}

		global.buildGlyph = function(ch)
		{
			global.tempLayerForFont.drawGlyph(ch);
			return global.tempLayerForFont;
		};

		global.createPrerenderedFont = function(orig_font)
		{
			if (!Storages.isExistentDirectory(global.prerenderedFontDirectory))
			{
				Storages.createDirectory(global.prerenderedFontDirectory);
			}

			var font_path = ("%s/%s").sprintf(global.prerenderedFontDirectory, global.getPrerenderedFontNameTemplate(orig_font));

			if(Storages.isExistentStorage(font_path))
			{
				return;
			}

			var origEventDisabled = System.eventDisabled;
			System.eventDisabled = true;

			var win;
			if (typeof(global.Window_patch_layer_original) === "Object")
			{
				win = new global.Window_patch_layer_original();
			}
			else
			{
				win = new global.Window();
			}

			if (typeof(global.Layer_patch_layer_original) === "Object")
			{
				win.add(new global.Layer_patch_layer_original(win, null));
				global.tempLayerForFont = new global.Layer_patch_layer_original(win, win.primaryLayer);
			}
			else
			{
				win.add(new global.Layer(win, null));
				global.tempLayerForFont = new global.Layer(win, win.primaryLayer);
			}

			with (global.tempLayerForFont)
			{
				var str = "testing 123";
				var lw = orig_font.height * 2, lh = orig_font.height * 2;
				.setImageSize(lw, lh);
				.fillRect(0, 0, lw, lh, 0xFF000000 | 0xFFFFFF);
				.font.face = orig_font.face;
				.font.height = orig_font.height;
				.font.angle = orig_font.angle;
				.font.bold = orig_font.bold;
				.font.italic = orig_font.italic;
				.font.strikeout = orig_font.strikeout;
				.font.underline = orig_font.underline;
				var w = .font.getTextWidth(str);
				var h = .font.getTextHeight(str);
				.drawText((lw-w)\2, (lh-h)\2, str, 0xFFFFFF, 255, true);
			}

			Debug.message(("Creating font \"%s\" with height %s, angle %s, %s bold, %s italic, %s strikeout, %s underline").sprintf(orig_font.face, orig_font.height, orig_font.angle, orig_font.bold ? "" : "not", orig_font.italic ? "" : "not", orig_font.strikeout ? "" : "not", orig_font.underline ? "" : "not"));

			System.savePreRenderedFont(font_path, global.codepointsForFont, global.buildGlyph);
			invalidate(global.tempLayerForFont);
			delete(global.tempLayerForFont);
			invalidate(win);

			System.eventDisabled = origEventDisabled;
		};

		// Create fonts if requested
		// NOTE: this is done before System.addFont (from addFont.dll is done)
		if (System.getArgument('-createprerenderedfonts') === "true")
		{
			Storages.addAutoPath(global.typemoon_repo_root + "Common/English/");
			Storages.addAutoPath(global.typemoon_repo_root + "RealtaNua/English/");
			var extraFontFiles = ["calibri.ttf", "SabonNextLTPro-Display_0.ttf", "BernhardModernStd-Roman.ttf", "FZST.ttf"];
			for (var i = 0; (i < extraFontFiles.count) && (extraFontFiles[i] !== void); i += 1)
			{
				var result = System.addFont(extraFontFiles[i], true);
				if (typeof(result) === "Integer" && result > 0)
				{
					Debug.message(("Successfully added font \"%s\"").sprintf(extraFontFiles[i]));
				}
				else
				{
					Debug.message(("Failed to find font file \"%s\"; bailing out.").sprintf(extraFontFiles[i]));
					System.exit(127);
				}
			}
			var fnttable = global.prerenderedFontTable;
			var fnt = new Font();
			for (var i = 0; (i < fnttable.count) && (fnttable[i] !== void); i += 1)
			{
				fnt.face = fnttable[i][0];
				fnt.height = fnttable[i][1];
				fnt.angle = fnttable[i][2];
				fnt.bold = fnttable[i][3];
				fnt.italic = fnttable[i][4];
				fnt.strikeout = fnttable[i][5];
				fnt.underline = fnttable[i][6];
				global.createPrerenderedFont(fnt);
			}
			Debug.message("Fonts were successfully created.");
			System.exit(0);
		}
	}
	else if (System.getArgument('-createprerenderedfonts') === "true")
	{
		var msg = "";
		msg += "patch_prerendered_font: failed to initialize font creation for the following reasons:\n";
		if (typeof(System.savePreRenderedFont) !== "Object")
			msg += "System.savePreRenderedFont function (tftSave.dll) not found\n";
		if (typeof(Storages.createDirectory) !== "Object")
			msg += "Storages.createDirectory function (fstat.dll) not found\n";
		if (typeof(System.addFont) !== "Object")
			msg += "System.addFont function (addFont.dll) not found\n";
		System.inform(msg);
		System.exit(127);
	}
}
