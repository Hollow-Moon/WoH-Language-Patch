// i18n
global.__t = function(text)
{
	return text;
} incontextof global;

global._mt = function(text)
{
	return text;
} incontextof global;

global.settingsDomain = "settings";
global.__s = function(text, context)
{
	return _x(text, context, settingsDomain);
} incontextof global;

global.__si = function(text, context)
{
	return (__s("" + text, context)) | 0;
} incontextof global;

global.__sb = function(text, context)
{
	return __si(text, context) == true;
} incontextof global;

global.__st = function(text, context)
{
	return text;
} incontextof global;

global.__sti = function(text, context)
{
	return (__st(text, context)) | 0;
} incontextof global;

global.loadMOs = function(language)
{
	removeAllMO();
	var translation_mo_path = find_file_in_language_paths("Translation.mo", language);
	if (typeof(translation_mo_path) === "String")
	{
		loadMoFile(translation_mo_path);
	}
	var settings_mo_path = find_file_in_language_paths("Settings.mo", language);
	if (typeof(settings_mo_path) === "String")
	{
		loadMoFile(settings_mo_path, settingsDomain);
	}
};

global.refreshMenuString = function(kag, menu)
{
	if (typeof(menu.originalCaption) === "String") {
		menu.caption = __(menu.originalCaption);
	}
	if (typeof(menu.captionArg) !== "undefined") {
		menu.caption = menu.caption.sprintf(menu.captionArg);
	}

	var children = menu.children;
	for (var i = 0, internal_forloop_count = children.count; i < internal_forloop_count; i += 1)
		refreshMenuString(kag, children[i]);
@if(ZOOM_WINDOW)
	kag.refreshExSystemMenu();
@endif
};

global.refreshStringWithLanguage = function(kag, language)
{
	loadMOs(language);

	var patch_info_url = __s("https://example.com/", "patch_info_url");
	if (patch_info_url !== "https://example.com/")
	{
		global.PatchInfoURL = patch_info_url;
	}

	if (typeof(global.System) === "Object" && typeof(global.System.update_title) === "Object")
	{
		global.System.update_title();
	}
	if (typeof(kag) === "Object")
	{
		refreshMenuString(kag, kag.menu);
		if (typeof(kag.hintlayer) === "Object")
		{
			invalidate kag.hintlayer;
			kag.hintlayer = void;
		}
	}
};

global.orig_font_rasterizer = 0;
if (typeof(global.Font) === "Object" && typeof(global.Font.rasterizer) === "Integer")
{
	global.orig_font_rasterizer = global.Font.rasterizer;
}
global.loaded_language_fonts = [];
global.load_fonts = function(language)
{
@if(!FREETYPE_FONT)
	var raster_to_use = global.orig_font_rasterizer;
	if (typeof(global.Font) === "Object" && typeof(global.Font.rasterizer) === "Integer")
	{
		if (!!(global.languageSettings[language].use_freetype))
		{
			if (typeof(global.frFreeType) === "Integer")
			{
				raster_to_use = global.frFreeType;
			}
		}
		else
		{
			global.Font.rasterizer = global.orig_font_rasterizer;
		}
	}
@endif
@if(!FREETYPE_FONT)
	if (typeof(global.Font) === "Object" && typeof(global.Font.rasterizer) === "Integer")
	{
		global.Font.rasterizer = raster_to_use;
	}
@endif
	if (loaded_language_fonts.contains(language))
	{
		return;
	}
@if(!FREETYPE_FONT)
	var orig_rasterizer = 0;
	var rasterizers = [];
	if (typeof(global.frFreeType) === "Integer" && typeof(global.Font.rasterizer) === "Integer")
	{
		rasterizers.add(global.frFreeType);
		rasterizers.add(global.frGDI);
		global.Font.rasterizer = global.frFreeType;
	}
	else
	{
		rasterizers.add(0);
	}
@endif
	var fontFiles = getFontFiles(language);
	for (var i = 0, internal_forloop_count = fontFiles.count; i < internal_forloop_count; i += 1)
	{
		var font_file_path = find_file_in_language_paths(fontFiles[i], language);
		if (typeof(font_file_path) === "String")
		{
			if (typeof(global.Font) === "Object" && typeof(global.Font.addFont) === "Object")
			{
@if(!FREETYPE_FONT)
				for (var j = 0, internal_forloop_count = rasterizers.count; j < internal_forloop_count; j += 1)
@endif
				{
@if(!FREETYPE_FONT)
					if (typeof(global.Font.rasterizer) === "Integer")
					{
						global.Font.rasterizer = rasterizers[j];
						if (global.Font.rasterizer != rasterizers[j])
						{
							// Got clamped, probably doesn't exist.
							continue;
						}
					}
@endif
					var result = global.Font.addFont(font_file_path);
					if (typeof(result) === "Object" && result.count > 0)
					{
						Debug.message(("Successfully added font \"%s\" from file \"%s\"").sprintf(result[0], font_file_path));
					}
					else
					{
						Debug.message(("Failed to add font file \"%s\"").sprintf(fontFiles[i]));
					}
				}
			}
			if (typeof(System.addFont) === "Object")
			{
				var result = System.addFont(font_file_path, true);
				if (typeof(result) === "Integer" && result > 0)
				{
					Debug.message(("Successfully added font \"%s\"").sprintf(fontFiles[i]));
				}
				else
				{
					Debug.message(("Failed to add font file \"%s\"").sprintf(fontFiles[i]));
				}
			}
		}
		else
		{
			dm(("warning: font %s does not exist").sprintf(fontFiles[i]));
		}
	}
@if(!FREETYPE_FONT)
	if (typeof(global.Font) === "Object" && typeof(global.Font.rasterizer) === "Integer")
	{
		global.Font.rasterizer = raster_to_use;
	}
@endif

	loaded_language_fonts.add(language);
};

global.loaded_language_prerendered_fonts = [];
global.load_prerendered_fonts = function(language)
{
	if (loaded_language_prerendered_fonts.contains(language)) {
		return;
	}

	if (typeof(global.bitmapFonts) === "Object")
	{
		var prerenderedFontFiles = getPrerenderedFontFiles(language);
		for (var i = 0, internal_forloop_count = prerenderedFontFiles.count; i < internal_forloop_count; i += 2)
		{
			var prerendered_font_file_path = find_file_in_language_paths(prerenderedFontFiles[i + 1], language);
			if (typeof(prerendered_font_file_path) === "String")
			{
				dm(("Adding prerendered font %s").sprintf(prerenderedFontFiles[i]));
				global.bitmapFonts.push(prerenderedFontFiles[i]);
				global.bitmapFonts.push(prerendered_font_file_path);
			}
			else
			{
				dm(("warning: prerendered font %s does not exist").sprintf(prerenderedFontFiles[i]));
			}
		}
		for (var i = 0, internal_forloop_count = global.bitmapFonts.count; i < internal_forloop_count; i += 2)
		{
			global.loadedBitmapFonts[global.bitmapFonts[i]] = global.bitmapFonts[i + 1];
		}
	}

	loaded_language_prerendered_fonts.add(language);
};


global.setFontWithLanguage = function(language, kag=global.kag)
{
	load_fonts(language);

	with (kag)
	{
		/// Main ///
		if (.sflags.userFont[language] === void)
		{
			.sflags.userFont[language] = global.get_default_userfont_settings(kag);
		}

		var uf = .sflags.userFont[language];
		if (typeof(uf.fontface) !== "String" || uf.fontface === "" || typeof(uf.bold) !== "Integer" || typeof(uf.rubybold) !== "Integer")
		{
			uf = global.get_default_userfont_settings(kag);
		}
		.chDefaultFace				= uf.fontface;
		if (typeof(.tflags) === "Object")
		{
			.tflags.chDefaultFace = uf.fontface;
		}
		{
			.chDefaultBold				= !!uf.bold;
		}
		if (typeof(.tflags) === "Object")
		{
			.tflags.chDefaultBold = !!uf.bold;
		}
		{
			.chDefaultRubyBold				= !!uf.rubybold;
		}
		if (typeof(.tflags) === "Object")
		{
			.tflags.chDefaultRubyBold = !!uf.rubybold;
		}
		if (typeof(.current) === "Object")
		{
			.current.defaultBold		= !!uf.bold;
			.current.defaultRubyBold	= !!uf.rubybold;
			.setMessageLayerUserFont();
		}
	}

	/// History ///
	var hf = kag.chDefaultFace !== void && get_historyFont(kag)[kag.chDefaultFace] !== void ? get_historyFont(kag)[kag.chDefaultFace] : get_historyFontDefault(kag);

	if (typeof(kag.historyLayer) === "Object")
	{
		with(kag.historyLayer.font)
		{
			.face = kag.sflags.historyFont		= hf[0];
			.bold = kag.sflags.historyFontBold	= hf[1];
		}
	}
};

global.set_default_history_settings = function(curlangset)
{
	var histsetting = global.get_default_history_settings();
	curlangset.history_default = histsetting.fontName;
	curlangset.history_default_bold = histsetting.fontBold;
};

global.saveFontWithLanguage = function(kag=global.kag)
{
	var defaultface = void;
	var bold = false;
	var rubybold = false;
	with(kag)
	{
		if (typeof(.chDefaultFace) === "String" && .chDefaultFace !== "")
		{
			defaultface = .chDefaultFace;
		}
		else if (typeof(.scflags) === "Object" && typeof(.scflags.chDefaultFace) === "String" && .scflags.chDefaultFace !== "")
		{
			defaultface = .scflags.chDefaultFace;
		}
		if (typeof(.chDefaultBold) === "Integer")
		{
			bold = .chDefaultBold;
		}
		else if (typeof(.current) === "Object")
		{
			bold = .current.defaultBold;
		}
		else if (typeof(.scflags) === "Object" && typeof(.scflags.chDefaultBold) === "Integer")
		{
			bold = .scflags.chDefaultBold;
		}
		if (typeof(.chDefaultRubyBold) === "Integer")
		{
			rubybold = .chDefaultRubyBold;
		}
		else if (typeof(.current) === "Object")
		{
			rubybold = .current.defaultRubyBold;
		}
		else if (typeof(.scflags) === "Object" && typeof(.scflags.chDefaultRubyBold) === "Integer")
		{
			rubybold = .scflags.chDefaultRubyBold;
		}
		var uf = %[
			fontface:defaultface,
			bold:bold | 0,
			rubybold:rubybold | 0,
		];
		if (typeof(uf.fontface) !== "String" || uf.fontface === "" || typeof(uf.bold) !== "Integer" || typeof(uf.rubybold) !== "Integer")
		{
			// don't save it
		}
		else
		{
			.sflags.userFont[.sflags.language] = uf;
		}
	}
};

global.chara2displaynamefile = "chara2displayname.dic";
global.chara2displayname = %[];
global.imagesFolderName = "images";
global.subbedVideosFlagName = "subbedVideos";
global.videosFolderName = "videos";
global.japanese_patch_name = devMode? "Japanese" : mainPatchName;
global.japaneseLanguageLoaded = false;
global.languageSearchPathFile = "LanguageSearchpath.ksc";
global.languageSearchPath = [];
global.languagePatchPaths = %[];
global.languageFilePathCache = %[];
global.languageFileCache = %[];

global.find_file_in_language_paths = function(filename, language = void, exts = "")
{
	// Check for absolute path
	if (typeof(filename) !== "String")
	{
		return false;
	}
	if (filename.indexOf(":") !== -1)
	{
		return false;
	}
@if(kirikiriz)
	if (filename.trim() === "")
	{
		return false;
	}
@endif
	if (typeof(language) !== "String")
	{
		if (typeof(global.kag) === "Object")
		{
			if (typeof(global.kag.sflags) === "Object")
			{
				if (typeof(global.kag.sflags.language) === "String")
				{
					language = global.kag.sflags.language;
				}
			}
		}
	}
	if (typeof(language) !== "String")
	{
		return false;
	}
	if (typeof(languagePatchPaths[language]) !== "Object")
	{
		languagePatchPaths[language] = [];
	}
	if (typeof(languageFileCache[language]) !== "Object")
	{
		languageFileCache[language] = %[];
	}
	if (typeof(languageFilePathCache[language]) !== "Object")
	{
		languageFilePathCache[language] = %[];
	}
	if (typeof(languageFileCache[language][filename]) === "Object")
	{
		return true;
	}
	if (typeof(languageFilePathCache[language][filename]) === "String" || typeof(languageFilePathCache[language][filename]) === "Integer")
	{
		return languageFilePathCache[language][filename];
	}
	if (exts !== "" && typeof(exts) === "String")
	{
		exts = exts.split("|");
	}
	else if (typeof(exts) === "Object")
	{
		exts = exts;
	}
	else
	{
		exts = [""];
	}
	var potential_path = false;
	var languagePatchPaths_language = languagePatchPaths[language];
	for (var j = 0, internal_forloop_count = exts.count; j < internal_forloop_count; j += 1)
	{
		for (var i = 0, internal_forloop_count = languagePatchPaths_language.count; i < internal_forloop_count; i += 1)
		{
			try
			{
				var current_potential_path = ("%s%s%s").sprintf(languagePatchPaths_language[i], filename, exts[j]);
				if (global.Storages.isExistentStorageNoSearchNoNormalize(current_potential_path))
				{
					potential_path = current_potential_path;
				}
			}
			catch(e)
			{

			}
		}
		if (potential_path !== false)
		{
			break;
		}
	}

	languageFilePathCache[language][filename] = potential_path;
	return potential_path;
};

global.Array.load_patch_language_original = global.Array.load;
global.Array.load = function(filename, mode='')
{
	var file_result = void;
@if(GAME_WOHN)
	if (filename !== "first.ks")
@endif
	{
		file_result = find_file_in_language_paths(filename);
	}
	if (typeof(file_result) === "String")
	{
		if ((filename.indexOf(".ks") === filename.length - 3) && global.get_fsncleaner_rescript_enabled() && typeof(global.fsncleaner_rescript) === "Object")
		{
			this.clear();
			this.load_patch_language_original(filename, mode);
			var language_load = [];
			language_load.load_patch_language_original(file_result, mode);
			global.fsncleaner_rescript(this, language_load);
			delete language_load;
			return this;
		}
		return global.Array.load_patch_language_original(file_result, mode);
	}
	else if (typeof(file_result) === "Integer" && file_result === true)
	{
		this.clear();
		var language_load = this;
		if ((filename.indexOf(".ks") === filename.length - 3) && global.get_fsncleaner_rescript_enabled() && typeof(global.fsncleaner_rescript) === "Object")
		{
			language_load = [];
			this.load_patch_language_original(filename, mode);
		}
		language_load.assign(languageFileCache[global.kag.sflags.language][filename]);
		if (language_load.count > 0 && language_load[language_load.count - 1] === "")
		{
			language_load.erase(language_load.count - 1);
		}
		if (language_load !== this)
		{
			global.fsncleaner_rescript(this, language_load);
			delete language_load;
		}
		return this;
	}
	else
	{
		return global.Array.load_patch_language_original(...);
	}
};

global.Scripts.execStorage_patch_language_original = global.Scripts.execStorage;
global.Scripts.execStorage = function(filename, mode='', context=global)
{
	var file_result = find_file_in_language_paths(filename);
	if (typeof(file_result) === "String")
	{
		return global.Scripts.execStorage_patch_language_original(file_result, mode, context);
	}
	else if (typeof(file_result) === "Integer" && file_result === true)
	{
		return global.Scripts.exec(languageFileCache[global.kag.sflags.language][filename].join("\n"), filename, 0, context);
	}
	else
	{
		return global.Scripts.execStorage_patch_language_original(...);
	}
};

global.Scripts.evalStorage_patch_language_original = global.Scripts.evalStorage;
global.Scripts.evalStorage = function(filename, mode='', context=global)
{
	var file_result = find_file_in_language_paths(filename);
	if (typeof(file_result) === "String")
	{
		return global.Scripts.evalStorage_patch_language_original(file_result, mode, context);
	}
	else if (typeof(file_result) === "Integer" && file_result === true)
	{
		return global.Scripts.eval(languageFileCache[global.kag.sflags.language][filename].join("\n"), filename, 0, context);
	}
	else
	{
		return global.Scripts.evalStorage_patch_language_original(...);
	}
};

global.Storages.isExistentStorage_patch_language_original = global.Storages.isExistentStorage;
global.Storages.isExistentStorage = function(filename)
{
	var file_result = find_file_in_language_paths(filename);
	if (typeof(file_result) === "String")
	{
		return true;
	}
	else if (typeof(file_result) === "Integer" && file_result === true)
	{
		return true;
	}
	else
	{
		return global.Storages.isExistentStorage_patch_language_original(...);
	}
};

global.Storages.getPlacedPath_patch_language_original = global.Storages.getPlacedPath;
global.Storages.getPlacedPath = function(filename, exts)
{
	var file_result = find_file_in_language_paths(filename, , exts);
	if (typeof(file_result) === "String")
	{
		return file_result;
	}
	else if (typeof(file_result) === "Integer" && file_result === true)
	{
		return filename;
	}
	else
	{
		return global.Storages.getPlacedPath_patch_language_original(...);
	}
};

global.languagePatchName = function(language)
{
	return language == japaneseLanguage? japanese_patch_name : language_patch_prefix + language;
};

global.languagePatchExists = function(language)
{
	if (language == japaneseLanguage) {
		return true;
	}
	if (devMode) {
		return Storages.isExistentDirectory("../" + language + "/");
	}
	return patchExists(languagePatchName(language));
};

global.language_paths_translate = function(paths)
{
	for (var i = 0, internal_forloop_count = paths.count; i < internal_forloop_count; i += 1)
	{
		paths[i] = global.translate_archive_path(paths[i]);
	}
};

global.load_language_patch = function(language, kag)
{
	var languagePatchName = languagePatchName(language);
	if (typeof(languagePatchPaths[language]) !== "Object")
	{
		if (typeof(languagePatchPaths[language]) !== "Object")
		{
			var patches_arr = [];

			if (language != japaneseLanguage || !japaneseLanguageLoaded) {
				patches_arr.add([languagePatchName]);
				if (devMode)
				{
					patches_arr.add([languagePatchName, "", global.typemoon_repo_root + "common/"]);
				}

				patches_arr.add([languagePatchName, imagesFolderName]);
				if (typeof(kag) === "Object")
				{
@if(HD_MODE)
					addHdPaths(patches_arr, languagePatchName, imagesFolderName) if kag.isHd;
@endif
					patches_arr.add([languagePatchName, get_isHCensored(kag)? censoredHFolderName : uncensoredHFolderName]);
					patches_arr.add([languagePatchName, get_isMatureCensored(kag)? censoredMatureFolderName: uncensoredMatureFolderName]);
					patches_arr.add([languagePatchName, fullyCensoredFolderName]) if get_fullyCensored(kag);
					patches_arr.add([languagePatchName, videosFolderName]) if kag.sflags[subbedVideosFlagName];
				}
			}

			languagePatchPaths[language] = load_patches(patches_arr, false);
			global.language_paths_translate(languagePatchPaths[language]);

			var language_search_path = find_file_in_language_paths(languageSearchPathFile, language);
			languageSearchPath = (typeof(language_search_path) === "String") ? Scripts.evalStorage(language_search_path) : [];
			if (language != japaneseLanguage || !japaneseLanguageLoaded)
			{
				for (var i = 0, internal_forloop_count = languageSearchPath.count; i < internal_forloop_count; i += 1)
				{
					patches_arr.add([languagePatchName, languageSearchPath[i]]);
				}
			}

			if (language === japaneseLanguage && devMode)
			{
				load_patches(patches_arr, true);
				languagePatchPaths[language] = [];
			}
			else
			{
				languagePatchPaths[language] = load_patches(patches_arr, false);
				global.language_paths_translate(languagePatchPaths[language]);
			}
			invalidate patches_arr;
			delete patches_arr;
		}
	}

	refreshStringWithLanguage(kag, language);
	loadLanguageDict(language);
	load_fonts(language);

	var chara2displayname_dic_path = find_file_in_language_paths(chara2displaynamefile, language);
	chara2displayname = (typeof(chara2displayname_dic_path) === "String") ? Scripts.evalStorage(chara2displayname_dic_path) : %[];
	if (language == japaneseLanguage) {
		japaneseLanguageLoaded = true;
	}
};

global.unload_language_patch = function(language, kag)
{
	var languagePatchName = languagePatchName(language);
	var patches_arr = [];

	if (language != japaneseLanguage) {
@if(HD_MODE)
		if (typeof(kag) === "Object")
		{
			addHdPaths(patches_arr, languagePatchName, imagesFolderName) if kag.isHd;
		}
@endif
		patches_arr.add([languagePatchName, imagesFolderName]);
		if (typeof(kag) === "Object")
		{
			patches_arr.add([languagePatchName, get_isHCensored(kag)? censoredHFolderName : uncensoredHFolderName]);
			patches_arr.add([languagePatchName, get_isMatureCensored(kag)? censoredMatureFolderName: uncensoredMatureFolderName]);
			patches_arr.add([languagePatchName, fullyCensoredFolderName]) if get_fullyCensored(kag);
			patches_arr.add([languagePatchName, videosFolderName]) if kag.sflags[subbedVideosFlagName];
		}

		for (var i = 0, internal_forloop_count = languageSearchPath.count; i < internal_forloop_count; i += 1) {
			patches_arr.add([languagePatchName, languageSearchPath[i]]);
		}

		patches_arr.add([languagePatchName]);
		if (devMode)
		{
			patches_arr.add([languagePatchName, "", global.typemoon_repo_root + "common/"]);
		}
	}

	unload_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;

	if (typeof(languagePatchPaths[language]) === "Object")
	{
		delete languagePatchPaths[language];
	}

	if (typeof(languageFileCache[language]) === "Object")
	{
		invalidate languageFileCache[language];
		delete languageFileCache[language];
	}

	if (typeof(languageFilePathCache[language]) === "Object")
	{
		invalidate languageFilePathCache[language];
		delete languageFilePathCache[language];
	}

	chara2displayname = %[];
};

global.loadLanguageSettings = function()
{
	// system locale might be void on older windows systems (such as Windows XP), or systems other than windows (Android, Mac, etc.)
	var systemLocale = System.readRegValue("HKEY_CURRENT_USER\\Control Panel\\International\\LocaleName");
	var found = 0;
	for (var i = 0, internal_forloop_count = languages.count; i < internal_forloop_count; i += 1) {
		var language = languages[i];
		load_language_patch(language, void);

		var locale = __s("ja_JP", "locale");

		if (locale == systemLocale) {
			default_language = language;
			found = 2;
		} else if (found == 0 && systemLocale !== void && locale.substr(0, 2) == systemLocale.substr(0, 2)) {
			default_language = language;
			found = 1;
		}

		unload_language_patch(language, void);
	}
};

// constants
global.japaneseLanguage = "japanese";
global.englishLanguage = "english";
global.koreanLanguage = "korean";
global.frenchLanguage = "french";
global.simplifiedChineseLanguage = "simplified_chinese";
global.russianLanguage = "russian";
global.languagesPatches = [englishLanguage, koreanLanguage, russianLanguage, frenchLanguage, simplifiedChineseLanguage];

global.loadLanguagesList = function()
{
	if (devMode || isKirikiroid) {
		var patches_arr = [];
		// It's important that Japanese is first.
		var result = [japaneseLanguage];
		for (var i = 0, internal_forloop_count = languagesPatches.count; i < internal_forloop_count; i += 1) {
			if (languagePatchExists(languagesPatches[i])) {
				patches_arr.add([language_patch_prefix + languagesPatches[i]]);
				result.add(languagesPatches[i]);
			}
		}
		unload_patches(patches_arr);
		invalidate patches_arr;
		delete patches_arr;
		return result;
	}

	var patches_arr = [];
	var	files = global.paths_base_dirlist[global.paths_base[0]]["."];
	var loadedLanguages = [japaneseLanguage];
	var languageRegex = new RegExp("patch_%s(.*)\\.xp3".sprintf(language_patch_prefix));
	var langugeFolderRegex = new RegExp("%s(.*)[\\/]".sprintf(language_patch_prefix));
	for (var i = 0, internal_forloop_count = files.count; i < internal_forloop_count; i += 1) {
		var	fn	= files[i].toLowerCase();

		var language_regex_match = languageRegex.match(fn);

		if (language_regex_match.count !== 0)
		{
			var languageName = language_regex_match[1];
			patches_arr.add([language_patch_prefix + languageName]);

			if (!loadedLanguages.contains(languageName)) {
				loadedLanguages.add(languageName); // In case there is a folder and an xp3 file, don't add twice.
			}
		}
		else
		{
			var language_folder_regex_match = langugeFolderRegex.match(fn);
			if (devMode2 && language_folder_regex_match.count !== 0) {
				var languageName = language_folder_regex_match[1];

				if (!loadedLanguages.contains(languageName)) {
					loadedLanguages.add(languageName); // In case there is a folder and an xp3 file, don't add twice.
				}
			}
		}

	}
	//dm("Loaded languages: " + loadedLanguages.join(", "));
	unload_patches(patches_arr);
	invalidate patches_arr;
	delete patches_arr;
	return loadedLanguages;
};

global.language_patch_prefix = devMode? "" : "lang_";
global.languageMenuItemFormat = "language%sMenuItem";

global.languages = [];

global.default_language = japaneseLanguage;
global.languageSettings = %[];

// For convenience
global.get_currentLanguageSettings = function(kag=global.kag) { { return languageSettings[kag.sflags.language]; } };
global.get_special_characters = function(kag=global.kag) { { return get_currentLanguageSettings(kag).special_characters !== void? get_currentLanguageSettings(kag).special_characters : %[]; } };
global.get_default_history_font = function(kag=global.kag)
{
	var cur_langset = get_currentLanguageSettings(kag);
	if (cur_langset.history_default === void)
	{
		global.set_default_history_settings(global.get_currentLanguageSettings(kag));
	}
	return cur_langset.history_default;
};
global.get_default_history_bold = function(kag=global.kag)
{
	var cur_langset = get_currentLanguageSettings(kag);
	if (cur_langset.history_default_bold === void)
	{
		global.set_default_history_settings(global.get_currentLanguageSettings(kag));
	}
	return cur_langset.history_default_bold;
};
global.get_historyFontDefault = function(kag=global.kag) { { return [ get_default_history_font(kag), get_default_history_bold(kag) ]; } };
global.get_historyFont = function(kag=global.kag) { { return get_currentLanguageSettings(kag).history !== void? get_currentLanguageSettings(kag).history : %[]; } };
global.get_fsncleaner_rescript_enabled = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).fsncleaner_rescript_enabled); } };
global.get_replace_jp_tilde_disabled = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).replace_jp_tilde_disabled); } };
global.get_replace_jp_whitespace_disabled = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).replace_jp_whitespace_disabled); } };
global.get_rtl_enabled = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).rtl_enabled); } };
global.get_arabic_shaping_enabled = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).arabic_shaping_enabled); } };
global.get_half_height_offset_hack = function(kag=global.kag) { { return !!(get_currentLanguageSettings(kag).half_height_offset_hack); } };


global.get_default_font = function()
{
	var dic = %[];
	dic.missing = function(set, name, prop)
	{
		if (!set)
		{
			return false;
		}
		this[name] = *prop;
		return true;
	};
	global.Scripts.setCallMissing(dic);
	(global.MessageLayer_config incontextof dic)();
	return dic.userFace;
};

global.get_default_userfont_settings = function(kag=global.kag)
{
	var dic = %[];
	dic.missing = function(set, name, prop)
	{
		if (!set)
		{
			return false;
		}
		this[name] = *prop;
		return true;
	};
	global.Scripts.setCallMissing(dic);
@if(GAME_WOHN)
	dic.window = %[];
	dic.window.scWidth = kag.scWidth;
	dic.window.scHeight = kag.scHeight;
@endif
	(global.MessageLayer_config incontextof dic)();

	return %[
		fontface: dic.userFace,
		bold: dic.defaultBold,
		rubybold: false
	];
};

global.get_default_history_settings = function()
{
	var dic = %[];
	dic.missing = function(set, name, prop)
	{
		if (!set)
		{
			return false;
		}
		this[name] = *prop;
		return true;
	};
	global.Scripts.setCallMissing(dic);
	(global.HistoryLayer_config incontextof dic)();

	return dic;
};

global.getFontFiles = function(language)
{
	var fontFiles = languageSettings[language].fontFiles;
	return (fontFiles !== void? fontFiles : []);
};

global.getPrerenderedFontFiles = function(language)
{
	var fontFiles = languageSettings[language].prerenderedFontFiles;
	return (fontFiles !== void? fontFiles : []);
};


global.isChinese = function(kag=global.kag)
{
	//Catch simplified and traditional.
	return kag.sflags.language.toLowerCase().indexOf("chinese") !== -1;
};

global.isJapanese = function(kag=global.kag)
{
	return japaneseLanguage == kag.sflags.language.toLowerCase();
};

global.isNoSpaceLanguage = function(kag=global.kag)
{
	return isJapanese(kag) || isChinese(kag);
};

global.initializeLanguage = function(kag=global.kag)
{
	if (kag.sflags.language === void || global.languages.find(kag.sflags.language) === -1) {
		// language already loaded
		kag.sflags.language = default_language;
		kag.sflags.userFont = %[];
	}

	// Load/Reload language after kag is defined:
	unload_language_patch(default_language, kag);
	load_language_patch(kag.sflags.language, kag);
	if (typeof(kag) === "Object")
	{
		(addLanguageMenu incontextof kag)();
		kag[languageMenuItemFormat.sprintf(kag.sflags.language)].checked	= true;
	}
};

global.addLanguageMenu = function()
{
	menu.insert(this.languageMenu = new KAGMenuItem(this, __t("言語(&Language)"), 0, void, false), patchMenuIndex);
	for (var i = 0, internal_forloop_count = languages.count; i < internal_forloop_count; i += 1) {
		var language = languages[i];
		var languageMenuItemName = languageMenuItemFormat.sprintf(language);
		this.languageMenu.add(this[languageMenuItemName] = new KAGMenuItem(this, languageSettings[language].menu_name, 1,
		function (sender) { sender.owner.onLanguageMenuItemClick(sender, sender.language); }, false));
		this[languageMenuItemName].language = language;
	}
};

global.loadLanguageDict = function(language)
{
	if (languageSettings[language] === void) {
		var language_dic_path = find_file_in_language_paths("language.dic", language);
		if (typeof(language_dic_path) === "String")
		{
			try
			{
				languageSettings[language] = Scripts.evalStorage(language_dic_path);
			}
			catch (e)
			{
				Debug.message("The syntax error is located in language.dic for " + language);
				throw e;
			}
		}
		else
		{
			languageSettings[language] = %[];
		}

		var currentLanguageSettings = languageSettings[language];

		currentLanguageSettings.menu_name = __s("日本語 - &Japanese", "language_menu_name");

		if (typeof(currentLanguageSettings.files) === "Object")
		{
			languageFileCache[language] = %[];
			(Dictionary.assignStruct incontextof languageFileCache[language])(currentLanguageSettings.files);
		}
	}
};

if (typeof(global.get_full_path_of_image) === "Object" && typeof(global.chop_image_extension) === "Object" && typeof(global.image_extensions) === "Object")
{
	global.get_full_path_of_image_patch_language_original = global.get_full_path_of_image;
	global.get_full_path_of_image = function(storage)
	{
		var result = void;
		if (storage.indexOf(":") === -1)
		{
			result = global.find_file_in_language_paths(global.chop_image_extension(storage), , global.image_extensions);
		}
		if (typeof(result) === "String")
		{
			return result;
		}
		return global.get_full_path_of_image_patch_language_original(...);
	};
}

global.initialize_language_early = function()
{
	global.languages = loadLanguagesList();

	// Initialize the Japanese language first.
	load_language_patch(default_language, void);

	loadLanguageSettings();

	// If we only have a single language patch, we most probably want the game to run in that language (regardless of locale).
	if (languages.count == 2)
	{
		default_language = languages[1];
	}

	// If the language has changed, reload into the new language.
	if (default_language !== japaneseLanguage)
	{
		unload_language_patch(japaneseLanguage, void);
		load_language_patch(default_language, void);
	}
};

global.Layer_patch_language_original = Layer;
class Layer_patch_language_override extends Layer_patch_language_original
{
	property hint
	{
		setter(v)
		{
			if (typeof(v) === "String")
			{
				super.hint = __(v);
			}
			else
			{
				super.hint = v;
			}
		}
		getter { return super.hint; }
	}

	function Layer_patch_language_override()
	{
		super.Layer(...);
	}

	function Layer()
	{
		Layer_patch_language_override(...);
	}
}
global.Layer = Layer_patch_language_override;

global.Window_patch_language_original = Window;
class Window_patch_language_override extends Window_patch_language_original
{
	function Window_patch_language_override()
	{
		super.Window(...);
	}

	function Window()
	{
		Window_patch_language_override(...);
	}

	function onLanguageMenuItemClick(sender, language)
	{
		if (this.sflags.language == language)
		{
			return;
		}
		saveFontWithLanguage(this);
		unload_language_patch(this.sflags.language, this);
		load_language_patch(language, this);
		this.sflags.language = language;
@if(!GAME_WOHN)
		setFontWithLanguage(this.sflags.language, this);
@endif
		sender.checked = true;
		extraConductor.clear(); // Fix code for AutoPath
@if(GAME_WOHN)
		// Reload the font configuration.
		global.reload_messagelayer_config(this);
		setFontWithLanguage(this.sflags.language, this);
@endif
		onReloadScenarioMenuItemClick(sender);
		if(typeof(global.flow_tracker_object) === "Object" && typeof(flow_tracker_object.flowchart) === "Object" && flow_tracker_object.flowchart.filename !== void)
		{
			flow_tracker_object.isPlayOK();
			currentPageName = f.scripttitle;
		}
	}

	function replace_font_for_special_characters(elm)
	{
		var originalFontFace = current.lineLayer.font.face;
		var special = get_special_characters(this)[originalFontFace];
		if (special !== void && special[0].contains(elm.text))
		{
			var specialCharactersFontFace = special[1];
			tagHandlers.font(%["face" => specialCharactersFontFace]);
			var restoreFontFaceTag = %[tagname:"font", face:"user"];
			conductor.pendings.insert(0, restoreFontFaceTag);
		}
	}

	var replace_character_regex1 = /~/g;
	var replace_character_regex2 = /　/g;
	function replace_characters_regex(text)
	{
		if (
			!global.get_replace_jp_tilde_disabled((typeof(global.kag) === "Object") ? global.kag : this)
			)
		{
			text = text.replace(this.replace_character_regex1, "〜");
		}
		if (
			!global.get_replace_jp_whitespace_disabled((typeof(global.kag) === "Object") ? global.kag : this)
			&& this.sflags.language == englishLanguage
			&& !startsWith("花札", conductor.curStorage) // Not hanafuda
			)
		{
			text = text.replace(this.replace_character_regex2, __s(" ", "replace_ideographic_space"));
		}
		return text;
	}

	function replaceCharacters(obj)
	{
		obj.text = this.replace_characters_regex(obj.text);
	}

	function onConductorPreprocessCh(text, conductor, elm)
	{
		if (typeof(conductor.pendings_prelayout) !== "Object")
		{
			if (global.get_arabic_shaping_enabled((typeof(global.kag) === "Object") ? global.kag : this))
			{
				text = global.shape_arabic(text, true);
			}
		}
		text = this.replace_characters_regex(text);
		//if (typeof(conductor.pendings_prelayout) !== "Object")
		{
			if (typeof(this.processWordWrappingChunkAtOnce) === "Object")
			{
				text = this.processWordWrappingChunkAtOnce(text, conductor, elm);
			}
		}
		return text;
	}
}
global.Window = Window_patch_language_override;

global.System_patch_language_original = System;
class System_patch_language_override extends System_patch_language_original
{
	function System_patch_language_override()
	{
		super.System(...);
	}

	function System()
	{
		System_patch_language_override(...);
	}

	property title
	{
		setter(v)
		{
			global.System.original_title = v;
			if (typeof(v) === "String")
			{
				super.title = __(v);
			}
			else
			{
				super.title = v;
			}
		}
		getter
		{
			if (typeof(global.System.original_title) === "String")
			{
				return global.System.original_title;
			}
			return super.title;
		}
	}

	function update_title()
	{
		if (typeof(global.System.original_title) === "String")
		{
			super.title = __(global.System.original_title);
		}
	}

	function inform(text)
	{
		if (text === System.title + "はすでに起動しています")
		{
			text = __("%sはすでに起動しています").sprintf(System.title);
		}
		return super.inform(text);
	}
}
global.System = System_patch_language_override;

global.pluralNames = %[
 "氷室と蒔寺" => 2,
 "桜と藤ねえ" => 2,
 "桜とライダー" => 2,
 "凛と桜とイリヤ" => 3,
 "士郎とハサン" => 2,
 "セイバーと桜" => 2,
 "セイバーと凛とイリヤ" => 3,
 "士郎と桜" => 2,
 "士郎と凛とイリヤ" => 3,
 "凛とイリヤ" => 2,
 "セイバーと凛とキャスター" => 3,
 "士郎と凛" => 2,
 "セイバーとイリヤ" => 2,
 "士郎とセイバーと慎二" => 3,
 "士郎とセイバーと凛" => 3,
 "士郎とイリヤ" => 2,
 "凛と桜" => 2,
 "道場イリヤと道場凛" => 2,
 "士郎とセイバー" => 2,
 "士郎とアーチャー" => 2,
 "凛とセイバー" => 2,
 "氷室と蒔寺と由紀香" => 3,
 "セイバーと凛" => 2,
 "セイバーとランサー" => 2,
 "クラスメートたち" => 30, // dummy value - used to invoke plural form (in this case, average class size).
 "棺の贄" => 100,     // dummy value - used to invoke plural form.
 "others" => 100,    // dummy value - used to invoke plural form.
];

{
	global.initialize_language_early();
}
