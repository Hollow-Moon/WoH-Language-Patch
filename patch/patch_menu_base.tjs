global.opPatchName = "op";

global.mobileBreakGlyphsFlagName = "mobileBreakGlyphs";
global.mobileBreakGlyphsPatchName = global.devMode? "ImagesPatch" : global.mainPatchName;
global.mobileBreakGlyphsFolderName = "break-mobile";

global.mobileWindowFlagName = "mobileWindow";
global.mobileWindowPatchName = global.devMode? "ImagesPatch" : global.mainPatchName;
global.mobileWindowFolderName = "window-mobile";

global.wideWindowFlagName = "wideWindow";
global.wideWindowPatchName = global.devMode? "ImagesPatch" : global.mainPatchName;
global.wideWindowFolderName = "window-wide";

global.wideMobileWindowPatchName = global.devMode? "ImagesPatch" : global.mainPatchName;
global.wideMobileWindowFolderName = "window-wide-mobile";

global.get_opPatchExists = function() { { return global.patchExists(global.opPatchName); } };
global.get_movieMenuPatch = function(kag=global.kag) { { return global.get_opPatchExists() && typeof(kag) === "Object" && typeof(kag.sflags) === "Object" && typeof(kag.sflags.movieMenuPatch) === "Integer" && kag.sflags.movieMenuPatch; } };
global.get_playVitaOp = function(kag=global.kag) { { return global.get_opPatchExists() && typeof(kag) === "Object" && typeof(kag.sflags) === "Object" && typeof(kag.sflags.playVitaOp) === "Integer" && kag.sflags.playVitaOp; } };

global.patchMenuIndex = -1;
global.getPatchMenuIndex = function(kag)
{
@if(kirikiriz)
	global.patchMenuIndex = kag.helpMenu.index;
@endif
@if(!kirikiriz)
	global.patchMenuIndex = 4; // No "index" member so we hardcode the number.
@endif
	return global.patchMenuIndex;
};

class GameFlag
{
	var owner;
	var holder;
	var name;
	var reverse;
	var defaultValue;

	property value
	{
		getter
		{
			return (typeof(this.reverse) === "Integer" && this.reverse) ? !this.holder[this.name] : this.holder[this.name];
		}
		setter (v)
		{
			this.holder[this.name] = (typeof(this.reverse) === "Integer" && this.reverse) ? !v : v;
		}
	}

	function GameFlag(owner, holder, name, defaultValue=void, reverse=false)
	{
		this.owner = owner;
		this.holder = holder;
		this.name = name;
		this.reverse = reverse;
		this.defaultValue = defaultValue;

		if (this.defaultValue !== void && typeof(this.holder) === "Object" && typeof(this.holder[name]) === "undefined")
		{
			this.value = this.defaultValue;
		}
	}

	function toggleValue()
	{
		this.value = !this.value;
	}
}

class ComplexGameFlag extends global.GameFlag
{
	function ComplexGameFlag()
	{
		super.GameFlag(...);
	}

	property value
	{
		getter
		{
			// TODO code duplication between getter and setter.
			var path = this.name.split(".");
			var currentHolder = this.holder;
			for (var i = 0, internal_forloop_count = path.count - 1; i < internal_forloop_count; i += 1) {
				currentHolder = currentHolder[path[i]];
			}
			var lastPath = path[path.count-1];

			return (typeof(this.reverse) === "Integer" && this.reverse) ? !currentHolder[lastPath] : currentHolder[lastPath];
		}
		setter (v)
		{
			var path = this.name.split(".");
			var currentHolder = this.holder;
			for (var i = 0, internal_forloop_count = path.count - 1; i < internal_forloop_count; i += 1)
			{
				currentHolder = currentHolder[path[i]];
			}
			var lastPath = path[path.count-1];

			currentHolder[lastPath] = (typeof(this.reverse) === "Integer" && this.reverse) ? !v : v;
		}
	}
}

// For some reason this can't be an instance method...
global.inverseFlag = function(flag)
{
	return new global.GameFlag(flag.owner, flag.holder, flag.name, !flag.defaultValue, !flag.reverse);
};

class CompositeAndFlag
{
	var flags;

	function CompositeAndFlag(flags)
	{
		this.flags = flags;
	}

	property value {
		getter
		{
			for (var i = 0, internal_forloop_count = this.flags.count; i < internal_forloop_count; i += 1) {
				if (!this.flags[i].value) {
					return false;
				}
			}
			return true;
		}
		setter(v)
		{
			for (var i = 0, internal_forloop_count = this.flags.count; i < internal_forloop_count; i += 1) {
				this.flags[i].value = v;
			}
		}
	}

	function toggleValue()
	{
		for (var i = 0, internal_forloop_count = this.flags.count; i < internal_forloop_count; i += 1) {
			this.flags[i].toggleValue();
		}
	}
}

class KAGFlagMenuItem extends global.KAGMenuItem
{
	var flag;
	var radioValue;
	var previousFlagValue;
	var restart;

	function KAGFlagMenuItem(window, name, group=0, flag, radioValue=true, restart=false)
	{
		super.KAGMenuItem(window, name, group, this.onFlagMenuItemClick, false);

		this.flag = flag;
		this.radioValue = radioValue;
		this.restart = restart;
		this.initialize();
	}

	function onFlagMenuItemClick(sender)
	{
		this.previousFlagValue = sender.flag.value;

		var allowed = sender.beforeCallback(sender);
		if (!allowed) return;

		var flagValueChanged = true;
		if (sender.radio) {
			if (sender.flag.value === this.radioValue) {
				flagValueChanged = false;
			}
			sender.flag.value = this.radioValue;
		} else {
			sender.flag.toggleValue();
		}

		sender.checked = sender.flag.value === this.radioValue;

		sender.afterCallback(sender);

		if (this.restart && flagValueChanged && this.restartCondition()) {
			{
				var w = this.owner;
				w.extraConductor.clear(); // Fix code for AutoPath
				w.onReloadScenarioMenuItemClick(sender);
			}
		}
	}

	function restartCondition()
	{
		return true;
	}

	function onlyTitleRestartCondition()
	{
		if (typeof this.owner.conductor !== "Object") {
			return false;
		}
		return this.owner.conductor.curStorage === "タイトル.ks" || this.owner.conductor.curStorage === "title.ks";
	}

	function onlyScenarioRestartCondition()
	{
		return !this.onlyTitleRestartCondition();
	}

	function updateChecked()
	{
		this.checked = this.flag.value === this.radioValue;
	}

	function initialize()
	{
		this.updateChecked();
		this.afterCallback(this, true);
	}

	function disableIfPatchDoesntExist(patchName)
	{
		if (patchName !== void && !global.patchExists(patchName)) {
			if (this.flag.value) {
				this.onFlagMenuItemClick(this);
			}
			this.enabled = false;
		}
	}

	function beforeCallback(sender, firstTime=false) { return true; }
	function afterCallback(sender, firstTime=false) { }
}

class KAGFlagFolderMenuItem extends global.KAGFlagMenuItem
{
	var patchNames;
	var folderNames;
	var inverseFolderNames;
	var languageSpecific;

	property patchName
	{
		getter
		{
			if (this.patchNames.count > 1) {
				throw new global.Exception("Can't use patchName with more than one patch.");
			}
			return this.patchNames[0];
		}
	}

	function KAGFlagFolderMenuItem(window, name, group=0, flag, patchNames="", folderNames=void, inverseFolderNames=void, languageSpecific=true, restart=false)
	{
		if (typeof patchNames === "String") {
			patchNames = [patchNames];
		}
		this.patchNames = patchNames;
		if (folderNames === void && inverseFolderNames === void) {
			folderNames = "";
		}
		if (typeof folderNames === "String") {
			folderNames = [folderNames];
		}
		if (typeof inverseFolderNames === "String") {
			inverseFolderNames = [inverseFolderNames];
		}
		this.folderNames = folderNames;
		this.inverseFolderNames = inverseFolderNames;
		this.languageSpecific = languageSpecific;
		super.KAGFlagMenuItem(window, name, group, flag,, restart);
		for (var i = 0, internal_forloop_count = patchNames.count; i < internal_forloop_count; i += 1) {
			this.disableIfPatchDoesntExist(patchNames[i]);
		}
	}

	function defaultEvaluateFlag(sender)
	{
		return sender.flag.value;
	}

	function evaluateFlag(sender)
	{
		return this.defaultEvaluateFlag(sender);
	}

	function defaultAfterCallback(sender, firstTime=false)
	{
		// Radio options that are not of boolean type should implement their own logic.
		// if (sender.radio) return;

		if (this.evaluateFlag(sender)) {
			this.loadAllFolders(firstTime);
		} else {
			this.unloadAllFolders(firstTime); // Don't unload if wasn't ever loaded.
		}
	}

	function afterCallback(sender, firstTime=false)
	{
		this.defaultAfterCallback(sender, firstTime);
	}

	function loadFolders(folderNames)
	{
		var patches_arr = [];
		for (var i = 0, internal_forloop_count = this.patchNames.count; i < internal_forloop_count; i += 1) {
			if (this.patchNames[i] !== void) {
				//dm("loading: " + this.patchNames[i] + ">" + folderNames[i]);
				patches_arr.add([this.patchNames[i], folderNames[i]]);
@if(HD_MODE)
				global.addHdPaths(patches_arr, this.patchNames[i], folderNames[i]) if this.owner.isHd;
@endif
			}
			if (this.languageSpecific) {
				patches_arr.add([global.languagePatchName(global.japaneseLanguage), folderNames[i]]);
				patches_arr.add([global.languagePatchName(this.owner.sflags.language), folderNames[i]]) if this.owner.sflags.language !== void && this.owner.sflags.language !== global.japaneseLanguage;
			}
		}
		global.load_patches(patches_arr);
		invalidate patches_arr;
		delete patches_arr;
	}

	function unloadFolders(folderNames)
	{
		var patches_arr = [];
		for (var i = 0, internal_forloop_count = this.patchNames.count; i < internal_forloop_count; i += 1) {
			if (this.languageSpecific) {
				patches_arr.add([global.languagePatchName(this.owner.sflags.language), folderNames[i]]) if this.owner.sflags.language !== void && this.owner.sflags.language !== global.japaneseLanguage;
				patches_arr.add([global.languagePatchName(global.japaneseLanguage), folderNames[i]]);
			}
			if (this.patchNames[i] !== void) {
				//dm("unloading: " + this.patchNames[i] + ">" + folderNames[i]);
@if(HD_MODE)
				global.addHdPaths(patches_arr, this.patchNames[i], folderNames[i]) if this.owner.isHd;
@endif
				patches_arr.add([this.patchNames[i], folderNames[i]]);
			}
		}
		global.unload_patches(patches_arr);
		invalidate patches_arr;
		delete patches_arr;
	}

	function loadAllFolders(firstTime=false)
	{
		this.unloadFolders(this.inverseFolderNames) if this.inverseFolderNames !== void && !firstTime;
		this.loadFolders(this.folderNames) if this.folderNames !== void;
	}

	function unloadAllFolders(firstTime=false)
	{
		this.unloadFolders(this.folderNames) if this.folderNames !== void && !firstTime;
		this.loadFolders(this.inverseFolderNames) if this.inverseFolderNames !== void;
	}
}

class KAGCensorMenuItem extends global.KAGMenuItem
{
	var hCensoredMenuItem;
	var hUncensoredMenuItem;
	var hDecensoredMenuItem;

	var matureMenuItem;

	var currentState;

	var previouslyFullyCensored;


	function KAGCensorMenuItem(window, name, hFlag)
	{
		super.KAGMenuItem(window, name, 0, void, false);
		this.addChildren(hFlag);
	}

	function addChildren(hFlag)
	{
		var matureFlag = new global.GameFlag(this.owner, this.owner.sflags, global.matureFlagName, true);
		var matureCensorFlag = global.inverseFlag(matureFlag);
		var decensorFlag = new global.GameFlag(this.owner, this.owner.sflags, global.decensoredFlagName, false);

		var hCensorFlagComposite = new global.CompositeAndFlag([global.inverseFlag(hFlag), global.inverseFlag(decensorFlag)]);
		var hFlagComposite = new global.CompositeAndFlag([hFlag, global.inverseFlag(decensorFlag)]);
		var decensorFlagComposite = new global.CompositeAndFlag([hFlag, decensorFlag]);

		this.add(this.hCensoredMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("&Hコンテンツを検閲する"), 1, hCensorFlagComposite, global.hCensorPatchName, global.censoredHFolderName));
		this.hCensoredMenuItem.beforeCallback = this.beforeCallback;
		this.hCensoredMenuItem.afterCallback = this.afterCallback;
		this.add(this.hUncensoredMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("Hコンテンツを検閲しない(&U)"), 1, hFlagComposite, global.hPatchName, global.uncensoredHFolderName));
		this.hUncensoredMenuItem.beforeCallback = this.beforeCallback;
		this.hUncensoredMenuItem.afterCallback = this.afterCallback;
		this.add(this.hDecensoredMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("Hコンテンツを強制的に無検閲する(&D)"), 1, decensorFlagComposite,
@if(GAME_FATE)
		[global.hPatchName, global.decensoredPatchName], [global.uncensoredHFolderName, global.decensoredFolderName]));
@endif
@if(GAME_FHAT)
		global.decensoredPatchName, global.decensoredFolderName));
@endif
@if(!GAME_FATE&&!GAME_FHAT)
		[], []));
@endif
		this.hDecensoredMenuItem.beforeCallback = this.beforeCallback;
		this.hDecensoredMenuItem.afterCallback = this.afterCallback;

		(this.addSeperationLine incontextof this.owner)(this);

		this.add(this.matureMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("成人向けコンテンツを検閲する(&M)"),, matureCensorFlag, global.maturePatchName, global.censoredMatureFolderName, global.uncensoredMatureFolderName));
		this.matureMenuItem.beforeCallback = this.beforeCallback;
		this.matureMenuItem.afterCallback = this.afterCallback;

		this.updateCurrentState();
	}

	function addSeperationLine(menu)
	{
		menu.add(new global.MenuItem(this, "-"));
	}

	function updateCurrentState()
	{
		var items = [this.hCensoredMenuItem, this.hUncensoredMenuItem, this.hDecensoredMenuItem];
		for (var i = 0, internal_forloop_count = items.count; i < internal_forloop_count; i += 1) {
			if (items[i].checked) {
				this.currentState = items[i];
				break;
			}
		}
		this.loadCurrentState();
	}

	function beforeCallback(sender)
	{
		if (sender == this.hCensoredMenuItem && global.isHScene()) {
			global.System.inform("Cannot turn off H-scenes during an H-scene. Try changing the settings again after the scene, or from the main menu.");
			return false;
		}

		this.previouslyFullyCensored = global.get_fullyCensored(this.owner);
		return true;
	}

	function afterCallback(sender)
	{
		if (this.previouslyFullyCensored && !global.get_fullyCensored(this.owner)) {
			this.unloadFullyCensored(this.currentState);
		}

		if (sender === this.matureMenuItem) {
			(global.KAGFlagFolderMenuItem.afterCallback incontextof sender)(sender);
		} else {
			this.currentState.unloadAllFolders();
			this.currentState = sender;
			this.loadCurrentState();
		}
	}

	function loadCurrentState()
	{
		this.currentState.loadAllFolders();

		if (!this.previouslyFullyCensored && global.get_fullyCensored(this.owner)) {
			this.loadFullyCensored(this.currentState);
		}

		global.updateDecensorConfig(this.owner);
	}

	function loadFullyCensored(sender)
	{
		var patches_arr = [
			[sender.patchName, global.fullyCensoredFolderName],
			[global.languagePatchName(global.japaneseLanguage), global.fullyCensoredFolderName],
			(this.owner.sflags.language !== void && this.owner.sflags.language !== global.japaneseLanguage) ? [global.languagePatchName(this.owner.sflags.language), global.fullyCensoredFolderName] : void,
		];
		global.load_patches(patches_arr);
	}

	function unloadFullyCensored(sender)
	{
		var patches_arr = [
			(this.owner.sflags.language !== void && this.owner.sflags.language !== global.japaneseLanguage) ? [global.languagePatchName(this.owner.sflags.language), global.fullyCensoredFolderName] : void,
			[global.languagePatchName(global.japaneseLanguage), global.fullyCensoredFolderName],
			[sender.patchName, global.fullyCensoredFolderName],
		];
		global.unload_patches(patches_arr);
	}
}

class KAGMessageWindowMenuItem extends global.KAGMenuItem
{
	var wideMessageWindowMenuItem;
	var mobileMessageWindowMenuItem;
	var mobileBreakGlyphsMenuItem;

	var mobileBreakGlyphsFlag;
	var mobileWindowFlag;
	var wideWindowFlag;

	function KAGMessageWindowMenuItem(window, name)
	{
		super.KAGMenuItem(window, name, 0, void, false);
		this.addChildren();
	}

	function addChildren()
	{
		this.mobileBreakGlyphsFlag = new global.GameFlag(this.owner, this.owner.sflags, global.mobileBreakGlyphsFlagName, false);
		this.add(this.mobileBreakGlyphsMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("携帯用テキスト画面(&B)"),, this.mobileBreakGlyphsFlag, global.mobileBreakGlyphsPatchName, global.mobileBreakGlyphsFolderName,,,true));
		this.mobileBreakGlyphsMenuItem.restartCondition = this.mobileBreakGlyphsMenuItem.onlyScenarioRestartCondition;

		this.mobileWindowFlag = new global.GameFlag(this.owner, this.owner.sflags, global.mobileWindowFlagName, false);
		this.add(this.mobileMessageWindowMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("携帯端末用カーソル(&M)"),, this.mobileWindowFlag, global.mobileWindowPatchName, global.mobileWindowFolderName,,,true));
		this.mobileMessageWindowMenuItem.restartCondition = this.mobileMessageWindowMenuItem.onlyScenarioRestartCondition;
		this.mobileMessageWindowMenuItem.afterCallback = this.afterCallback;

		this.wideWindowFlag = new global.GameFlag(this.owner, this.owner.sflags, global.wideWindowFlagName, true);
		this.add(this.wideMessageWindowMenuItem = new global.KAGFlagFolderMenuItem(this.owner, __t("ワイドモードで4:3のメッセージウィンドウ(&W)"),, global.inverseFlag(this.wideWindowFlag), global.wideWindowPatchName,, global.wideWindowFolderName,,true));
		this.wideMessageWindowMenuItem.restartCondition = this.wideMessageWindowMenuItem.onlyScenarioRestartCondition;
		this.wideMessageWindowMenuItem.afterCallback = this.afterCallback;
		this.wideMessageWindowMenuItem.evaluateFlag = function(sender) { return sender.defaultEvaluateFlag(sender) || !this.owner.wideScreen; };
		this.wideMessageWindowMenuItem.initialize(); // need to reinitialize since overriding evaluateFlag

		this.updateMobileWide();
	}

	function updateMobileWide() {
		var patches_arr = [[global.wideMobileWindowPatchName, global.wideMobileWindowFolderName]];
@if(HD_MODE)
		global.addHdPaths(patches_arr, global.wideMobileWindowPatchName, global.wideMobileWindowFolderName) if this.owner.isHd;
@endif
		if (this.wideWindowFlag.value && this.mobileWindowFlag.value && this.owner.wideScreen) {
			global.load_patches(patches_arr);
		} else {
			global.unload_patches(patches_arr);
		}
	}

	function afterCallback()
	{
		this.mobileMessageWindowMenuItem.defaultAfterCallback(this.mobileMessageWindowMenuItem);
		this.wideMessageWindowMenuItem.defaultAfterCallback(this.wideMessageWindowMenuItem);
		this.updateMobileWide();
	}
}

class LoadScenarioMenuItem extends global.KAGMenuItem
{
	var scenarioFileName;
	var labelName;

	function LoadScenarioMenuItem(window, name, scenarioFileName, labelName=void)
	{
		super.KAGMenuItem(window, name, 0, this.onLoadScenarioMenuItemClick, false);
		this.scenarioFileName = scenarioFileName;
		this.labelName = labelName === void? labelName : "*" + labelName;
	}

	function onLoadScenarioMenuItemClick(sender)
	{
		if (typeof(global.titlemenu_object) === "Object") {
			global.titlemenu_object.menulayer.goLabel(this.scenarioFileName, this.labelName);
		} else {
			this.owner.processCall(this.scenarioFileName, this.labelName);
		}
	}
}

global.addEnableDisableRestartMenuFunctions = function()
{
	this.restart_menu_state = true;
	this.restart_menu_state_stack = [];
	this.pushRestartMenuState = function()
	{
		this.restart_menu_state_stack.add(this.restart_menu_state);
	};

	this.popRestartMenuState = function()
	{
		if (this.restart_menu_state_stack.count > 0)
		{
			this.setRestartMenuState(this.restart_menu_state_stack[this.restart_menu_state_stack.count - 1]);
			this.restart_menu_state_stack.erase(this.restart_menu_state_stack.count - 1);
		}
	};

	this.setRestartMenuState = function(state)
	{
		this.restart_menu_state = state;
@if(HD_MODE)
		this.qualityMenu.enabled = state;
		this.wideMenu.enabled = state;
@endif
		if (typeof(this.titleThemeMenuItem) === "Object")
		{
			this.titleThemeMenuItem.enabled = state;
		}
		if (typeof(this.routeMenuItem) === "Object")
		{
			this.routeMenuItem.enabled = state;
		}
		if (typeof(this.languageMenu) === "Object")
		{
			this.languageMenu.enabled = state;
			// The following will cause a rebuild of the menu
			this.languageMenu.group = this.languageMenu.group;
		}
	};

	this.enableRestartMenus = function()
	{
		this.setRestartMenuState(true);
	};

	this.disableRestartMenus = function()
	{
		this.setRestartMenuState(false);
	};

	this.disableRestartMenus();
};

global.addPatchMenu = function()
{
	this.menu.insert(this.patchMenu = new global.KAGMenuItem(this, __t("パッチ(&P)"), 0, void, false), global.getPatchMenuIndex(this));
	(global.addCensorMenu incontextof this)(this.patchMenu, __t("検閲(&C)"));
	(global.addVoiceMenu incontextof this)(this.patchMenu);
	(global.addVitaMenu incontextof this)(this.patchMenu);
	(global.addGalleryMenu incontextof this)(this.patchMenu);
	(global.addMovieMenu incontextof this)(this.patchMenu);

	(global.addDevelopmentMenu incontextof this)();
	(global.addConductorVerbosityMenu incontextof this)();
@if(ZOOM_WINDOW)
	(global.addWindowSizeMenu incontextof this)(this.displayMenu);
	if (this.isPseudoMode())
	{
		(global.addFullScreenMenu incontextof this)(this.displayMenu);
	}
@endif
@if(HD_MODE)
	(global.addHdMenu incontextof this)(this.displayMenu);
@endif
	(global.addGraphicUsageMenu incontextof this)(this.displayMenu);
@if(HD_MODE)
	(global.addMessageWindowMenu incontextof this)(this.patchMenu);
@endif

	(global.addOptionsMenu incontextof this)(this.patchMenu);
	(global.addPatchMenuItems incontextof this)(this.patchMenu);

	(global.addEnableDisableRestartMenuFunctions incontextof this)();
};

global.addDevelopmentMenu = function()
{
	this.menu.add(this.devMenuItem = new global.KAGMenuItem(this, "&Development", 0, void, false));
	this.devMenuItem.visible = global.devMode || global.devMode2;
	(global.addDevelopmentMenuItems incontextof this)(this.devMenuItem);
	this.devMenuItem.add(this.throwExceptionItem = new global.KAGMenuItem(this, "Throw Exception", 1, function(sender) { throw new global.Exception("This is a test Exception."); }, false));
	this.devMenuItem.add(this.throwConductorExceptionItem = new global.KAGMenuItem(this, "Throw ConductorException", 1, function(sender) { throw new global.ConductorException("This is a test ConductorException."); }, false));
	this.devMenuItem.add(this.accessNullPointerItem = new global.KAGMenuItem(this, "Access null pointer", 1, function(sender) { global.System.nullpo(); }, false));
	global.git_base_path = global.Storages.getFullPath(".");
	if (global.git_base_path.indexOf(">") === -1)
	{
		global.git_base_path = global.Storages.getLocalName(global.git_base_path);
	}
	else
	{
		global.git_base_path = global.System.exePath + "/content-data/";
		global.git_base_path = global.Storages.getLocalName(global.git_base_path);
	}
	this.devMenuItem.add(this.openCommandPromptInProjectDirectory = new global.KAGMenuItem(this, "Open command prompt in project directory", 1, function(sender) { global.System.shellExecute("cmd.exe", "/k cd " + ('"%s"').sprintf(global.git_base_path)); }, false));
	this.devMenuItem.add(this.gitCheckoutDashDashCurrentDirectory = new global.KAGMenuItem(this, "git checkout -- .", 1, function(sender) { global.build_exec_command_line("git.exe", ["-C", global.git_base_path, "checkout", "--", "."], false, false); }, false));
	this.devMenuItem.add(this.gitPullOriginMaster = new global.KAGMenuItem(this, "git pull origin master", 1, function(sender) { global.build_exec_command_line("git.exe", ["-C", global.git_base_path, "pull", "origin", "master"], false, false); }, false));
};

global.addConductorVerbosityMenu = function()
{
	this.debugMenu.add(this.debugLevelNoneMenuItem = new global.KAGMenuItem(this, __t("デバッグレベル:なし"), 2,
		this.onDebugLevelNoneMenuItemClick, false));
	this.debugLevelNoneMenuItem.checked = this.debugLevel === global.tkdlNone;

	this.debugMenu.add(this.debugLevelSimpleMenuItem = new global.KAGMenuItem(this, __t("デバッグレベル:シンプル"), 2,
		this.onDebugLevelSimpleMenuItemClick, false));
	this.debugLevelSimpleMenuItem.checked = this.debugLevel === global.tkdlSimple;

	this.debugMenu.add(this.debugLevelVerboseMenuItem = new global.KAGMenuItem(this, __t("デバッグレベル:詳細"), 2,
		this.onDebugLevelVerboseMenuItemClick, false));
	this.debugLevelVerboseMenuItem.checked = this.debugLevel === global.tkdlVerbose;

	this.debugMenu.add(new global.MenuItem(this, "-"));
};

global.addVoiceMenu = function(patchMenu)
{
	var unmatchedVoiceFlag = new global.GameFlag(this, this.sflags, "playUnmatchedVoices", true);
	var playUnusedVoicesFlag = new global.GameFlag(this, this.sflags, "unusedVoices", true);
	var customWaitvoiceFlag = new global.GameFlag(this, this.sflags, "customWaitvoice", true);
	var fadeBgmWithVoiceFlag = new global.GameFlag(this, this.scflags, "fadeBgmWithVoice", false);
	var customVoiceReplayFlag = new global.GameFlag(this, this.sflags, "customVoiceReplay", false);
	var disableStopVoiceWithClickFlag = new global.GameFlag(this, this.scflags, "disableStopVoiceWithClick", false);

	patchMenu.add(this.voiceMenuItem = new global.KAGMenuItem(this, __t("ボイス(&V)"), 0, void, false));
	this.voiceMenuItem.add(this.playUnmatchedVoicesMenuItem = new global.KAGFlagMenuItem(this, __t("不一緻なボイスを再生する(&M)"),, unmatchedVoiceFlag));
	this.voiceMenuItem.add(this.playUnusedVoicesMenuItem = new global.KAGFlagMenuItem(this, __t("未使用ボイスを再生する(&U)"),, playUnusedVoicesFlag));
	this.voiceMenuItem.add(this.customWaitvoiceMenuItem = new global.KAGFlagMenuItem(this, __t("あつらえのWait-Voiceタグを使用する(&W)"),, customWaitvoiceFlag));
@if(FADE_BGM_WITH_VOICE==1)
	this.voiceMenuItem.add(this.fadeBgmWithVoiceMenuItem = new global.KAGFlagMenuItem(this, __t("ボイス再生中に&BGM音量を下げる"),, fadeBgmWithVoiceFlag));
@endif
	this.voiceMenuItem.add(this.customVoiceReplayIconsMenuItem = new global.KAGFlagMenuItem(this, __t("あつらえのボイス再生アイコンを使用する(&R)"),, customVoiceReplayFlag));
	this.voiceMenuItem.add(this.disableStopVoiceWithClickMenuItem = new global.KAGFlagMenuItem(this, __t("クリックすると現在のボイスが停止しません(&V)"),, disableStopVoiceWithClickFlag));

	(global.addVoiceMenuItems incontextof this)(this.voiceMenuItem);
};

global.addVitaMenu = function(patchMenu)
{
	var playVitaOpFlag = new global.GameFlag(this, this.sflags, "playVitaOp", global.get_opPatchExists(this));
	var vitaMovieMenuFlag = new global.GameFlag(this, this.sflags, "movieMenuPatch", global.get_opPatchExists(this));
	var vitaAboutFlag = new global.GameFlag(this, this.sflags, "aboutPatch", global.get_vitaPatchExists(this));

	patchMenu.add(this.vitaMenuItem = new global.KAGMenuItem(this, __t("&Vitaコンテンツ"), 0, void, false));
	this.vitaMenuItem.add(this.vitaOPMenuItem = new global.KAGFlagMenuItem(this, __t("Vitaの&OPをゲーム中に再生する"),, playVitaOpFlag));
	this.vitaOPMenuItem.disableIfPatchDoesntExist(global.opPatchName);
	this.vitaMenuItem.add(this.vitaMovieMenuItem = new global.KAGFlagFolderMenuItem(this, __t("Vitaのムービーメニュ(&M)"),, vitaMovieMenuFlag, global.opPatchName, "override",, false));
	this.vitaMovieMenuItem.disableIfPatchDoesntExist(global.opPatchName);
	this.vitaMenuItem.add(this.vitaAboutMenuItem = new global.KAGFlagMenuItem(this, __t("Vitaの「このスフとについて」ページ(&A)"),, vitaAboutFlag));

	(global.addVitaMenuItems incontextof this)(this.vitaMenuItem);
};

global.addMovieMenu = function(patchMenu)
{
	var subbedVideosFlag = new global.GameFlag(this, this.sflags, global.subbedVideosFlagName, true);
	var skipMoviesFlag = new global.GameFlag(this, this.sflags, "skipMovies", false);
	var forceMpvPlaybackFlag = new global.GameFlag(this, this.sflags, "forceMpvPlayback", false);

	patchMenu.add(this.movieMenuItem = new global.KAGMenuItem(this, __t("ムービー(&M)"), 0, void, false));
	this.movieMenuItem.add(this.subbedVideosMenuItem = new global.KAGFlagFolderMenuItem(this, __t("ムービー再生中に字幕を表示する(&S)"),, subbedVideosFlag,,global.videosFolderName));
	this.movieMenuItem.add(this.skipMoviesMenuItem = new global.KAGFlagMenuItem(this, __t("ゲーム中にムービーをスキップする(&K)"),,skipMoviesFlag));
	this.movieMenuItem.add(this.forceMpvPlaybackMenuItem = new global.KAGFlagMenuItem(this, __t("mpvを使用して強制的に動画を再生する"),,forceMpvPlaybackFlag));
	this.forceMpvPlaybackMenuItem.enabled = (typeof(global.playVideoMPV) === "Object");
};

global.addOptionsMenu = function(patchMenu)
{
	var historyTitleFlag = new global.GameFlag(this, this.sflags, "historyTitle", false);
	var showLogoFlag = new global.GameFlag(this, this.sflags, "showLogo", true);
	var savedataRepairFlag = new global.GameFlag(this, this.sflags, "savedataRepair", false);

	patchMenu.add(this.patchOptionsMenuItem = new global.KAGMenuItem(this, __t("設定(&O)"), 0, void, false));
	this.patchOptionsMenuItem.add(this.historyTitleMenuItem = new global.KAGFlagMenuItem(this, __t("メッセージ歴史でシーンのタイトルを表示する(&H)"),, historyTitleFlag));
	this.patchOptionsMenuItem.add(this.engineConfigurationItem = new global.KAGMenuItem(this, __t("エンジン構成ダイアログを開く"), 1, function() { global.showEngineConfigureDialog(); },false));
	this.patchOptionsMenuItem.add(this.openSavedataDirMenuItem = new global.KAGMenuItem(this, __t("保存データディレクトリを開く"), 1, function(sender) { global.open_savedata_dir(sender.owner); },false));
	this.patchOptionsMenuItem.add(this.saveTroubleshootingDataAndOpenFolderLocationMenuItem = new global.KAGMenuItem(this, __t("トラブルシューティングデータを保存する"), 1, function() { global.save_troubleshooting_data_and_open_folder_location(); },false));
	this.patchOptionsMenuItem.add(this.showLogoMenuItem = new global.KAGFlagMenuItem(this, __t("起動時にTYPE-MOONロゴを表示"),, showLogoFlag));
	this.patchOptionsMenuItem.add(this.savedataRepairMenuItem = new global.KAGFlagMenuItem(this, __t("修復保存データモードを有効にする"),, savedataRepairFlag));

	(global.addOptionsMenuItems incontextof this)(this.patchOptionsMenuItem);
};

global.addFullScreenMenu = function(displayMenu)
{
	displayMenu.add(new global.MenuItem(this, "-"));

	displayMenu.add(this.fullscreenMenu = new global.KAGMenuItem(this, __t("フルスクリーン時の拡大表示(&M)"), 0, void, false));

		this.fullscreenMenu.add(this.innerMagnifyMenuItem = new global.KAGMenuItem(this, __t("モニタ内にフィットさせる(&I)"), 1,
			this.onInnerMagnifyMenuItemClick, false));

		this.fullscreenMenu.add(this.outerMagnifyMenuItem = new global.KAGMenuItem(this, __t("モニタいっぱいに拡大する(&O)"), 1,
			this.onOuterMagnifyMenuItemClick, false));

		this.fullscreenMenu.add(this.noneMagnifyMenuItem = new global.KAGMenuItem(this, __t("拡大しない(&N)"), 1,
			this.onNoneMagnifyMenuItemClick, false));
};

global.addWindowSizeMenu = function(displayMenu)
{
	displayMenu.add(new global.MenuItem(this, "-"));

		displayMenu.add(this.windowSizeMenu = new global.KAGMenuItem(this, __t("ウィンドウ内部のサイズ指定(&S)"), 0, void, false));

@if(GAME_WOHN)
			this.windowSizeMenu.add(this.window640MenuItem = new global.KAGMenuItem(this, "640x360", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,640); }, false));

			this.windowSizeMenu.add(this.window800MenuItem = new global.KAGMenuItem(this, "800x450", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,800); }, false));



			this.windowSizeMenu.add(this.window1024MenuItem = new global.KAGMenuItem(this, "1024x576", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1024); }, false));
			this.window1024MenuItem.is_default_size = true;



			this.windowSizeMenu.add(this.window1280MenuItem = new global.KAGMenuItem(this, "1280x720", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1280); }, false));

			this.windowSizeMenu.add(this.window1440MenuItem = new global.KAGMenuItem(this, "1440x810", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1440); }, false));

			this.windowSizeMenu.add(this.window1600MenuItem = new global.KAGMenuItem(this, "1600x900", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1600); }, false));

			this.windowSizeMenu.add(this.window1920MenuItem = new global.KAGMenuItem(this, "1920x1080", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1920); }, false));
@endif
@if(GAME_FATE||GAME_FHAT)
@if(!HD_MODE)
			this.windowSizeMenu.add(this.window200MenuItem = new global.KAGMenuItem(this, "200x150", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,200); }, false));

			this.windowSizeMenu.add(this.window400MenuItem = new global.KAGMenuItem(this, "400x300", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,400); }, false));

			this.windowSizeMenu.add(this.window640MenuItem = new global.KAGMenuItem(this, "640x480", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,640); }, false));



			this.windowSizeMenu.add(this.window800MenuItem = new global.KAGMenuItem(this, "800x600", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,800); }, false));
			this.window800MenuItem.is_default_size = true;



			this.windowSizeMenu.add(this.window1024MenuItem = new global.KAGMenuItem(this, "1024x768", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1024); }, false));

			this.windowSizeMenu.add(this.window1280MenuItem = new global.KAGMenuItem(this, "1280x960", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1280); }, false));

			this.windowSizeMenu.add(this.window1440MenuItem = new global.KAGMenuItem(this, "1440x1080", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1440); }, false));
@endif
@if(HD_MODE)

			this.windowSizeMenu.add(this.window200MenuItem = new global.KAGMenuItem(this, "0.25x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,200); }, false));

			this.windowSizeMenu.add(this.window400MenuItem = new global.KAGMenuItem(this, "0.50x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,400); }, false));

			this.windowSizeMenu.add(this.window640MenuItem = new global.KAGMenuItem(this, "0.80x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,640); }, false));



			this.windowSizeMenu.add(this.window800MenuItem = new global.KAGMenuItem(this, "1.00x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,800); }, false));
			this.window800MenuItem.is_default_size = true;



			this.windowSizeMenu.add(this.window1024MenuItem = new global.KAGMenuItem(this, "1.28x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1024); }, false));

			this.windowSizeMenu.add(this.window1280MenuItem = new global.KAGMenuItem(this, "1.60x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1280); }, false));

			this.windowSizeMenu.add(this.window1440MenuItem = new global.KAGMenuItem(this, "1.80x", 1,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,1440); }, false));

@endif
@endif

			this.windowSizeMenu.add(new global.MenuItem(this, "-"));

			this.windowSizeMenu.add(this.windowResizeableMenuItem = new global.KAGMenuItem(this, __t("サイズを固定する"), 0,
				function(sender) { sender.owner.onWindowSizeMenuItemClick(,0); }, false));

			this.windowSizeMenu.add(this.limitWindowSizeMenuItem = new global.KAGMenuItem(this, __t("画面サイズに限る"), 0,
				function(sender) { sender.owner.onLimitWindowSizeMenuItemClick(); }, false));
};

global.addHdMenu = function(displayMenu)
{
	var wideResolutions = %[ __t("ワイド(16:9)(&W)") => global.standardWideRatio];

	displayMenu.add(new global.MenuItem(this, "-"));

	displayMenu.add(this.qualityMenu = new global.KAGMenuItem(this, __t("画質(&Q)"), 0, void, false));
	this.qualityMenu.enabled = false;

		this.qualityMenu.add(this.lqMenuItem = new global.KAGMenuItem(this, __t("低い(&L)"), 1,
			function(sender) { global.onQualityMenuItemClick(sender); }, false));
		this.lqMenuItem.checked = true if this.hdScaleFactor === 1;
		this.lqMenuItem.scaleFactor = 1;
		this.lqMenuItem.captionArg = this.lqMenuItem.scaleFactor;
		
		for (var i=0; i<global.scaleFactors.count; i++) {
			var hqMenuItemName = "hq%.1fMenuItem".sprintf(global.scaleFactors[i]).replace(/\./g, "_");
			this.qualityMenu.add(this[hqMenuItemName] = new global.KAGMenuItem(this, __t("高いx%.1f(&H)"), 1,
				function(sender) { global.onQualityMenuItemClick(sender); }, false));
			this[hqMenuItemName].scaleFactor = global.scaleFactors[i];
			this[hqMenuItemName].captionArg = this[hqMenuItemName].scaleFactor;
			this[hqMenuItemName].enabled = global.patchExists(global.hdPatchesNames[i]);
			this[hqMenuItemName].checked = true if this.hdScaleFactor === global.scaleFactors[i];
		}

	displayMenu.add(this.wideMenu = new global.KAGMenuItem(this, __t("アスペクト比(&A)"), 0, void, false));
	this.wideMenu.enabled = false;

		this.wideMenu.add(this.notWideMenuItem = new global.KAGMenuItem(this, __t("基準(4:3)(&S)"), 1,
			function(sender) { global.onWideMenuItemClick(sender,'standard'); }, false));
		this.notWideMenuItem.checked = true if !this.wideScreen;

		this.wideMenu.add(this.wideMenuItem = new global.KAGMenuItem(this, __t("デスクトップと同じ(&M)"), 1,
			function(sender) { global.onWideMenuItemClick(sender,'wide'); }, false));
		this.wideMenuItem.checked = true if this.wideScreen && this.isAutoWide;

		var keys = [];
		keys.assign(wideResolutions);
		for (var i = 0, internal_forloop_count = keys.count; i < internal_forloop_count; i += 2) {
			var key = keys[i];
			var ratio = wideResolutions[key];
			var wideMenuItemName = "wideRatio"+key.replace(/[:&\() ]/g, "")+"MenuItem";
			this.wideMenu.add(this[wideMenuItemName] = new global.KAGMenuItem(this, key, 1, function(sender) { global.onWideMenuItemClick(sender, sender.ratio); }));
			this[wideMenuItemName].ratio = ratio;
			if (global.floatEquals(this.wideRatio, ratio)) {
				this[wideMenuItemName].checked = true;
			}
		}
		invalidate keys;

@if(CROP_MODE)
		this.wideMenu.add(this.wideCroppedMenuItem = new global.KAGMenuItem(this, "Wide (&cropped)", 1,
			function(sender) { global.onWideMenuItemClick(sender,'standard',true); }, false));
@endif
};

global.addGraphicUsageMenu = function(displayMenu)
{
	var fpsLimitDefault = "60";
	var multiThreadDefault = 0;

	var fpsLimitFlag = new global.GameFlag(this, this.sflags, "contfreq", fpsLimitDefault);
	var multiThreadDrawFlag = new global.GameFlag(this, this.sflags, "drawthread", multiThreadDefault);

	var fpsLimitCallback = function(sender)
	{
		if (sender.flag.value === "-1")
		{
			{
				sender.owner.waitVSync = true;
			}
			global.System.setArgument("-contfreq", "0");
		}
		else
		{
			{
				sender.owner.waitVSync = false;
			}
			global.System.setArgument("-contfreq", sender.flag.value);
		}
	};

	displayMenu.add(new global.MenuItem(this, "-"));

	displayMenu.add(this.fpsLimitMenuItem = new global.KAGMenuItem(this, __t("最大フレームレート(&M)"), 0, void, false));
	this.fpsLimitMenuItem.add(this.fpsLimitVsyncMenuItem = new global.KAGFlagMenuItem(this, __t("垂直同期待ち(&V)"), 1, fpsLimitFlag, "-1"));
	this.fpsLimitMenuItem.add(this.fpsLimit00MenuItem = new global.KAGFlagMenuItem(this, __t("制限なし(&N)"), 1, fpsLimitFlag, "0"));
	this.fpsLimitMenuItem.add(this.fpsLimit60MenuItem = new global.KAGFlagMenuItem(this,   __t("&60フレーム/秒"),    1, fpsLimitFlag, "60"));
	this.fpsLimitMenuItem.add(this.fpsLimit30MenuItem = new global.KAGFlagMenuItem(this,   __t("&30フレーム/秒"),    1, fpsLimitFlag, "30"));
	this.fpsLimitMenuItem.add(this.fpsLimit15MenuItem = new global.KAGFlagMenuItem(this,   __t("&15フレーム/秒"),    1, fpsLimitFlag, "15"));
	this.fpsLimitVsyncMenuItem.afterCallback = fpsLimitCallback;
	this.fpsLimit00MenuItem.afterCallback = fpsLimitCallback;
	this.fpsLimit60MenuItem.afterCallback = fpsLimitCallback;
	this.fpsLimit30MenuItem.afterCallback = fpsLimitCallback;
	this.fpsLimit15MenuItem.afterCallback = fpsLimitCallback;
	fpsLimitCallback(this.fpsLimitVsyncMenuItem);

	if (typeof(global.System.drawThreadNum) === "Integer")
	{
		var multiThreadDrawCallback = function(sender)
		{
			global.System.drawThreadNum = sender.flag.value;
		};

		displayMenu.add(this.multiThreadDrawMenuItem = new global.KAGMenuItem(this, __t("描画スレッド分割数(&N)"), 0, void, false));
		this.multiThreadDrawMenuItem.add(this.multiThreadDraw1MenuItem = new global.KAGFlagMenuItem(this, __t("無効：スレッド分割しない(&D)"), 1, multiThreadDrawFlag, 1));
		this.multiThreadDrawMenuItem.add(this.multiThreadDraw0MenuItem = new global.KAGFlagMenuItem(this, __t("自動：プロセッサ数で分割(&A)"), 1, multiThreadDrawFlag, 0));
		this.multiThreadDrawMenuItem.add(new global.MenuItem(this, "-"));
		this.multiThreadDrawMenuItem.add(this.multiThreadDraw2MenuItem = new global.KAGFlagMenuItem(this, __t("&2スレッド"), 1, multiThreadDrawFlag, 2));
		this.multiThreadDrawMenuItem.add(this.multiThreadDraw4MenuItem = new global.KAGFlagMenuItem(this, __t("&4スレッド"), 1, multiThreadDrawFlag, 4));
		this.multiThreadDrawMenuItem.add(this.multiThreadDraw8MenuItem = new global.KAGFlagMenuItem(this, __t("&8スレッド"), 1, multiThreadDrawFlag, 8));
		this.multiThreadDraw1MenuItem.afterCallback = multiThreadDrawCallback;
		this.multiThreadDraw0MenuItem.afterCallback = multiThreadDrawCallback;
		this.multiThreadDraw2MenuItem.afterCallback = multiThreadDrawCallback;
		this.multiThreadDraw4MenuItem.afterCallback = multiThreadDrawCallback;
		this.multiThreadDraw8MenuItem.afterCallback = multiThreadDrawCallback;
		multiThreadDrawCallback(this.multiThreadDraw1MenuItem);
	}
};

global.addMessageWindowMenu = function(patchMenu)
{
	patchMenu.add(this.messageWindowMenuItem = new global.KAGMessageWindowMenuItem(this, __t("メッセージウィンドウ(&M)"), 0, void, false));
};
