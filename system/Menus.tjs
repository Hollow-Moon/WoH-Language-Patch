// Menus.tjs - メニュー作成関数の定義
// Copyright (C)2001-2009, W.Dee and contributors  改変・配布は自由です
if(typeof(global.MenuItem) !== "Object")
{
	Plugins.link("menu.dll");
}

function KAGWindow_createMenus()
{
	// この関数は MainWindow クラスのオブジェクトのコンテキスト上で実行されます

	menu.add(this.systemMenu = new KAGMenuItem(this, __t("システム(&S)"), 0, "", false));

	systemMenu.add(this.rightClickMenuItem = new KAGMenuItem(this, __t("メッセージを消す(&S)"), 0,
		onRightClickMenuItemClick, false));

	systemMenu.add(this.showHistoryMenuItem = new KAGMenuItem(this, __t("メッセージ履歴の表示(&H)"), 0,
		onShowHistoryMenuItemClick, false));

	systemMenu.add(this.skipToNextStopMenuItem = new KAGMenuItem(this,
		autoRecordPageShowing?__t("次の選択肢/未読まで進む(&F)"):__t("次の選択肢まで進む(&F)"), 0,
		onSkipToNextStopMenuItemClick, false));

	systemMenu.add(this.autoModeMenuItem = new KAGMenuItem(this, __t("自動的に読み進む(&A)"), 0,
		onAutoModeMenuItemClick, false));

	systemMenu.add(this.autoModeWaitMenu = new KAGMenuItem(this, __t("自動的に読み進むウェイト(&D)"), 0,
		void, false));

		autoModeWaitMenu.add(this.autoModeFastMenuItem = new KAGMenuItem(this, __t("短い(&1)"), 1,
			onAutoModeWaitMenuClick, false));
		autoModeFastMenuItem.wait = autoModePageWaits.fast;
		autoModeFastMenuItem.lwait = autoModeLineWaits.fast;
		autoModeWaitMenu.add(this.autoModeFasterMenuItem = new KAGMenuItem(this, __t("やや短い(&2)"), 1,
			onAutoModeWaitMenuClick, false));
		autoModeFasterMenuItem.wait = autoModePageWaits.faster;
		autoModeFasterMenuItem.lwait = autoModeLineWaits.faster;
		autoModeWaitMenu.add(this.autoModeMediumMenuItem = new KAGMenuItem(this, __t("普通(&3)"), 1,
			onAutoModeWaitMenuClick, false));
		autoModeMediumMenuItem.wait = autoModePageWaits.medium;
		autoModeMediumMenuItem.lwait = autoModeLineWaits.medium;
		autoModeWaitMenu.add(this.autoModeSlowerMenuItem = new KAGMenuItem(this, __t("やや長い(&4)"), 1,
			onAutoModeWaitMenuClick, false));
		autoModeSlowerMenuItem.wait = autoModePageWaits.slower;
		autoModeSlowerMenuItem.lwait = autoModeLineWaits.slower;
		autoModeWaitMenu.add(this.autoModeSlowMenuItem = new KAGMenuItem(this, __t("長い(&5)"), 1,
			onAutoModeWaitMenuClick, false));
		autoModeSlowMenuItem.wait = autoModePageWaits.slow;
		autoModeSlowMenuItem.lwait = autoModeLineWaits.slow;

	systemMenu.add(new MenuItem(this, "-"));

	systemMenu.add(this.goBackMenuItem = new KAGMenuItem(this, __t("前に戻る(&B)"), 0,
		onBackStartMenuItemClick, false));

	systemMenu.add(this.goToStartMenuItem = new KAGMenuItem(this, __t("最初に戻る(&R)"), 0,
		onGoToStartMenuItemClick, false));

	systemMenu.add(new MenuItem(this, "-"));

	systemMenu.add(this.exitMenuItem = new KAGMenuItem(this, __t("終了(&X)"), 0, onExitMenuItemClick, false));

	menu.add(this.characterMenu = new KAGMenuItem(this, __t("文字表示(&C)"), 0, void, false));

		characterMenu.add(this.chSpeedMenu = new KAGMenuItem(this, __t("表示速度(&C)"), 0, void, false));

			chSpeedMenu.add(this.chNoWaitMenuItem = new KAGMenuItem(this, __t("ノーウェイト(&W)"), 1,
				onChSpeedMenuItemClick, false));
			chNoWaitMenuItem.speed = 0;
			chSpeedMenu.add(this.chFastMenuItem = new KAGMenuItem(this, __t("高速(&F)"), 1,
				onChSpeedMenuItemClick, false));
			chFastMenuItem.speed = chSpeeds.fast;
			chSpeedMenu.add(this.chNormalMenuItem = new KAGMenuItem(this, __t("普通(&N)"), 1,
				onChSpeedMenuItemClick, false));
			chNormalMenuItem.speed = chSpeeds.normal;
			chSpeedMenu.add(this.chSlowMenuItem = new KAGMenuItem(this, __t("遅い(&S)"), 1,
				onChSpeedMenuItemClick, false));
			chSlowMenuItem.speed = chSpeeds.slow;

			chSpeedMenu.add(new MenuItem(this, "-"));

			chSpeedMenu.add(this.chNonStopToPageBreakItem = new KAGMenuItem(this, __t("ページ末まで一気に(&P)"), 0,
				onChNonStopToPageBreakItemClick, false));

		characterMenu.add(this.ch2ndSpeedMenu = new KAGMenuItem(this, __t("一度読んだところは(&I)"), 0, void, false));

			ch2ndSpeedMenu.add(this.ch2ndNoWaitMenuItem = new KAGMenuItem(this, __t("ノーウェイト(&W)"), 1,
				onCh2ndSpeedMenuItemClick, false));
			ch2ndNoWaitMenuItem.speed = 0;
			ch2ndSpeedMenu.add(this.ch2ndFastMenuItem = new KAGMenuItem(this, __t("高速(&F)"), 1,
				onCh2ndSpeedMenuItemClick, false));
			ch2ndFastMenuItem.speed = chSpeeds.fast;
			ch2ndSpeedMenu.add(this.ch2ndNormalMenuItem = new KAGMenuItem(this, __t("普通(&N)"), 1,
				onCh2ndSpeedMenuItemClick, false));
			ch2ndNormalMenuItem.speed = chSpeeds.normal;
			ch2ndSpeedMenu.add(this.ch2ndNoChangeMenuItem = new KAGMenuItem(this, __t("変えない(&M)"), 1,
				onCh2ndSpeedMenuItemClick, false));
			ch2ndNoChangeMenuItem.speed = -1; // 変えない

			ch2ndSpeedMenu.add(new MenuItem(this, "-"));

			ch2ndSpeedMenu.add(this.ch2ndNonStopToPageBreakItem = new KAGMenuItem(this, __t("ページ末まで一気に(&P)"), 0,
				onCh2ndNonStopToPageBreakItemClick, false));

		characterMenu.add(new MenuItem(this, "-"));

		characterMenu.add(this.chAntialiasMenuItem = new KAGMenuItem(this, __t("アンチエイリアス(&A)"), 0,
			onChAntialiasMenuItemClick, false));

		characterMenu.add(this.chChangeFontMenuItem = new KAGMenuItem(this, __t("フォント(&D) ..."), 0,
			onChChangeFontMenuItem, false));

	if(freeSaveDataMode)
	{
		// フリーセーブモードの場合
		menu.add(this.bookMarkMenu = new KAGMenuItem(this, __t("栞(&J)"), 0, void, false));
		bookMarkMenu.add(this.restoreMenu = new KAGMenuItem(this, __t("栞をたどる(&J) ..."), 0, onRestoreMenuClick, false));
		bookMarkMenu.add(this.storeMenu = new KAGMenuItem(this, __t("栞をはさむ(&M) ..."), 0, onStoreMenuClick, false));
	}
	else
	{
		menu.add(this.restoreMenu = new KAGMenuItem(this, __t("栞をたどる(&J)"), 0, onRestoreMenuClick, false));
		menu.add(this.storeMenu = new KAGMenuItem(this, __t("栞をはさむ(&M)"), 0, onStoreMenuClick, false));
	}

@if(GAME_WOHN)
	menu.add(this.quickMenu = new KAGMenuItem(this, __t("クイック(&Q)"), 0, void, false));

		quickMenu.add(this.quickSaveMenuItem = new KAGMenuItem(this, __t("クイックセーブ(&S)"), 1,
			saveQuickToEmpty, false));

		quickMenu.add(new MenuItem(this, "-"));

		quickMenu.add(this.quickLoadMenuItem = new KAGMenuItem(this, __t("クイックロード(&L)"), 1,
			"kag.loadQuickFromLast()", false));

		quickMenu.add(this.quickMenuItem = new KAGMenuItem(this, __t("クイックロードメニュー(&M)"), 1,
			"openQuickMenu()", false));
@endif

	menu.add(this.displayMenu = new KAGMenuItem(this, __t("画面(&V)"), 0, void, false));

		displayMenu.add(this.windowedMenuItem = new KAGMenuItem(this, __t("ウィンドウ表示(&W)"), 1,
			onWindowedMenuItemClick, false));
		displayMenu.add(this.fullScreenMenuItem = new KAGMenuItem(this, __t("フルスクリーン(&F)"), 1,
			onFullScreenMenuItemClick, false));

@if(GAME_WOHN)
	menu.add(this.operateMenu = new KAGMenuItem(this, __t("動作設定(&O)"), 0, void, false));
		operateMenu.add(this.operateMouseMoveMenuItem = new KAGMenuItem(this, __t("確認ダイアログの自動移動(&M)"), 0, void, false));
			operateMouseMoveMenuItem.add(this.moveToYesMenuItem = new KAGMenuItem(this, __t("「はい」へ移動"), 1,
				onMoveToYesMenuItemClick, false));
			operateMouseMoveMenuItem.add(this.moveToNoMenuItem = new KAGMenuItem(this, __t("「いいえ」へ移動"), 1,
				onMoveToNoMenuItemClick, false));
			operateMouseMoveMenuItem.add(this.moveToCenterMenuItem = new KAGMenuItem(this, __t("中間へ移動"), 1,
				onMoveToCenterMenuItemClick, false));
@endif

	menu.add(this.helpMenu = new KAGMenuItem(this, __t("ヘルプ(&H)"), 0, void, false));

		helpMenu.add(this.helpIndexMenuItem = new KAGMenuItem(this, __t("目次(&I) ..."), 0,
			onHelpIndexMenuItemClick, false));
		helpMenu.add(this.helpAboutMenuItem = new KAGMenuItem(this, __t("このソフトについて(&A) ..."), 0,
			onHelpAboutMenuItemClick, false));

	menu.add(this.debugMenu = new KAGMenuItem(this, __t("デバッグ(&D)"), 0, void, false));

@if(GAME_WOHN)
		debugMenu.add(this.loadScenarioMenuItem = new KAGMenuItem(this, __t("シナリオの読込み(&R)"), 1,
			onExecDialogMenuItemClick, false));
@endif
		debugMenu.add(this.reloadScenarioMenuItem = new KAGMenuItem(this, __t("シナリオの再読込み(&R)"), 1,
			onReloadScenarioMenuItemClick, false));
@if(GAME_WOHN)
		debugMenu.add(this.loadLastScenarioMenuItem = new KAGMenuItem(this, __t("前回「シナリオの読込み」をもう一度(&L)"), 1,
			onLoadLastScenarionMenuItemClick, false));
@endif
		debugMenu.add(this.showConsoleMenuItem = new KAGMenuItem(this, __t("コンソール(&C)\tShift+F4"), 1,
			onShowConsoleMenuItemClick, false));
		debugMenu.add(this.showControllerMenuItem = new KAGMenuItem(this, __t("コントローラ(&S)\tShift+F1"), 1,
			onShowContollerMenuItemClick, false));

@if(GAME_WOHN)
		debugMenu.add(new MenuItem(this, "-"));

		debugMenu.add(this.showControllerMenuItem = new KAGMenuItem(this, __t("システムリセット"), 1,
																	resetAll, false));

		debugMenu.add(new MenuItem(this, "-"));

		debugMenu.add(this.debugWinMenuItem = new KAGMenuItem(this, __t("デバッグ窓表示"), 0,
			onDebugWinMenuItemClick, false));

		debugMenu.add(new MenuItem(this, "-"));

		debugMenu.add(this.autoLabelSaveModeMenuItem = new KAGMenuItem(this, __t("自動ラベルセーブ"), 0,
			onAutoLabelSaveModeMenuItemClick, false));

		debugMenu.add(this.skipToPrevLabelMenuItem = new KAGMenuItem(this, __t("前のラベルに戻る\tAlt+←"), 0,
			onSkipToPrevLabelMenuItemClick, false));

		debugMenu.add(this.skipToNextLabelMenuItem = new KAGMenuItem(this, __t("次のラベルに進む\tAlt+→"), 0,
			onSkipToNextLabelMenuItemClick, false));

		debugMenu.add(new MenuItem(this, "-"));

		debugMenu.add(this.chDebugLogMenuItem = new KAGMenuItem(this, __t("KAGEXログモード"), 0,
			onChDebugLogMenuItemClick, false));

		debugMenu.add(this.outputDebugLogMenuItem = new KAGMenuItem(this, __t("KAGEXログを出力する"), 0,
			onOutputDebugLogMenuItemClick, false));
@endif

@if(GAME_FATE||GAME_FHAT)
		debugMenu.add(new MenuItem(this, "-"));
		debugMenu.add(this.voiceSpeedMenu = new KAGMenuItem(this, __t("ボイス速度(&V)"), 0, void, false));
			voiceSpeedMenu.add(this.voiceNormalSpeedMenuItem = new KAGMenuItem(this, __t("通常(&N)"), 1,
				onVoiceSpeedMenuItemClick, false));
			voiceNormalSpeedMenuItem.speed = 1.0;
			voiceSpeedMenu.add(this.voiceOneHalfSpeedMenuItem = new KAGMenuItem(this, __t("1.5倍速(&F)"), 1,
				onVoiceSpeedMenuItemClick, false));
			voiceOneHalfSpeedMenuItem.speed = 1.5;
			voiceSpeedMenu.add(this.voiceDoubleSpeedMenuItem = new KAGMenuItem(this, __t("2倍速(&D)"), 1,
				onVoiceSpeedMenuItemClick, false));
			voiceDoubleSpeedMenuItem.speed = 2.0;
			voiceSpeedMenu.add(this.voiceDoubleHalfSpeedMenuItem = new KAGMenuItem(this, __t("2.5倍速(&E)"), 1,
				onVoiceSpeedMenuItemClick, false));
			voiceDoubleHalfSpeedMenuItem.speed = 2.5;
			voiceSpeedMenu.add(this.voiceTripleSpeedMenuItem = new KAGMenuItem(this, __t("3倍速(&T)"), 1,
				onVoiceSpeedMenuItemClick, false));
			voiceTripleSpeedMenuItem.speed = 3.0;
@endif
}


// 以下、KAG 用 メニューアイテムクラス
class KAGMenuItem extends MenuItem
{
	// 基本的に MenuItem だが、指定されたイベント、あるいは
	// 文字列を実行する機能を持つ
	var owner;
	var command;
	var _accessible = true;
	var _enabled = true;
	var autoEnable = false;
@if(GAME_WOHN)
	var groupTag;
@endif

	function KAGMenuItem(window, caption, group, command, autoenable)
	{
		super.MenuItem(window, caption);
		this.owner = window;
@if(GAME_WOHN)
		// command が辞書配列だった場合は exp, clickse, clicksebuf を参照して効果音をつける
		if (command instanceof "Dictionary") {
			with (command) command = createSoundExpression(.exp, .clickse, .clicksebuf);
		}
@endif
		this.command = command;
		this.autoEnable = autoenable;
		if(group!=0)
		{
			this.group = group;
			this.radio = true;
		}
	}

	function finalize()
	{
		delete owner;
		delete command;
		super.finalize(...);
	}

@if(GAME_WOHN)
	// groupTagでグループ番号を再設定
	function resetChildItemGrouping() {
		var list = this.children, sorted = [];
		var grpMap = %[], grpList = [], grp = 0;
		for (var i = 0; i < list.count; i++) {
			var item = list[i];
			sorted[item.index] = item if (item !== void);
		}
		for (var i = 0; i < sorted.count; i++) {
			if (sorted[i] !== void) with (sorted[i]) {
				if (.radio && typeof .groupTag != "undefined" && .groupTag != "") {
					if (grpMap[.groupTag] === void) {
						grpMap[.groupTag] = .group = ++grp;
						grpList[grp] = .groupTag;
					} else
						.group = grpMap[.groupTag];
				}
			}
		}
		return grpList;
	}
@endif

	property enabled  // オーバーライド
	{
		getter { return _enabled; }
		setter(x) { _enabled = x; super.enabled = _accessible && _enabled; }
	}

	property accessible
	{
		getter { return _accessible; }
		setter(x) { _accessible = x; super.enabled = _accessible && _enabled; }
	}

	function click()
	{
		// click 動作
@if(!GAME_WOHN)
		if(command !== void)
@endif
@if(GAME_WOHN)
		if (_accessible && _enabled && command !== void)
@endif
		{
			if(typeof command == "String")
			{
				Scripts.eval(command);
			}
			else
			{
				command(this);
			}
		}
	}

	function onClick()
	{
		super.onClick(...);
		click();
	}

@if(GAME_WOHN)
	// サウンドを鳴らすための式を作成する
	// exp になにか式があった場合はカンマでつなぐ
	// system/utils.tjsにあっても良いと思うが現状は MessageLayer と DialogLayer で個別で持っている
	function createSoundExpression(exp, storage, buf) {
		if (storage == "") return exp;
		buf = 0 if (buf === void);
		if (typeof exp === "String") {
			var seexp = "(kag.se["+ buf +"].play(%[storage:\"" + storage.escape() +"\"]))";
			seexp += ",("+exp+")" if (exp != "");
			return seexp;
		} else {
			// expがfunctionだった場合
			this._clickse    = storage;
			this._clicksebuf = buf;
			this._expression = exp;
			return function(sender) {
				kag.se[sender._clicksebuf].play(%[storage: sender._clickse]);
				sender._expression(sender);
			};
		}
	}
@endif
}
